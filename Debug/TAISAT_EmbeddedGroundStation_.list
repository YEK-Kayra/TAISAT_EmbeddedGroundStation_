
TAISAT_EmbeddedGroundStation_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009094  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08009238  08009238  0000a238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009600  08009600  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009600  08009600  0000a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009608  08009608  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009608  08009608  0000a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800960c  0800960c  0000a60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009610  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200001e8  080097f8  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  080097f8  0000b614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e462  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002400  00000000  00000000  0001967a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0001ba80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008cf  00000000  00000000  0001c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017677  00000000  00000000  0001ceaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100d0  00000000  00000000  00034526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b51d  00000000  00000000  000445f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfb13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e0  00000000  00000000  000cfb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000d3c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800921c 	.word	0x0800921c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800921c 	.word	0x0800921c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MS5611_Init>:


/******************************************************************************
         			#### MS5611 FUNCTIONS ####
******************************************************************************/
MS5611_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *dev){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	 MS5611_Reset(dev);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 f86f 	bl	8001034 <MS5611_Reset>

	 if(HAL_I2C_IsDeviceReady(dev->i2c, dev->I2C_ADDRESS, 1, 1000) != HAL_OK){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	8899      	ldrh	r1, [r3, #4]
 8000f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f62:	2201      	movs	r2, #1
 8000f64:	f002 fb86 	bl	8003674 <HAL_I2C_IsDeviceReady>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d000      	beq.n	8000f70 <MS5611_Init+0x28>

			__NOP();
 8000f6e:	bf00      	nop

	 }

	MS5611_Get_CalibCoeff(dev);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f879 	bl	8001068 <MS5611_Get_CalibCoeff>

	/**
	 * It is calculated average vertical altitude for set to zero our actual altitude
	 */
	if(dev->Ref_Alt_Sel == 'm'){
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8000f7c:	2b6d      	cmp	r3, #109	@ 0x6d
 8000f7e:	d10c      	bne.n	8000f9a <MS5611_Init+0x52>

		dev->FixedAltitude = 0.0; //We set zero at the first time because gets the real place altitude value
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	661a      	str	r2, [r3, #96]	@ 0x60

		dev->FixedAltitude = MS5611_Calc_TemporaryAltitude(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f819 	bl	8000fc0 <MS5611_Calc_TemporaryAltitude>
 8000f8e:	eef0 7a40 	vmov.f32	s15, s0
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 8000f98:	e008      	b.n	8000fac <MS5611_Init+0x64>

		 }
		 else if(dev->Ref_Alt_Sel == 'M'){
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8000fa0:	2b4d      	cmp	r3, #77	@ 0x4d
 8000fa2:	d103      	bne.n	8000fac <MS5611_Init+0x64>

			 dev->FixedAltitude = 0.0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	661a      	str	r2, [r3, #96]	@ 0x60

		 }
	/**
	 * In the beginning, variables that record the amounts of change are reset for security measures
	 */
	MS5611_ResetRef_DeltaVal(dev);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 fcd9 	bl	8001964 <MS5611_ResetRef_DeltaVal>

	return MS5611_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <MS5611_Calc_TemporaryAltitude>:

float MS5611_Calc_TemporaryAltitude(MS5611_HandleTypeDef *dev){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

	 float tempAltitude = 0;
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]

	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	e01d      	b.n	8001010 <MS5611_Calc_TemporaryAltitude+0x50>

		 MS5611_Read_ActVal(dev);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fc5b 	bl	8001890 <MS5611_Read_ActVal>
		 tempAltitude = (float)(tempAltitude + (float)(MS5611_Altitude * 0.05));
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <MS5611_Calc_TemporaryAltitude+0x70>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff faba 	bl	8000558 <__aeabi_f2d>
 8000fe4:	a310      	add	r3, pc, #64	@ (adr r3, 8001028 <MS5611_Calc_TemporaryAltitude+0x68>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	f7ff fb0d 	bl	8000608 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff fddf 	bl	8000bb8 <__aeabi_d2f>
 8000ffa:	ee07 0a10 	vmov	s14, r0
 8000ffe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001006:	edc7 7a03 	vstr	s15, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	3301      	adds	r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b13      	cmp	r3, #19
 8001014:	ddde      	ble.n	8000fd4 <MS5611_Calc_TemporaryAltitude+0x14>

	  }

	 return tempAltitude;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	ee07 3a90 	vmov	s15, r3

}
 800101c:	eeb0 0a67 	vmov.f32	s0, s15
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	9999999a 	.word	0x9999999a
 800102c:	3fa99999 	.word	0x3fa99999
 8001030:	2000035c 	.word	0x2000035c

08001034 <MS5611_Reset>:
void MS5611_Reset(MS5611_HandleTypeDef *dev){
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
 800103a:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Write(dev->i2c, dev->I2C_ADDRESS, dev->I2C_ADDRESS, 1, &ResetCom, 1, 1000);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	8899      	ldrh	r1, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	889a      	ldrh	r2, [r3, #4]
 8001048:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <MS5611_Reset+0x30>)
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	f002 fa12 	bl	8003480 <HAL_I2C_Mem_Write>

}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000002 	.word	0x20000002

08001068 <MS5611_Get_CalibCoeff>:


void MS5611_Get_CalibCoeff(MS5611_HandleTypeDef *dev){
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	@ 0x38
 800106c:	af02      	add	r7, sp, #8
 800106e:	6078      	str	r0, [r7, #4]

	uint8_t CalibCoefAddrss[7] = {0xA2, //C1
 8001070:	4a8c      	ldr	r2, [pc, #560]	@ (80012a4 <MS5611_Get_CalibCoeff+0x23c>)
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107a:	6018      	str	r0, [r3, #0]
 800107c:	3304      	adds	r3, #4
 800107e:	8019      	strh	r1, [r3, #0]
 8001080:	3302      	adds	r3, #2
 8001082:	0c0a      	lsrs	r2, r1, #16
 8001084:	701a      	strb	r2, [r3, #0]
								  0xA8, //C4
								  0xAA, //C5
								  0xAC, //C6
								  0xAE}; /*! The last address is for CRC*/

	uint8_t TempryCalibCoefVal[2] = {0};	/*! Temporary buffer that gets two complement of each calibration coefficient*/
 8001086:	2300      	movs	r3, #0
 8001088:	83bb      	strh	r3, [r7, #28]
	uint8_t CalibCoefVal[14] = {0};			/*! Stable buffer that collects all complements of calibration coefficients*/
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	811a      	strh	r2, [r3, #8]
	uint8_t cnt = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f



	for(cnt = 0; cnt <= 6 ; cnt++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80010a6:	e03b      	b.n	8001120 <MS5611_Get_CalibCoeff+0xb8>

		HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &CalibCoefAddrss[cnt], 1, 1000);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	8899      	ldrh	r1, [r3, #4]
 80010b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010b4:	f107 0220 	add.w	r2, r7, #32
 80010b8:	441a      	add	r2, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	f001 fead 	bl	8002e20 <HAL_I2C_Master_Transmit>


				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010ca:	e010      	b.n	80010ee <MS5611_Get_CalibCoeff+0x86>

					HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &TempryCalibCoefVal[cnt_2], 2, 1000);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	8899      	ldrh	r1, [r3, #4]
 80010d4:	f107 021c 	add.w	r2, r7, #28
 80010d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010da:	441a      	add	r2, r3
 80010dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2302      	movs	r3, #2
 80010e4:	f001 ff9a 	bl	800301c <HAL_I2C_Master_Receive>
				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 80010e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ea:	3301      	adds	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	ddeb      	ble.n	80010cc <MS5611_Get_CalibCoeff+0x64>

				}

		CalibCoefVal[(cnt*2)]   = TempryCalibCoefVal[0];
 80010f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	7f3a      	ldrb	r2, [r7, #28]
 80010fc:	3330      	adds	r3, #48	@ 0x30
 80010fe:	443b      	add	r3, r7
 8001100:	f803 2c24 	strb.w	r2, [r3, #-36]
		CalibCoefVal[(cnt*2+1)] = TempryCalibCoefVal[1];
 8001104:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	3301      	adds	r3, #1
 800110c:	7f7a      	ldrb	r2, [r7, #29]
 800110e:	3330      	adds	r3, #48	@ 0x30
 8001110:	443b      	add	r3, r7
 8001112:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(cnt = 0; cnt <= 6 ; cnt++){
 8001116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800111a:	3301      	adds	r3, #1
 800111c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001124:	2b06      	cmp	r3, #6
 8001126:	d9bf      	bls.n	80010a8 <MS5611_Get_CalibCoeff+0x40>

	}

	cnt = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	/*! Complements of each calibration coefficient consists MSB and LSB bits*/
	dev->Clb_Cf.C1  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2; // uint16_t <== |MSB_C1|LSB_C1|
 800112e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001132:	3330      	adds	r3, #48	@ 0x30
 8001134:	443b      	add	r3, r7
 8001136:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001142:	3301      	adds	r3, #1
 8001144:	3330      	adds	r3, #48	@ 0x30
 8001146:	443b      	add	r3, r7
 8001148:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b21b      	sxth	r3, r3
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	80da      	strh	r2, [r3, #6]
 8001158:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800115c:	3302      	adds	r3, #2
 800115e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C2  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001162:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001166:	3330      	adds	r3, #48	@ 0x30
 8001168:	443b      	add	r3, r7
 800116a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001176:	3301      	adds	r3, #1
 8001178:	3330      	adds	r3, #48	@ 0x30
 800117a:	443b      	add	r3, r7
 800117c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21b      	sxth	r3, r3
 8001186:	b29a      	uxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	811a      	strh	r2, [r3, #8]
 800118c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001190:	3302      	adds	r3, #2
 8001192:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C3  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001196:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800119a:	3330      	adds	r3, #48	@ 0x30
 800119c:	443b      	add	r3, r7
 800119e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011aa:	3301      	adds	r3, #1
 80011ac:	3330      	adds	r3, #48	@ 0x30
 80011ae:	443b      	add	r3, r7
 80011b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	815a      	strh	r2, [r3, #10]
 80011c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011c4:	3302      	adds	r3, #2
 80011c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C4  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80011ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ce:	3330      	adds	r3, #48	@ 0x30
 80011d0:	443b      	add	r3, r7
 80011d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21a      	sxth	r2, r3
 80011da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011de:	3301      	adds	r3, #1
 80011e0:	3330      	adds	r3, #48	@ 0x30
 80011e2:	443b      	add	r3, r7
 80011e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	819a      	strh	r2, [r3, #12]
 80011f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011f8:	3302      	adds	r3, #2
 80011fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C5  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80011fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001202:	3330      	adds	r3, #48	@ 0x30
 8001204:	443b      	add	r3, r7
 8001206:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001212:	3301      	adds	r3, #1
 8001214:	3330      	adds	r3, #48	@ 0x30
 8001216:	443b      	add	r3, r7
 8001218:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21b      	sxth	r3, r3
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	81da      	strh	r2, [r3, #14]
 8001228:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800122c:	3302      	adds	r3, #2
 800122e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C6  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001232:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001236:	3330      	adds	r3, #48	@ 0x30
 8001238:	443b      	add	r3, r7
 800123a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001246:	3301      	adds	r3, #1
 8001248:	3330      	adds	r3, #48	@ 0x30
 800124a:	443b      	add	r3, r7
 800124c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001250:	b21b      	sxth	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b21b      	sxth	r3, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	821a      	strh	r2, [r3, #16]
 800125c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001260:	3302      	adds	r3, #2
 8001262:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001266:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800126a:	3330      	adds	r3, #48	@ 0x30
 800126c:	443b      	add	r3, r7
 800126e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21a      	sxth	r2, r3
 8001276:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800127a:	3301      	adds	r3, #1
 800127c:	3330      	adds	r3, #48	@ 0x30
 800127e:	443b      	add	r3, r7
 8001280:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21b      	sxth	r3, r3
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	825a      	strh	r2, [r3, #18]
 8001290:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001294:	3302      	adds	r3, #2
 8001296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

}
 800129a:	bf00      	nop
 800129c:	3730      	adds	r7, #48	@ 0x30
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08009238 	.word	0x08009238

080012a8 <MS5611_ReadRaw_Press_Temp>:


void MS5611_ReadRaw_Press_Temp(MS5611_HandleTypeDef *dev){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]

	uint8_t RawDataD1[3]  = {0}; /*! D1 = Raw pressure value that will be compensated at other functions*/
 80012b0:	4b38      	ldr	r3, [pc, #224]	@ (8001394 <MS5611_ReadRaw_Press_Temp+0xec>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	81bb      	strh	r3, [r7, #12]
 80012b6:	2300      	movs	r3, #0
 80012b8:	73bb      	strb	r3, [r7, #14]
	uint8_t RawDataD2[3]  = {0}; /*! D2 = Raw temperature value that will be compensated at other functions*/
 80012ba:	4b36      	ldr	r3, [pc, #216]	@ (8001394 <MS5611_ReadRaw_Press_Temp+0xec>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	813b      	strh	r3, [r7, #8]
 80012c0:	2300      	movs	r3, #0
 80012c2:	72bb      	strb	r3, [r7, #10]
	 *
	 * @Attention! you must wait minimum 15 milisecond after each i2c command because of clock line and calculation times.
	 */

	/*! Gets D1(Raw Pressure)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D1, 1, 1000); //(1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	8899      	ldrh	r1, [r3, #4]
 80012cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	4a30      	ldr	r2, [pc, #192]	@ (8001398 <MS5611_ReadRaw_Press_Temp+0xf0>)
 80012d6:	f001 fda3 	bl	8002e20 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80012da:	2014      	movs	r0, #20
 80012dc:	f001 f8f6 	bl	80024cc <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);	 //(2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	8899      	ldrh	r1, [r3, #4]
 80012e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	4a2a      	ldr	r2, [pc, #168]	@ (800139c <MS5611_ReadRaw_Press_Temp+0xf4>)
 80012f2:	f001 fd95 	bl	8002e20 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80012f6:	2014      	movs	r0, #20
 80012f8:	f001 f8e8 	bl	80024cc <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD1[0], 3, 10000);	 //(3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	8899      	ldrh	r1, [r3, #4]
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	f242 7310 	movw	r3, #10000	@ 0x2710
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2303      	movs	r3, #3
 8001310:	f001 fe84 	bl	800301c <HAL_I2C_Master_Receive>
	dev->ClcPrms.D1 = (uint32_t)((RawDataD1[0]<<16) | (RawDataD1[1]<<8) | (RawDataD1[2]<<0)); // MSB|LSB|XLSB
 8001314:	7b3b      	ldrb	r3, [r7, #12]
 8001316:	041a      	lsls	r2, r3, #16
 8001318:	7b7b      	ldrb	r3, [r7, #13]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	4313      	orrs	r3, r2
 800131e:	7bba      	ldrb	r2, [r7, #14]
 8001320:	4313      	orrs	r3, r2
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	615a      	str	r2, [r3, #20]

	/*! Gets D2(Raw Temperature)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D2, 1, 1000); //(1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	8899      	ldrh	r1, [r3, #4]
 8001330:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <MS5611_ReadRaw_Press_Temp+0xf8>)
 800133a:	f001 fd71 	bl	8002e20 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800133e:	2014      	movs	r0, #20
 8001340:	f001 f8c4 	bl	80024cc <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);  	 //(2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	8899      	ldrh	r1, [r3, #4]
 800134c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	4a11      	ldr	r2, [pc, #68]	@ (800139c <MS5611_ReadRaw_Press_Temp+0xf4>)
 8001356:	f001 fd63 	bl	8002e20 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800135a:	2014      	movs	r0, #20
 800135c:	f001 f8b6 	bl	80024cc <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD2[0], 3, 1000);  //(3)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	8899      	ldrh	r1, [r3, #4]
 8001368:	f107 0208 	add.w	r2, r7, #8
 800136c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2303      	movs	r3, #3
 8001374:	f001 fe52 	bl	800301c <HAL_I2C_Master_Receive>
	dev->ClcPrms.D2 = (uint32_t)((RawDataD2[0]<<16) | (RawDataD2[1]<<8) | (RawDataD2[2]<<0)); // MSB|LSB|XLSB
 8001378:	7a3b      	ldrb	r3, [r7, #8]
 800137a:	041a      	lsls	r2, r3, #16
 800137c:	7a7b      	ldrb	r3, [r7, #9]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4313      	orrs	r3, r2
 8001382:	7aba      	ldrb	r2, [r7, #10]
 8001384:	4313      	orrs	r3, r2
 8001386:	461a      	mov	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	08009240 	.word	0x08009240
 8001398:	20000000 	.word	0x20000000
 800139c:	20000204 	.word	0x20000204
 80013a0:	20000001 	.word	0x20000001

080013a4 <MS5611_FirstCalculateDatas>:


void MS5611_FirstCalculateDatas(MS5611_HandleTypeDef *dev){
 80013a4:	b5b0      	push	{r4, r5, r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	dev->ClcPrms.dT   = dev->ClcPrms.D2 - dev->Clb_Cf.C5 * pow(2,8);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8af 	bl	8000514 <__aeabi_ui2d>
 80013b6:	4604      	mov	r4, r0
 80013b8:	460d      	mov	r5, r1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	89db      	ldrh	r3, [r3, #14]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8b8 	bl	8000534 <__aeabi_i2d>
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b69      	ldr	r3, [pc, #420]	@ (8001570 <MS5611_FirstCalculateDatas+0x1cc>)
 80013ca:	f7ff f91d 	bl	8000608 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7fe ff5f 	bl	8000298 <__aeabi_dsub>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff fbe9 	bl	8000bb8 <__aeabi_d2f>
 80013e6:	4602      	mov	r2, r0
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	61da      	str	r2, [r3, #28]
	dev->ClcPrms.OFF  = dev->Clb_Cf.C2 * pow(2,17) + (dev->Clb_Cf.C4 * dev->ClcPrms.dT) / pow(2,6);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	891b      	ldrh	r3, [r3, #8]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f89f 	bl	8000534 <__aeabi_i2d>
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80013fe:	f7ff f903 	bl	8000608 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4614      	mov	r4, r2
 8001408:	461d      	mov	r5, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	899b      	ldrh	r3, [r3, #12]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	edd3 7a07 	vldr	s15, [r3, #28]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	ee17 0a90 	vmov	r0, s15
 8001424:	f7ff f898 	bl	8000558 <__aeabi_f2d>
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b51      	ldr	r3, [pc, #324]	@ (8001574 <MS5611_FirstCalculateDatas+0x1d0>)
 800142e:	f7ff fa15 	bl	800085c <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7fe ff2f 	bl	800029c <__adddf3>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fbb7 	bl	8000bb8 <__aeabi_d2f>
 800144a:	4602      	mov	r2, r0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
	dev->ClcPrms.SENS = dev->Clb_Cf.C1 * pow(2,16) + (dev->Clb_Cf.C3 * dev->ClcPrms.dT) / pow(2,7);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	88db      	ldrh	r3, [r3, #6]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f86d 	bl	8000534 <__aeabi_i2d>
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b46      	ldr	r3, [pc, #280]	@ (8001578 <MS5611_FirstCalculateDatas+0x1d4>)
 8001460:	f7ff f8d2 	bl	8000608 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4614      	mov	r4, r2
 800146a:	461d      	mov	r5, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	895b      	ldrh	r3, [r3, #10]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	edd3 7a07 	vldr	s15, [r3, #28]
 800147e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001482:	ee17 0a90 	vmov	r0, s15
 8001486:	f7ff f867 	bl	8000558 <__aeabi_f2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b3b      	ldr	r3, [pc, #236]	@ (800157c <MS5611_FirstCalculateDatas+0x1d8>)
 8001490:	f7ff f9e4 	bl	800085c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4620      	mov	r0, r4
 800149a:	4629      	mov	r1, r5
 800149c:	f7fe fefe 	bl	800029c <__adddf3>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fb86 	bl	8000bb8 <__aeabi_d2f>
 80014ac:	4602      	mov	r2, r0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	62da      	str	r2, [r3, #44]	@ 0x2c

	dev->ClcPrms.TEMP = 2000 + dev->ClcPrms.dT * dev->Clb_Cf.C6 / pow(2,23);								//Actual temperature data
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	8a1b      	ldrh	r3, [r3, #16]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	ee17 0a90 	vmov	r0, s15
 80014cc:	f7ff f844 	bl	8000558 <__aeabi_f2d>
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <MS5611_FirstCalculateDatas+0x1dc>)
 80014d6:	f7ff f9c1 	bl	800085c <__aeabi_ddiv>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <MS5611_FirstCalculateDatas+0x1e0>)
 80014e8:	f7fe fed8 	bl	800029c <__adddf3>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fb60 	bl	8000bb8 <__aeabi_d2f>
 80014f8:	4602      	mov	r2, r0
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	621a      	str	r2, [r3, #32]
	dev->ClcPrms.P	  = ((dev->ClcPrms.D1 * dev->ClcPrms.SENS / pow(2,21) - dev->ClcPrms.OFF))/pow(2,15);	//Actual pressure data
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001514:	ee17 0a90 	vmov	r0, s15
 8001518:	f7ff f81e 	bl	8000558 <__aeabi_f2d>
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <MS5611_FirstCalculateDatas+0x1e4>)
 8001522:	f7ff f99b 	bl	800085c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4614      	mov	r4, r2
 800152c:	461d      	mov	r5, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f810 	bl	8000558 <__aeabi_f2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4620      	mov	r0, r4
 800153e:	4629      	mov	r1, r5
 8001540:	f7fe feaa 	bl	8000298 <__aeabi_dsub>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MS5611_FirstCalculateDatas+0x1e8>)
 8001552:	f7ff f983 	bl	800085c <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fb2b 	bl	8000bb8 <__aeabi_d2f>
 8001562:	4602      	mov	r2, r0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bdb0      	pop	{r4, r5, r7, pc}
 8001570:	40700000 	.word	0x40700000
 8001574:	40500000 	.word	0x40500000
 8001578:	40f00000 	.word	0x40f00000
 800157c:	40600000 	.word	0x40600000
 8001580:	41600000 	.word	0x41600000
 8001584:	409f4000 	.word	0x409f4000
 8001588:	41400000 	.word	0x41400000
 800158c:	40e00000 	.word	0x40e00000

08001590 <MS5611_SecondCalculateDatas>:


void MS5611_SecondCalculateDatas(MS5611_HandleTypeDef *dev){
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

	if(dev->ClcPrms.TEMP < 2000){
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	edd3 7a08 	vldr	s15, [r3, #32]
 800159e:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80017d8 <MS5611_SecondCalculateDatas+0x248>
 80015a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	f140 80e3 	bpl.w	8001774 <MS5611_SecondCalculateDatas+0x1e4>

			/*! Low Temperature */
			dev->ClcPrms.TEMP2 = (dev->ClcPrms.dT * dev->ClcPrms.dT) / pow(2,31);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a07 	vldr	s14, [r3, #28]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80015ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015be:	eddf 6a87 	vldr	s13, [pc, #540]	@ 80017dc <MS5611_SecondCalculateDatas+0x24c>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,1);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80015d2:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80017d8 <MS5611_SecondCalculateDatas+0x248>
 80015d6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80015e0:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 80017d8 <MS5611_SecondCalculateDatas+0x248>
 80015e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80015f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015f4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80015f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,2);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	edd3 7a08 	vldr	s15, [r3, #32]
 8001608:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80017d8 <MS5611_SecondCalculateDatas+0x248>
 800160c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	edd3 7a08 	vldr	s15, [r3, #32]
 8001616:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80017d8 <MS5611_SecondCalculateDatas+0x248>
 800161a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800161e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001622:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001626:	ee27 7a87 	vmul.f32	s14, s15, s14
 800162a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800162e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

					if(dev->ClcPrms.TEMP < -1500){
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	edd3 7a08 	vldr	s15, [r3, #32]
 800163e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80017e0 <MS5611_SecondCalculateDatas+0x250>
 8001642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d571      	bpl.n	8001730 <MS5611_SecondCalculateDatas+0x1a0>
						/*! Very Low Temperature */
						dev->ClcPrms.OFF2  = dev->ClcPrms.OFF2 + 7 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	edd3 7a08 	vldr	s15, [r3, #32]
 8001658:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80017e4 <MS5611_SecondCalculateDatas+0x254>
 800165c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	edd3 7a08 	vldr	s15, [r3, #32]
 8001666:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 80017e4 <MS5611_SecondCalculateDatas+0x254>
 800166a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800166e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001672:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
 8001676:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800167a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
						dev->ClcPrms.SENS2 = dev->ClcPrms.SENS2 + 11 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500)) / pow(2,1);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff65 	bl	8000558 <__aeabi_f2d>
 800168e:	4604      	mov	r4, r0
 8001690:	460d      	mov	r5, r1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	edd3 7a08 	vldr	s15, [r3, #32]
 8001698:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80017e4 <MS5611_SecondCalculateDatas+0x254>
 800169c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80016a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80017e4 <MS5611_SecondCalculateDatas+0x254>
 80016aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b2:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80016b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ba:	ee17 0a90 	vmov	r0, s15
 80016be:	f7fe ff4b 	bl	8000558 <__aeabi_f2d>
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016ca:	f7ff f8c7 	bl	800085c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4620      	mov	r0, r4
 80016d4:	4629      	mov	r1, r5
 80016d6:	f7fe fde1 	bl	800029c <__adddf3>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7ff fa69 	bl	8000bb8 <__aeabi_d2f>
 80016e6:	4602      	mov	r2, r0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34

						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	ed93 7a08 	vldr	s14, [r3, #32]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80016f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800170e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;

		}
}
 800172e:	e04e      	b.n	80017ce <MS5611_SecondCalculateDatas+0x23e>
						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	ed93 7a08 	vldr	s14, [r3, #32]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800173c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8001772:	e02c      	b.n	80017ce <MS5611_SecondCalculateDatas+0x23e>
			dev->ClcPrms.TEMP2 = 0;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	639a      	str	r2, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 0;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	635a      	str	r2, [r3, #52]	@ 0x34
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	edc3 7a08 	vstr	s15, [r3, #32]
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80017ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80017c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bdb0      	pop	{r4, r5, r7, pc}
 80017d6:	bf00      	nop
 80017d8:	44fa0000 	.word	0x44fa0000
 80017dc:	4f000000 	.word	0x4f000000
 80017e0:	c4bb8000 	.word	0xc4bb8000
 80017e4:	44bb8000 	.word	0x44bb8000

080017e8 <MS5611_Calc_Altitude>:


float MS5611_Calc_Altitude(MS5611_HandleTypeDef *dev){
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

	return  ((SeaLevelTemp  / GradientTemp)
			* (1 - pow(((dev->ClcPrms.P/2) / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel)))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80017f6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80017fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fe:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001888 <MS5611_Calc_Altitude+0xa0>
 8001802:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001806:	ee16 0a90 	vmov	r0, s13
 800180a:	f7fe fea5 	bl	8000558 <__aeabi_f2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8001878 <MS5611_Calc_Altitude+0x90>
 8001816:	ec43 2b10 	vmov	d0, r2, r3
 800181a:	f006 fda1 	bl	8008360 <pow>
 800181e:	ec53 2b10 	vmov	r2, r3, d0
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	4919      	ldr	r1, [pc, #100]	@ (800188c <MS5611_Calc_Altitude+0xa4>)
 8001828:	f7fe fd36 	bl	8000298 <__aeabi_dsub>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	a312      	add	r3, pc, #72	@ (adr r3, 8001880 <MS5611_Calc_Altitude+0x98>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fee5 	bl	8000608 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4614      	mov	r4, r2
 8001844:	461d      	mov	r5, r3
			- dev->FixedAltitude) ;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe84 	bl	8000558 <__aeabi_f2d>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe fd1e 	bl	8000298 <__aeabi_dsub>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f7ff f9a8 	bl	8000bb8 <__aeabi_d2f>
 8001868:	4603      	mov	r3, r0
 800186a:	ee07 3a90 	vmov	s15, r3

}
 800186e:	eeb0 0a67 	vmov.f32	s0, s15
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bdb0      	pop	{r4, r5, r7, pc}
 8001878:	fd017917 	.word	0xfd017917
 800187c:	3fc85ace 	.word	0x3fc85ace
 8001880:	9d89d89d 	.word	0x9d89d89d
 8001884:	40e5a558 	.word	0x40e5a558
 8001888:	47c5e680 	.word	0x47c5e680
 800188c:	3ff00000 	.word	0x3ff00000

08001890 <MS5611_Read_ActVal>:


void MS5611_Read_ActVal(MS5611_HandleTypeDef *dev){
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

	/*! Read raw pressure and temperature MSB | LSB | XLSB values from the sensor*/
	MS5611_ReadRaw_Press_Temp(dev);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fd05 	bl	80012a8 <MS5611_ReadRaw_Press_Temp>

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	MS5611_FirstCalculateDatas(dev);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fd80 	bl	80013a4 <MS5611_FirstCalculateDatas>

	/*! If it's needed, Calculate 2st order temperature and pressure  according to MS5611 2st order algorithm */
	MS5611_SecondCalculateDatas(dev);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fe73 	bl	8001590 <MS5611_SecondCalculateDatas>

	/*! Vertical Altitude is calculated by using pressure and some coefficients */
	MS5611_Altitude = MS5611_Calc_Altitude(dev);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff9c 	bl	80017e8 <MS5611_Calc_Altitude>
 80018b0:	eef0 7a40 	vmov.f32	s15, s0
 80018b4:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <MS5611_Read_ActVal+0xb8>)
 80018b6:	edc3 7a00 	vstr	s15, [r3]

	/*! Vertical Speed is calculated by using differential of locations */
	MS5611_Calc_VertSpd(dev, MS5611_Altitude, &MS5611_VertSpeed);
 80018ba:	4b23      	ldr	r3, [pc, #140]	@ (8001948 <MS5611_Read_ActVal+0xb8>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	4922      	ldr	r1, [pc, #136]	@ (800194c <MS5611_Read_ActVal+0xbc>)
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f87a 	bl	80019c0 <MS5611_Calc_VertSpd>

	/*! Vertical acceleration is calculated by using differential of speed */
	MS5611_Calc_VertAcc(dev, MS5611_VertSpeed, &MS5611_VertAcc);
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <MS5611_Read_ActVal+0xbc>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	491f      	ldr	r1, [pc, #124]	@ (8001950 <MS5611_Read_ActVal+0xc0>)
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f890 	bl	80019fe <MS5611_Calc_VertAcc>

	/*! It's applied force on to the object that is given mass from the user */
	MS5611_Calc_gForce(dev, &MS5611_gForce, SatCar_Mass, MS5611_VertAcc);
 80018de:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <MS5611_Read_ActVal+0xc4>)
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <MS5611_Read_ActVal+0xc0>)
 80018e6:	ed93 7a00 	vldr	s14, [r3]
 80018ea:	eef0 0a47 	vmov.f32	s1, s14
 80018ee:	eeb0 0a67 	vmov.f32	s0, s15
 80018f2:	4919      	ldr	r1, [pc, #100]	@ (8001958 <MS5611_Read_ActVal+0xc8>)
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f8a3 	bl	8001a40 <MS5611_Calc_gForce>

	/*! Pressure unit is mBar and Temperature unit is celcius degress*/
	MS5611_Press = dev->ClcPrms.P/2 ;			//@e.g :
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001900:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <MS5611_Read_ActVal+0xcc>)
 800190a:	edc3 7a00 	vstr	s15, [r3]
	MS5611_Temp  = dev->ClcPrms.TEMP * 0.01; 		//@e.g : 25.57 CelciusDegress
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe20 	bl	8000558 <__aeabi_f2d>
 8001918:	a309      	add	r3, pc, #36	@ (adr r3, 8001940 <MS5611_Read_ActVal+0xb0>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe fe73 	bl	8000608 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f945 	bl	8000bb8 <__aeabi_d2f>
 800192e:	4603      	mov	r3, r0
 8001930:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <MS5611_Read_ActVal+0xd0>)
 8001932:	6013      	str	r3, [r2, #0]

}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	f3af 8000 	nop.w
 8001940:	47ae147b 	.word	0x47ae147b
 8001944:	3f847ae1 	.word	0x3f847ae1
 8001948:	2000035c 	.word	0x2000035c
 800194c:	20000360 	.word	0x20000360
 8001950:	20000364 	.word	0x20000364
 8001954:	2000036c 	.word	0x2000036c
 8001958:	20000368 	.word	0x20000368
 800195c:	20000354 	.word	0x20000354
 8001960:	20000358 	.word	0x20000358

08001964 <MS5611_ResetRef_DeltaVal>:

void MS5611_ResetRef_DeltaVal(MS5611_HandleTypeDef *dev){
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

	//At the beginning, reset the altitude values for the first and second conditions.
	dev->DeltaData.alt0 = 0.0;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	63da      	str	r2, [r3, #60]	@ 0x3c
	dev->DeltaData.alt1 = 0.0;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->DeltaData.holdAlt = 0.0;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	645a      	str	r2, [r3, #68]	@ 0x44

	//At the beginning, reset the speed values for the first and second conditions.
	dev->DeltaData.spd0 = 0.0;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	655a      	str	r2, [r3, #84]	@ 0x54
	dev->DeltaData.spd1 = 0.0;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	659a      	str	r2, [r3, #88]	@ 0x58
	dev->DeltaData.holdSpd = 0.0;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	65da      	str	r2, [r3, #92]	@ 0x5c

	//At the beginning, reset the acceleration values for the first and second conditions.
	dev->DeltaData.acc0 = 0.0;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->DeltaData.acc1 = 0.0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->DeltaData.holdAcc = 0.0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	651a      	str	r2, [r3, #80]	@ 0x50

}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <MS5611_Calc_VertSpd>:


/*!Vertical Speed is calculated by using differential of locations "V = (X1 - X0) /1 second" */
void MS5611_Calc_VertSpd(MS5611_HandleTypeDef *dev, float MS5611_Altitude, float *MS5611_VertSpeed){
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80019cc:	6079      	str	r1, [r7, #4]

	dev->DeltaData.alt1 = (MS5611_Altitude);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	641a      	str	r2, [r3, #64]	@ 0x40
	(*MS5611_VertSpeed) = (dev->DeltaData.alt1 - dev->DeltaData.alt0);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80019e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.alt0 = dev->DeltaData.alt1;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <MS5611_Calc_VertAcc>:

/*! Vertical acceleration is calculated by using differential of speed "a = (V1 - V0) / 1 second"  */
void MS5611_Calc_VertAcc(MS5611_HandleTypeDef *dev, float MS5611_VertSpeed,float *MS5611_VertAcc){
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a0a:	6079      	str	r1, [r7, #4]

	dev->DeltaData.spd1 = (MS5611_VertSpeed);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	659a      	str	r2, [r3, #88]	@ 0x58
	(*MS5611_VertAcc)	= (dev->DeltaData.spd1 - dev->DeltaData.spd0);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.spd0 = dev->DeltaData.spd1;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	655a      	str	r2, [r3, #84]	@ 0x54

}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	0000      	movs	r0, r0
	...

08001a40 <MS5611_Calc_gForce>:

/*! It's applied force on to the object that is given mass from the user. =" gForce = ObjectMass * (VerticalAcceleration / 9.80) " */
void MS5611_Calc_gForce(MS5611_HandleTypeDef *dev, float *MS5611_gForce, float SatCar_Mass, float MS5611_VertAcc){
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a4e:	edc7 0a00 	vstr	s1, [r7]

	(*MS5611_gForce) = (((MS5611_VertAcc)/GravityAccel)*(SatCar_Mass));
 8001a52:	6838      	ldr	r0, [r7, #0]
 8001a54:	f7fe fd80 	bl	8000558 <__aeabi_f2d>
 8001a58:	a30f      	add	r3, pc, #60	@ (adr r3, 8001a98 <MS5611_Calc_gForce+0x58>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fefd 	bl	800085c <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4614      	mov	r4, r2
 8001a68:	461d      	mov	r5, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fd74 	bl	8000558 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4620      	mov	r0, r4
 8001a76:	4629      	mov	r1, r5
 8001a78:	f7fe fdc6 	bl	8000608 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff f898 	bl	8000bb8 <__aeabi_d2f>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	601a      	str	r2, [r3, #0]

}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bdb0      	pop	{r4, r5, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	3f141206 	.word	0x3f141206
 8001a9c:	40239cc6 	.word	0x40239cc6

08001aa0 <HAL_UART_RxCpltCallback>:
#include "SubSys_USART_ReceiveIT_CallBacks_Driver.h"

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

	/*!
	 * The data coming from USART2 are the complete telemetry packets
	 * sent by the payload to the ground station.
	 */
	if(huart->Instance == USART2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a31      	ldr	r2, [pc, #196]	@ (8001b74 <HAL_UART_RxCpltCallback+0xd4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d104      	bne.n	8001abc <HAL_UART_RxCpltCallback+0x1c>
	{
		SubSys_WirelessCom_Telemetry_Receive_From_To(Sat_Payload, GroundStation, &dev_WirelessComApp);
 8001ab2:	4a31      	ldr	r2, [pc, #196]	@ (8001b78 <HAL_UART_RxCpltCallback+0xd8>)
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f000 f8c4 	bl	8001c44 <SubSys_WirelessCom_Telemetry_Receive_From_To>
	/*!
	 * The data coming from USART1 are for the telecommand packets and
	 * the full telemetry packet that we need to receive&send to the ground station.
	 */

	if(huart->Instance == USART1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2e      	ldr	r2, [pc, #184]	@ (8001b7c <HAL_UART_RxCpltCallback+0xdc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d151      	bne.n	8001b6a <HAL_UART_RxCpltCallback+0xca>
	{

		/*! Ground Station PC want a telemetry packet from embedded station*/
		if(UsbTTL2EmbeddedGS[0] == '*')
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8001acc:	d106      	bne.n	8001adc <HAL_UART_RxCpltCallback+0x3c>
		{
			HAL_UART_Transmit(&huart1, dev_WirelessComApp.Buffer.Rx, 200, 2000);
 8001ace:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001ad2:	22c8      	movs	r2, #200	@ 0xc8
 8001ad4:	492b      	ldr	r1, [pc, #172]	@ (8001b84 <HAL_UART_RxCpltCallback+0xe4>)
 8001ad6:	482c      	ldr	r0, [pc, #176]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001ad8:	f002 ffbe 	bl	8004a58 <HAL_UART_Transmit>
		}



		/*! Ground Station PC send a RHRH packet for color filtering*/
		if((UsbTTL2EmbeddedGS[3] !='?') && (UsbTTL2EmbeddedGS[4] !='?') && (UsbTTL2EmbeddedGS[5] !='?') && (UsbTTL2EmbeddedGS[5] !='6'))
 8001adc:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001ade:	78db      	ldrb	r3, [r3, #3]
 8001ae0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ae2:	d020      	beq.n	8001b26 <HAL_UART_RxCpltCallback+0x86>
 8001ae4:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aea:	d01c      	beq.n	8001b26 <HAL_UART_RxCpltCallback+0x86>
 8001aec:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001aee:	795b      	ldrb	r3, [r3, #5]
 8001af0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001af2:	d018      	beq.n	8001b26 <HAL_UART_RxCpltCallback+0x86>
 8001af4:	4b22      	ldr	r3, [pc, #136]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001af6:	795b      	ldrb	r3, [r3, #5]
 8001af8:	2b36      	cmp	r3, #54	@ 0x36
 8001afa:	d014      	beq.n	8001b26 <HAL_UART_RxCpltCallback+0x86>
		{
			dev_WirelessComApp.Variable.PAY_dataRHRH[0] = UsbTTL2EmbeddedGS[3];
 8001afc:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001afe:	78da      	ldrb	r2, [r3, #3]
 8001b00:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <HAL_UART_RxCpltCallback+0xd8>)
 8001b02:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
			dev_WirelessComApp.Variable.PAY_dataRHRH[1] = UsbTTL2EmbeddedGS[4];
 8001b06:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b08:	791a      	ldrb	r2, [r3, #4]
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <HAL_UART_RxCpltCallback+0xd8>)
 8001b0c:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
			dev_WirelessComApp.Variable.PAY_dataRHRH[2] = UsbTTL2EmbeddedGS[5];
 8001b10:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b12:	795a      	ldrb	r2, [r3, #5]
 8001b14:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <HAL_UART_RxCpltCallback+0xd8>)
 8001b16:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
			dev_WirelessComApp.Variable.PAY_dataRHRH[3] = UsbTTL2EmbeddedGS[6];
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b1c:	799a      	ldrb	r2, [r3, #6]
 8001b1e:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_UART_RxCpltCallback+0xd8>)
 8001b20:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
 8001b24:	e00f      	b.n	8001b46 <HAL_UART_RxCpltCallback+0xa6>
		}
		else
		{
			dev_WirelessComApp.Variable.PAY_dataRHRH[0] = '?';
 8001b26:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <HAL_UART_RxCpltCallback+0xd8>)
 8001b28:	223f      	movs	r2, #63	@ 0x3f
 8001b2a:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
			dev_WirelessComApp.Variable.PAY_dataRHRH[1] = '?';
 8001b2e:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_UART_RxCpltCallback+0xd8>)
 8001b30:	223f      	movs	r2, #63	@ 0x3f
 8001b32:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
			dev_WirelessComApp.Variable.PAY_dataRHRH[2] = '?';
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_UART_RxCpltCallback+0xd8>)
 8001b38:	223f      	movs	r2, #63	@ 0x3f
 8001b3a:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
			dev_WirelessComApp.Variable.PAY_dataRHRH[3] = '?';
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_UART_RxCpltCallback+0xd8>)
 8001b40:	223f      	movs	r2, #63	@ 0x3f
 8001b42:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
		}



		/*! Ground Station PC send a separation command*/
		if(UsbTTL2EmbeddedGS[6] !='+')
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b48:	799b      	ldrb	r3, [r3, #6]
 8001b4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8001b4c:	d004      	beq.n	8001b58 <HAL_UART_RxCpltCallback+0xb8>
		{
			dev_WirelessComApp.Variable.PAY_SeparationCommand = '+';
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <HAL_UART_RxCpltCallback+0xd8>)
 8001b50:	222b      	movs	r2, #43	@ 0x2b
 8001b52:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
 8001b56:	e003      	b.n	8001b60 <HAL_UART_RxCpltCallback+0xc0>
		}
		else
		{
			dev_WirelessComApp.Variable.PAY_SeparationCommand = '-';
 8001b58:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <HAL_UART_RxCpltCallback+0xd8>)
 8001b5a:	222d      	movs	r2, #45	@ 0x2d
 8001b5c:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
		}



		HAL_UART_Receive_IT(&huart1, UsbTTL2EmbeddedGS, sizeof(UsbTTL2EmbeddedGS));
 8001b60:	2209      	movs	r2, #9
 8001b62:	4907      	ldr	r1, [pc, #28]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b64:	4808      	ldr	r0, [pc, #32]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001b66:	f003 f802 	bl	8004b6e <HAL_UART_Receive_IT>
	}


}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40004400 	.word	0x40004400
 8001b78:	20000394 	.word	0x20000394
 8001b7c:	40011000 	.word	0x40011000
 8001b80:	200004b4 	.word	0x200004b4
 8001b84:	200003d0 	.word	0x200003d0
 8001b88:	2000025c 	.word	0x2000025c

08001b8c <SubSys_WirelessCom_Config_WORK_MODE>:
	}

}


void SubSys_WirelessCom_Config_WORK_MODE(SubSys_WirelesscomConfig_HandleTypeDef    *dev){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

	switch(dev->Mode_SW){
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7ddb      	ldrb	r3, [r3, #23]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d84f      	bhi.n	8001c3c <SubSys_WirelessCom_Config_WORK_MODE+0xb0>
 8001b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba4 <SubSys_WirelessCom_Config_WORK_MODE+0x18>)
 8001b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba2:	bf00      	nop
 8001ba4:	08001bb5 	.word	0x08001bb5
 8001ba8:	08001bd7 	.word	0x08001bd7
 8001bac:	08001bf9 	.word	0x08001bf9
 8001bb0:	08001c1b 	.word	0x08001c1b

		case NormalMode :	/*! UART and wireless channel are open, transparent transmission is on*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6858      	ldr	r0, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	8b5b      	ldrh	r3, [r3, #26]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f000 ffd0 	bl	8002b64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6858      	ldr	r0, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	8b1b      	ldrh	r3, [r3, #24]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f000 ffc8 	bl	8002b64 <HAL_GPIO_WritePin>
		break;
 8001bd4:	e032      	b.n	8001c3c <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORsending :	/*! WOR Transmitter (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6858      	ldr	r0, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	8b5b      	ldrh	r3, [r3, #26]
 8001bde:	2200      	movs	r2, #0
 8001be0:	4619      	mov	r1, r3
 8001be2:	f000 ffbf 	bl	8002b64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6858      	ldr	r0, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	8b1b      	ldrh	r3, [r3, #24]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f000 ffb7 	bl	8002b64 <HAL_GPIO_WritePin>
		break;
 8001bf6:	e021      	b.n	8001c3c <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORreceiving :	/*! WOR Receiver (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6858      	ldr	r0, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	8b5b      	ldrh	r3, [r3, #26]
 8001c00:	2201      	movs	r2, #1
 8001c02:	4619      	mov	r1, r3
 8001c04:	f000 ffae 	bl	8002b64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6858      	ldr	r0, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	8b1b      	ldrh	r3, [r3, #24]
 8001c10:	2200      	movs	r2, #0
 8001c12:	4619      	mov	r1, r3
 8001c14:	f000 ffa6 	bl	8002b64 <HAL_GPIO_WritePin>
		break;
 8001c18:	e010      	b.n	8001c3c <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case DeepSleep :	/*! Module goes to sleep so provides you to configure settings*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6858      	ldr	r0, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	8b5b      	ldrh	r3, [r3, #26]
 8001c22:	2201      	movs	r2, #1
 8001c24:	4619      	mov	r1, r3
 8001c26:	f000 ff9d 	bl	8002b64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6858      	ldr	r0, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	8b1b      	ldrh	r3, [r3, #24]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4619      	mov	r1, r3
 8001c36:	f000 ff95 	bl	8002b64 <HAL_GPIO_WritePin>
		break;
 8001c3a:	bf00      	nop

	}

}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <SubSys_WirelessCom_Telemetry_Receive_From_To>:
				dev_WirelessComApp->Variable.PAY_IOT_Temperature = MS5611_Temp;



}
void SubSys_WirelessCom_Telemetry_Receive_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	603a      	str	r2, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
 8001c50:	460b      	mov	r3, r1
 8001c52:	71bb      	strb	r3, [r7, #6]

	/**
	 *  "The Buffer.Rx will be filled with the payload's telemetry packet.
	 *   The payload must send a 200-byte telemetry packet for the IT function to work properly.
	 */
	HAL_UART_Receive_IT(dev_WirelessComApp->huartX, (uint8_t *)dev_WirelessComApp->Buffer.Rx, sizeof(dev_WirelessComApp->Buffer.Rx));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	333c      	adds	r3, #60	@ 0x3c
 8001c5e:	22c8      	movs	r2, #200	@ 0xc8
 8001c60:	4619      	mov	r1, r3
 8001c62:	f002 ff84 	bl	8004b6e <HAL_UART_Receive_IT>

}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c74:	f000 fbb8 	bl	80023e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c78:	f000 f84c 	bl	8001d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c7c:	f000 f92a 	bl	8001ed4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c80:	f000 f8a6 	bl	8001dd0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001c84:	f000 f8fc 	bl	8001e80 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001c88:	f000 f8d0 	bl	8001e2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /******>>> SENSOR TPGVH INITIALIZATION BEGIN >>>******/
  	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_TPGVH_H
  	MS5611.I2C_ADDRESS = MS5611_I2C_ADDRESS_H;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <main+0x84>)
 8001c8e:	22ee      	movs	r2, #238	@ 0xee
 8001c90:	809a      	strh	r2, [r3, #4]
  	MS5611.i2c = &hi2c1;
 8001c92:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <main+0x84>)
 8001c94:	4a18      	ldr	r2, [pc, #96]	@ (8001cf8 <main+0x88>)
 8001c96:	601a      	str	r2, [r3, #0]
  	MS5611.Ref_Alt_Sel = 'm';
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <main+0x84>)
 8001c9a:	226d      	movs	r2, #109	@ 0x6d
 8001c9c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  	MS5611_Init(&MS5611);
 8001ca0:	4814      	ldr	r0, [pc, #80]	@ (8001cf4 <main+0x84>)
 8001ca2:	f7ff f951 	bl	8000f48 <MS5611_Init>
  	 SubSys_WirelessCom_Config_Init(&dev_WirelessComConfig);
  	 #endif

  	 #ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_WIRELESSCOMMUNICATION_TELEMETRY_H
  	 /*! Will be filled for your dev that use now*/
  	 dev_WirelessComApp.huartX = &huart2;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <main+0x8c>)
 8001ca8:	4a15      	ldr	r2, [pc, #84]	@ (8001d00 <main+0x90>)
 8001caa:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  	 dev_WirelessComConfig.Mode_SW = NormalMode; 		/*! UART and wireless channel are open, transparent transmission is on*/
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <main+0x94>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	75da      	strb	r2, [r3, #23]
  	 SubSys_WirelessCom_Config_WORK_MODE(&dev_WirelessComConfig);
 8001cb4:	4813      	ldr	r0, [pc, #76]	@ (8001d04 <main+0x94>)
 8001cb6:	f7ff ff69 	bl	8001b8c <SubSys_WirelessCom_Config_WORK_MODE>

  	 /*! Will be filled for the Payload of the Satellite(Target) Device */
  	 dev_WirelessComApp.Target_ADDH = 0x14;
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <main+0x8c>)
 8001cbc:	2214      	movs	r2, #20
 8001cbe:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
  	 dev_WirelessComApp.Target_ADDL = 0x53;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <main+0x8c>)
 8001cc4:	2253      	movs	r2, #83	@ 0x53
 8001cc6:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
  	 dev_WirelessComApp.Target_Ch   = 0x05;
 8001cca:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <main+0x8c>)
 8001ccc:	2205      	movs	r2, #5
 8001cce:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e

  	  /*! Interrupt is active for receiving wireless data
  	   * You need to cast variable type from char to uint8_t because of the instruction of Uart Receive function*/
  	  HAL_UART_Receive_IT(dev_WirelessComApp.huartX, (uint8_t *)dev_WirelessComApp.Buffer.Rx, sizeof(dev_WirelessComApp.Buffer.Rx));
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <main+0x8c>)
 8001cd4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001cd8:	22c8      	movs	r2, #200	@ 0xc8
 8001cda:	490b      	ldr	r1, [pc, #44]	@ (8001d08 <main+0x98>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f002 ff46 	bl	8004b6e <HAL_UART_Receive_IT>
  	  #endif
    /******<<< WIRELESS COMMUNICATION SETTING & TELEMETRY INITIALIZATION END <<<******/

	/******>>> USB-TTL INITIALIZATION BEGIN >>>******/
	 HAL_UART_Receive_IT(&huart1, UsbTTL2EmbeddedGS, sizeof(UsbTTL2EmbeddedGS));
 8001ce2:	2209      	movs	r2, #9
 8001ce4:	4909      	ldr	r1, [pc, #36]	@ (8001d0c <main+0x9c>)
 8001ce6:	480a      	ldr	r0, [pc, #40]	@ (8001d10 <main+0xa0>)
 8001ce8:	f002 ff41 	bl	8004b6e <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  MS5611_ReadRaw_Press_Temp(&MS5611);
 8001cec:	4801      	ldr	r0, [pc, #4]	@ (8001cf4 <main+0x84>)
 8001cee:	f7ff fadb 	bl	80012a8 <MS5611_ReadRaw_Press_Temp>
 8001cf2:	e7fb      	b.n	8001cec <main+0x7c>
 8001cf4:	200002ec 	.word	0x200002ec
 8001cf8:	20000208 	.word	0x20000208
 8001cfc:	20000394 	.word	0x20000394
 8001d00:	200002a4 	.word	0x200002a4
 8001d04:	20000370 	.word	0x20000370
 8001d08:	200003d0 	.word	0x200003d0
 8001d0c:	200004b4 	.word	0x200004b4
 8001d10:	2000025c 	.word	0x2000025c

08001d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b094      	sub	sp, #80	@ 0x50
 8001d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1a:	f107 0320 	add.w	r3, r7, #32
 8001d1e:	2230      	movs	r2, #48	@ 0x30
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f004 fbfb 	bl	800651e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	4b22      	ldr	r3, [pc, #136]	@ (8001dc8 <SystemClock_Config+0xb4>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	4a21      	ldr	r2, [pc, #132]	@ (8001dc8 <SystemClock_Config+0xb4>)
 8001d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d48:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <SystemClock_Config+0xb4>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d54:	2300      	movs	r3, #0
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	4b1c      	ldr	r3, [pc, #112]	@ (8001dcc <SystemClock_Config+0xb8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dcc <SystemClock_Config+0xb8>)
 8001d5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <SystemClock_Config+0xb8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d70:	2302      	movs	r3, #2
 8001d72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d74:	2301      	movs	r3, #1
 8001d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d78:	2310      	movs	r3, #16
 8001d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d80:	f107 0320 	add.w	r3, r7, #32
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 f9bf 	bl	8004108 <HAL_RCC_OscConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001d90:	f000 f8e2 	bl	8001f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d94:	230f      	movs	r3, #15
 8001d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fc22 	bl	80045f8 <HAL_RCC_ClockConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001dba:	f000 f8cd 	bl	8001f58 <Error_Handler>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3750      	adds	r7, #80	@ 0x50
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40007000 	.word	0x40007000

08001dd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <MX_I2C1_Init+0x50>)
 8001dd6:	4a13      	ldr	r2, [pc, #76]	@ (8001e24 <MX_I2C1_Init+0x54>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dda:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <MX_I2C1_Init+0x50>)
 8001ddc:	4a12      	ldr	r2, [pc, #72]	@ (8001e28 <MX_I2C1_Init+0x58>)
 8001dde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <MX_I2C1_Init+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <MX_I2C1_Init+0x50>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <MX_I2C1_Init+0x50>)
 8001dee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001df2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <MX_I2C1_Init+0x50>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <MX_I2C1_Init+0x50>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e00:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <MX_I2C1_Init+0x50>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <MX_I2C1_Init+0x50>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e0c:	4804      	ldr	r0, [pc, #16]	@ (8001e20 <MX_I2C1_Init+0x50>)
 8001e0e:	f000 fec3 	bl	8002b98 <HAL_I2C_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e18:	f000 f89e 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000208 	.word	0x20000208
 8001e24:	40005400 	.word	0x40005400
 8001e28:	000186a0 	.word	0x000186a0

08001e2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	@ (8001e7c <MX_USART1_UART_Init+0x50>)
 8001e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e36:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e52:	220c      	movs	r2, #12
 8001e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e56:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	@ (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e64:	f002 fda8 	bl	80049b8 <HAL_UART_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e6e:	f000 f873 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000025c 	.word	0x2000025c
 8001e7c:	40011000 	.word	0x40011000

08001e80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <MX_USART2_UART_Init+0x4c>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	@ (8001ed0 <MX_USART2_UART_Init+0x50>)
 8001e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <MX_USART2_UART_Init+0x4c>)
 8001e8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <MX_USART2_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <MX_USART2_UART_Init+0x4c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <MX_USART2_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <MX_USART2_UART_Init+0x4c>)
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <MX_USART2_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <MX_USART2_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <MX_USART2_UART_Init+0x4c>)
 8001eb8:	f002 fd7e 	bl	80049b8 <HAL_UART_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ec2:	f000 f849 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200002a4 	.word	0x200002a4
 8001ed0:	40004400 	.word	0x40004400

08001ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <MX_GPIO_Init+0x7c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a17      	ldr	r2, [pc, #92]	@ (8001f50 <MX_GPIO_Init+0x7c>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <MX_GPIO_Init+0x7c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <MX_GPIO_Init+0x7c>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a10      	ldr	r2, [pc, #64]	@ (8001f50 <MX_GPIO_Init+0x7c>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <MX_GPIO_Init+0x7c>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2120      	movs	r1, #32
 8001f26:	480b      	ldr	r0, [pc, #44]	@ (8001f54 <MX_GPIO_Init+0x80>)
 8001f28:	f000 fe1c 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f30:	2301      	movs	r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	4619      	mov	r1, r3
 8001f42:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <MX_GPIO_Init+0x80>)
 8001f44:	f000 fc8a 	bl	800285c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f48:	bf00      	nop
 8001f4a:	3720      	adds	r7, #32
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020400 	.word	0x40020400

08001f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f5c:	b672      	cpsid	i
}
 8001f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <Error_Handler+0x8>

08001f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <HAL_MspInit+0x4c>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb0 <HAL_MspInit+0x4c>)
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <HAL_MspInit+0x4c>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <HAL_MspInit+0x4c>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	@ (8002038 <HAL_I2C_MspInit+0x84>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d12b      	bne.n	800202e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	4b18      	ldr	r3, [pc, #96]	@ (800203c <HAL_I2C_MspInit+0x88>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a17      	ldr	r2, [pc, #92]	@ (800203c <HAL_I2C_MspInit+0x88>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b15      	ldr	r3, [pc, #84]	@ (800203c <HAL_I2C_MspInit+0x88>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ff2:	23c0      	movs	r3, #192	@ 0xc0
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff6:	2312      	movs	r3, #18
 8001ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002002:	2304      	movs	r3, #4
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	480c      	ldr	r0, [pc, #48]	@ (8002040 <HAL_I2C_MspInit+0x8c>)
 800200e:	f000 fc25 	bl	800285c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <HAL_I2C_MspInit+0x88>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a08      	ldr	r2, [pc, #32]	@ (800203c <HAL_I2C_MspInit+0x88>)
 800201c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_I2C_MspInit+0x88>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	@ 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40005400 	.word	0x40005400
 800203c:	40023800 	.word	0x40023800
 8002040:	40020400 	.word	0x40020400

08002044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	@ 0x30
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a3a      	ldr	r2, [pc, #232]	@ (800214c <HAL_UART_MspInit+0x108>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d135      	bne.n	80020d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	4b39      	ldr	r3, [pc, #228]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	4a38      	ldr	r2, [pc, #224]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 8002070:	f043 0310 	orr.w	r3, r3, #16
 8002074:	6453      	str	r3, [r2, #68]	@ 0x44
 8002076:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4a31      	ldr	r2, [pc, #196]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
 8002092:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800209e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020b0:	2307      	movs	r3, #7
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	4619      	mov	r1, r3
 80020ba:	4826      	ldr	r0, [pc, #152]	@ (8002154 <HAL_UART_MspInit+0x110>)
 80020bc:	f000 fbce 	bl	800285c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	2025      	movs	r0, #37	@ 0x25
 80020c6:	f000 fb00 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020ca:	2025      	movs	r0, #37	@ 0x25
 80020cc:	f000 fb19 	bl	8002702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020d0:	e038      	b.n	8002144 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a20      	ldr	r2, [pc, #128]	@ (8002158 <HAL_UART_MspInit+0x114>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d133      	bne.n	8002144 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 80020e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	4b14      	ldr	r3, [pc, #80]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	4a13      	ldr	r2, [pc, #76]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6313      	str	r3, [r2, #48]	@ 0x30
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_UART_MspInit+0x10c>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002114:	230c      	movs	r3, #12
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002124:	2307      	movs	r3, #7
 8002126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	4809      	ldr	r0, [pc, #36]	@ (8002154 <HAL_UART_MspInit+0x110>)
 8002130:	f000 fb94 	bl	800285c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	2026      	movs	r0, #38	@ 0x26
 800213a:	f000 fac6 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800213e:	2026      	movs	r0, #38	@ 0x26
 8002140:	f000 fadf 	bl	8002702 <HAL_NVIC_EnableIRQ>
}
 8002144:	bf00      	nop
 8002146:	3730      	adds	r7, #48	@ 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40011000 	.word	0x40011000
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000
 8002158:	40004400 	.word	0x40004400

0800215c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <NMI_Handler+0x4>

08002164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <HardFault_Handler+0x4>

0800216c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <MemManage_Handler+0x4>

08002174 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <BusFault_Handler+0x4>

0800217c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <UsageFault_Handler+0x4>

08002184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b2:	f000 f96b 	bl	800248c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021c0:	4802      	ldr	r0, [pc, #8]	@ (80021cc <USART1_IRQHandler+0x10>)
 80021c2:	f002 fcf9 	bl	8004bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000025c 	.word	0x2000025c

080021d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021d4:	4802      	ldr	r0, [pc, #8]	@ (80021e0 <USART2_IRQHandler+0x10>)
 80021d6:	f002 fcef 	bl	8004bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200002a4 	.word	0x200002a4

080021e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return 1;
 80021e8:	2301      	movs	r3, #1
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_kill>:

int _kill(int pid, int sig)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021fe:	f004 f9e1 	bl	80065c4 <__errno>
 8002202:	4603      	mov	r3, r0
 8002204:	2216      	movs	r2, #22
 8002206:	601a      	str	r2, [r3, #0]
  return -1;
 8002208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_exit>:

void _exit (int status)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ffe7 	bl	80021f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002226:	bf00      	nop
 8002228:	e7fd      	b.n	8002226 <_exit+0x12>

0800222a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	e00a      	b.n	8002252 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800223c:	f3af 8000 	nop.w
 8002240:	4601      	mov	r1, r0
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	60ba      	str	r2, [r7, #8]
 8002248:	b2ca      	uxtb	r2, r1
 800224a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3301      	adds	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	dbf0      	blt.n	800223c <_read+0x12>
  }

  return len;
 800225a:	687b      	ldr	r3, [r7, #4]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e009      	b.n	800228a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	60ba      	str	r2, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	dbf1      	blt.n	8002276 <_write+0x12>
  }
  return len;
 8002292:	687b      	ldr	r3, [r7, #4]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <_close>:

int _close(int file)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022c4:	605a      	str	r2, [r3, #4]
  return 0;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_isatty>:

int _isatty(int file)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022dc:	2301      	movs	r3, #1
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b085      	sub	sp, #20
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800230c:	4a14      	ldr	r2, [pc, #80]	@ (8002360 <_sbrk+0x5c>)
 800230e:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <_sbrk+0x60>)
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002318:	4b13      	ldr	r3, [pc, #76]	@ (8002368 <_sbrk+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002320:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <_sbrk+0x64>)
 8002322:	4a12      	ldr	r2, [pc, #72]	@ (800236c <_sbrk+0x68>)
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002326:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <_sbrk+0x64>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	429a      	cmp	r2, r3
 8002332:	d207      	bcs.n	8002344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002334:	f004 f946 	bl	80065c4 <__errno>
 8002338:	4603      	mov	r3, r0
 800233a:	220c      	movs	r2, #12
 800233c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
 8002342:	e009      	b.n	8002358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002344:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234a:	4b07      	ldr	r3, [pc, #28]	@ (8002368 <_sbrk+0x64>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	4a05      	ldr	r2, [pc, #20]	@ (8002368 <_sbrk+0x64>)
 8002354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002356:	68fb      	ldr	r3, [r7, #12]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20020000 	.word	0x20020000
 8002364:	00000400 	.word	0x00000400
 8002368:	200004c0 	.word	0x200004c0
 800236c:	20000618 	.word	0x20000618

08002370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <SystemInit+0x20>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237a:	4a05      	ldr	r2, [pc, #20]	@ (8002390 <SystemInit+0x20>)
 800237c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002394:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002398:	f7ff ffea 	bl	8002370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800239c:	480c      	ldr	r0, [pc, #48]	@ (80023d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800239e:	490d      	ldr	r1, [pc, #52]	@ (80023d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a0:	4a0d      	ldr	r2, [pc, #52]	@ (80023d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a4:	e002      	b.n	80023ac <LoopCopyDataInit>

080023a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023aa:	3304      	adds	r3, #4

080023ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b0:	d3f9      	bcc.n	80023a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b2:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023b4:	4c0a      	ldr	r4, [pc, #40]	@ (80023e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b8:	e001      	b.n	80023be <LoopFillZerobss>

080023ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023bc:	3204      	adds	r2, #4

080023be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c0:	d3fb      	bcc.n	80023ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023c2:	f004 f905 	bl	80065d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c6:	f7ff fc53 	bl	8001c70 <main>
  bx  lr    
 80023ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80023d8:	08009610 	.word	0x08009610
  ldr r2, =_sbss
 80023dc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80023e0:	20000614 	.word	0x20000614

080023e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC_IRQHandler>
	...

080023e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002428 <HAL_Init+0x40>)
 80023f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_Init+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <HAL_Init+0x40>)
 80023fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002404:	4b08      	ldr	r3, [pc, #32]	@ (8002428 <HAL_Init+0x40>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a07      	ldr	r2, [pc, #28]	@ (8002428 <HAL_Init+0x40>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002410:	2003      	movs	r0, #3
 8002412:	f000 f94f 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002416:	200f      	movs	r0, #15
 8002418:	f000 f808 	bl	800242c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800241c:	f7ff fda2 	bl	8001f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023c00 	.word	0x40023c00

0800242c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002434:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <HAL_InitTick+0x54>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <HAL_InitTick+0x58>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002442:	fbb3 f3f1 	udiv	r3, r3, r1
 8002446:	fbb2 f3f3 	udiv	r3, r2, r3
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f967 	bl	800271e <HAL_SYSTICK_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e00e      	b.n	8002478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b0f      	cmp	r3, #15
 800245e:	d80a      	bhi.n	8002476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002460:	2200      	movs	r2, #0
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	f000 f92f 	bl	80026ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800246c:	4a06      	ldr	r2, [pc, #24]	@ (8002488 <HAL_InitTick+0x5c>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000004 	.word	0x20000004
 8002484:	2000000c 	.word	0x2000000c
 8002488:	20000008 	.word	0x20000008

0800248c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002490:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_IncTick+0x20>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <HAL_IncTick+0x24>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4413      	add	r3, r2
 800249c:	4a04      	ldr	r2, [pc, #16]	@ (80024b0 <HAL_IncTick+0x24>)
 800249e:	6013      	str	r3, [r2, #0]
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	2000000c 	.word	0x2000000c
 80024b0:	200004c4 	.word	0x200004c4

080024b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return uwTick;
 80024b8:	4b03      	ldr	r3, [pc, #12]	@ (80024c8 <HAL_GetTick+0x14>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	200004c4 	.word	0x200004c4

080024cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff ffee 	bl	80024b4 <HAL_GetTick>
 80024d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d005      	beq.n	80024f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <HAL_Delay+0x44>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4413      	add	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024f2:	bf00      	nop
 80024f4:	f7ff ffde 	bl	80024b4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d8f7      	bhi.n	80024f4 <HAL_Delay+0x28>
  {
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000000c 	.word	0x2000000c

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800253c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4907      	ldr	r1, [pc, #28]	@ (80025b0 <__NVIC_EnableIRQ+0x38>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	@ (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	@ (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	@ 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	@ 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002680:	d301      	bcc.n	8002686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002686:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <SysTick_Config+0x40>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268e:	210f      	movs	r1, #15
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	f7ff ff8e 	bl	80025b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <SysTick_Config+0x40>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269e:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <SysTick_Config+0x40>)
 80026a0:	2207      	movs	r2, #7
 80026a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff29 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026dc:	f7ff ff3e 	bl	800255c <__NVIC_GetPriorityGrouping>
 80026e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	f7ff ff8e 	bl	8002608 <NVIC_EncodePriority>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff5d 	bl	80025b4 <__NVIC_SetPriority>
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff31 	bl	8002578 <__NVIC_EnableIRQ>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ffa2 	bl	8002670 <SysTick_Config>
 800272c:	4603      	mov	r3, r0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff feb6 	bl	80024b4 <HAL_GetTick>
 8002748:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d008      	beq.n	8002768 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2280      	movs	r2, #128	@ 0x80
 800275a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e052      	b.n	800280e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0216 	bic.w	r2, r2, #22
 8002776:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002786:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d103      	bne.n	8002798 <HAL_DMA_Abort+0x62>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0208 	bic.w	r2, r2, #8
 80027a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b8:	e013      	b.n	80027e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ba:	f7ff fe7b 	bl	80024b4 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d90c      	bls.n	80027e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2203      	movs	r2, #3
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e015      	b.n	800280e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e4      	bne.n	80027ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f4:	223f      	movs	r2, #63	@ 0x3f
 80027f6:	409a      	lsls	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d004      	beq.n	8002834 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2280      	movs	r2, #128	@ 0x80
 800282e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e00c      	b.n	800284e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2205      	movs	r2, #5
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	@ 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	e159      	b.n	8002b2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	429a      	cmp	r2, r3
 8002892:	f040 8148 	bne.w	8002b26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d005      	beq.n	80028ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d130      	bne.n	8002910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e4:	2201      	movs	r2, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 0201 	and.w	r2, r3, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b03      	cmp	r3, #3
 800291a:	d017      	beq.n	800294c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d123      	bne.n	80029a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	08da      	lsrs	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3208      	adds	r2, #8
 8002960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	220f      	movs	r2, #15
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	69b9      	ldr	r1, [r7, #24]
 800299c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80a2 	beq.w	8002b26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b57      	ldr	r3, [pc, #348]	@ (8002b44 <HAL_GPIO_Init+0x2e8>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	4a56      	ldr	r2, [pc, #344]	@ (8002b44 <HAL_GPIO_Init+0x2e8>)
 80029ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029f2:	4b54      	ldr	r3, [pc, #336]	@ (8002b44 <HAL_GPIO_Init+0x2e8>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029fe:	4a52      	ldr	r2, [pc, #328]	@ (8002b48 <HAL_GPIO_Init+0x2ec>)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3302      	adds	r3, #2
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	220f      	movs	r2, #15
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a49      	ldr	r2, [pc, #292]	@ (8002b4c <HAL_GPIO_Init+0x2f0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d019      	beq.n	8002a5e <HAL_GPIO_Init+0x202>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a48      	ldr	r2, [pc, #288]	@ (8002b50 <HAL_GPIO_Init+0x2f4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0x1fe>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a47      	ldr	r2, [pc, #284]	@ (8002b54 <HAL_GPIO_Init+0x2f8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00d      	beq.n	8002a56 <HAL_GPIO_Init+0x1fa>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a46      	ldr	r2, [pc, #280]	@ (8002b58 <HAL_GPIO_Init+0x2fc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <HAL_GPIO_Init+0x1f6>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a45      	ldr	r2, [pc, #276]	@ (8002b5c <HAL_GPIO_Init+0x300>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_GPIO_Init+0x1f2>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	e008      	b.n	8002a60 <HAL_GPIO_Init+0x204>
 8002a4e:	2307      	movs	r3, #7
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x204>
 8002a52:	2303      	movs	r3, #3
 8002a54:	e004      	b.n	8002a60 <HAL_GPIO_Init+0x204>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e002      	b.n	8002a60 <HAL_GPIO_Init+0x204>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_GPIO_Init+0x204>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	f002 0203 	and.w	r2, r2, #3
 8002a66:	0092      	lsls	r2, r2, #2
 8002a68:	4093      	lsls	r3, r2
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a70:	4935      	ldr	r1, [pc, #212]	@ (8002b48 <HAL_GPIO_Init+0x2ec>)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3302      	adds	r3, #2
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7e:	4b38      	ldr	r3, [pc, #224]	@ (8002b60 <HAL_GPIO_Init+0x304>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa2:	4a2f      	ldr	r2, [pc, #188]	@ (8002b60 <HAL_GPIO_Init+0x304>)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b60 <HAL_GPIO_Init+0x304>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002acc:	4a24      	ldr	r2, [pc, #144]	@ (8002b60 <HAL_GPIO_Init+0x304>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad2:	4b23      	ldr	r3, [pc, #140]	@ (8002b60 <HAL_GPIO_Init+0x304>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b60 <HAL_GPIO_Init+0x304>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002afc:	4b18      	ldr	r3, [pc, #96]	@ (8002b60 <HAL_GPIO_Init+0x304>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b20:	4a0f      	ldr	r2, [pc, #60]	@ (8002b60 <HAL_GPIO_Init+0x304>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	61fb      	str	r3, [r7, #28]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b0f      	cmp	r3, #15
 8002b30:	f67f aea2 	bls.w	8002878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3724      	adds	r7, #36	@ 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	40020000 	.word	0x40020000
 8002b50:	40020400 	.word	0x40020400
 8002b54:	40020800 	.word	0x40020800
 8002b58:	40020c00 	.word	0x40020c00
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40013c00 	.word	0x40013c00

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e12b      	b.n	8002e02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff f9f8 	bl	8001fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	@ 0x24
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bfc:	f001 feb4 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8002c00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4a81      	ldr	r2, [pc, #516]	@ (8002e0c <HAL_I2C_Init+0x274>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d807      	bhi.n	8002c1c <HAL_I2C_Init+0x84>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a80      	ldr	r2, [pc, #512]	@ (8002e10 <HAL_I2C_Init+0x278>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e006      	b.n	8002c2a <HAL_I2C_Init+0x92>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e14 <HAL_I2C_Init+0x27c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bf94      	ite	ls
 8002c24:	2301      	movls	r3, #1
 8002c26:	2300      	movhi	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0e7      	b.n	8002e02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4a78      	ldr	r2, [pc, #480]	@ (8002e18 <HAL_I2C_Init+0x280>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0c9b      	lsrs	r3, r3, #18
 8002c3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a6a      	ldr	r2, [pc, #424]	@ (8002e0c <HAL_I2C_Init+0x274>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d802      	bhi.n	8002c6c <HAL_I2C_Init+0xd4>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	e009      	b.n	8002c80 <HAL_I2C_Init+0xe8>
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	4a69      	ldr	r2, [pc, #420]	@ (8002e1c <HAL_I2C_Init+0x284>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	3301      	adds	r3, #1
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	495c      	ldr	r1, [pc, #368]	@ (8002e0c <HAL_I2C_Init+0x274>)
 8002c9c:	428b      	cmp	r3, r1
 8002c9e:	d819      	bhi.n	8002cd4 <HAL_I2C_Init+0x13c>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e59      	subs	r1, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cae:	1c59      	adds	r1, r3, #1
 8002cb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002cb4:	400b      	ands	r3, r1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_I2C_Init+0x138>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1e59      	subs	r1, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cce:	e051      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	e04f      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d111      	bne.n	8002d00 <HAL_I2C_Init+0x168>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e58      	subs	r0, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	440b      	add	r3, r1
 8002cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e012      	b.n	8002d26 <HAL_I2C_Init+0x18e>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e58      	subs	r0, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	0099      	lsls	r1, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Init+0x196>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e022      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10e      	bne.n	8002d54 <HAL_I2C_Init+0x1bc>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1e58      	subs	r0, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	440b      	add	r3, r1
 8002d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d52:	e00f      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1e58      	subs	r0, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	0099      	lsls	r1, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	6809      	ldr	r1, [r1, #0]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002da2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6911      	ldr	r1, [r2, #16]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	4311      	orrs	r1, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	000186a0 	.word	0x000186a0
 8002e10:	001e847f 	.word	0x001e847f
 8002e14:	003d08ff 	.word	0x003d08ff
 8002e18:	431bde83 	.word	0x431bde83
 8002e1c:	10624dd3 	.word	0x10624dd3

08002e20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	817b      	strh	r3, [r7, #10]
 8002e30:	4613      	mov	r3, r2
 8002e32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e34:	f7ff fb3e 	bl	80024b4 <HAL_GetTick>
 8002e38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	f040 80e0 	bne.w	8003008 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	2319      	movs	r3, #25
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4970      	ldr	r1, [pc, #448]	@ (8003014 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 ff22 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e0d3      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_I2C_Master_Transmit+0x50>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e0cc      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d007      	beq.n	8002e96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2221      	movs	r2, #33	@ 0x21
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	893a      	ldrh	r2, [r7, #8]
 8002ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4a50      	ldr	r2, [pc, #320]	@ (8003018 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ed8:	8979      	ldrh	r1, [r7, #10]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	6a3a      	ldr	r2, [r7, #32]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fcf6 	bl	80038d0 <I2C_MasterRequestWrite>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e08d      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f04:	e066      	b.n	8002fd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6a39      	ldr	r1, [r7, #32]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 ffe0 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d107      	bne.n	8002f2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06b      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_I2C_Master_Transmit+0x188>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d017      	beq.n	8002fa8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	6a39      	ldr	r1, [r7, #32]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 ffd7 	bl	8003f60 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d107      	bne.n	8002fd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e01a      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d194      	bne.n	8002f06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	00100002 	.word	0x00100002
 8003018:	ffff0000 	.word	0xffff0000

0800301c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	@ 0x30
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	461a      	mov	r2, r3
 8003028:	460b      	mov	r3, r1
 800302a:	817b      	strh	r3, [r7, #10]
 800302c:	4613      	mov	r3, r2
 800302e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003030:	f7ff fa40 	bl	80024b4 <HAL_GetTick>
 8003034:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b20      	cmp	r3, #32
 8003040:	f040 8217 	bne.w	8003472 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2319      	movs	r3, #25
 800304a:	2201      	movs	r2, #1
 800304c:	497c      	ldr	r1, [pc, #496]	@ (8003240 <HAL_I2C_Master_Receive+0x224>)
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fe24 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800305a:	2302      	movs	r3, #2
 800305c:	e20a      	b.n	8003474 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_I2C_Master_Receive+0x50>
 8003068:	2302      	movs	r3, #2
 800306a:	e203      	b.n	8003474 <HAL_I2C_Master_Receive+0x458>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d007      	beq.n	8003092 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2222      	movs	r2, #34	@ 0x22
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2210      	movs	r2, #16
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	893a      	ldrh	r2, [r7, #8]
 80030c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003244 <HAL_I2C_Master_Receive+0x228>)
 80030d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030d4:	8979      	ldrh	r1, [r7, #10]
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fc7a 	bl	80039d4 <I2C_MasterRequestRead>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e1c4      	b.n	8003474 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d113      	bne.n	800311a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	623b      	str	r3, [r7, #32]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	623b      	str	r3, [r7, #32]
 8003106:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e198      	b.n	800344c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311e:	2b01      	cmp	r3, #1
 8003120:	d11b      	bne.n	800315a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e178      	b.n	800344c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315e:	2b02      	cmp	r3, #2
 8003160:	d11b      	bne.n	800319a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003170:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	e158      	b.n	800344c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031c0:	e144      	b.n	800344c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	f200 80f1 	bhi.w	80033ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d123      	bne.n	800321c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 ff09 	bl	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e145      	b.n	8003474 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800321a:	e117      	b.n	800344c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	2b02      	cmp	r3, #2
 8003222:	d14e      	bne.n	80032c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322a:	2200      	movs	r2, #0
 800322c:	4906      	ldr	r1, [pc, #24]	@ (8003248 <HAL_I2C_Master_Receive+0x22c>)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fd34 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e11a      	b.n	8003474 <HAL_I2C_Master_Receive+0x458>
 800323e:	bf00      	nop
 8003240:	00100002 	.word	0x00100002
 8003244:	ffff0000 	.word	0xffff0000
 8003248:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032c0:	e0c4      	b.n	800344c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c8:	2200      	movs	r2, #0
 80032ca:	496c      	ldr	r1, [pc, #432]	@ (800347c <HAL_I2C_Master_Receive+0x460>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fce5 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0cb      	b.n	8003474 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003324:	2200      	movs	r2, #0
 8003326:	4955      	ldr	r1, [pc, #340]	@ (800347c <HAL_I2C_Master_Receive+0x460>)
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fcb7 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e09d      	b.n	8003474 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033ac:	e04e      	b.n	800344c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fe1c 	bl	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e058      	b.n	8003474 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d124      	bne.n	800344c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003406:	2b03      	cmp	r3, #3
 8003408:	d107      	bne.n	800341a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003418:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	f47f aeb6 	bne.w	80031c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e000      	b.n	8003474 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003472:	2302      	movs	r3, #2
  }
}
 8003474:	4618      	mov	r0, r3
 8003476:	3728      	adds	r7, #40	@ 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	00010004 	.word	0x00010004

08003480 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	4608      	mov	r0, r1
 800348a:	4611      	mov	r1, r2
 800348c:	461a      	mov	r2, r3
 800348e:	4603      	mov	r3, r0
 8003490:	817b      	strh	r3, [r7, #10]
 8003492:	460b      	mov	r3, r1
 8003494:	813b      	strh	r3, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800349a:	f7ff f80b 	bl	80024b4 <HAL_GetTick>
 800349e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	f040 80d9 	bne.w	8003660 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	2319      	movs	r3, #25
 80034b4:	2201      	movs	r2, #1
 80034b6:	496d      	ldr	r1, [pc, #436]	@ (800366c <HAL_I2C_Mem_Write+0x1ec>)
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 fbef 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
 80034c6:	e0cc      	b.n	8003662 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_I2C_Mem_Write+0x56>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e0c5      	b.n	8003662 <HAL_I2C_Mem_Write+0x1e2>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d007      	beq.n	80034fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800350a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2221      	movs	r2, #33	@ 0x21
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2240      	movs	r2, #64	@ 0x40
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a3a      	ldr	r2, [r7, #32]
 8003526:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800352c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a4d      	ldr	r2, [pc, #308]	@ (8003670 <HAL_I2C_Mem_Write+0x1f0>)
 800353c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800353e:	88f8      	ldrh	r0, [r7, #6]
 8003540:	893a      	ldrh	r2, [r7, #8]
 8003542:	8979      	ldrh	r1, [r7, #10]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	4603      	mov	r3, r0
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fb0e 	bl	8003b70 <I2C_RequestMemoryWrite>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d052      	beq.n	8003600 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e081      	b.n	8003662 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fcb4 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	2b04      	cmp	r3, #4
 8003574:	d107      	bne.n	8003586 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e06b      	b.n	8003662 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d11b      	bne.n	8003600 <HAL_I2C_Mem_Write+0x180>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d017      	beq.n	8003600 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1aa      	bne.n	800355e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fca7 	bl	8003f60 <I2C_WaitOnBTFFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	2b04      	cmp	r3, #4
 800361e:	d107      	bne.n	8003630 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e016      	b.n	8003662 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	00100002 	.word	0x00100002
 8003670:	ffff0000 	.word	0xffff0000

08003674 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	@ 0x28
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	460b      	mov	r3, r1
 8003682:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7fe ff16 	bl	80024b4 <HAL_GetTick>
 8003688:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	f040 8111 	bne.w	80038be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2319      	movs	r3, #25
 80036a2:	2201      	movs	r2, #1
 80036a4:	4988      	ldr	r1, [pc, #544]	@ (80038c8 <HAL_I2C_IsDeviceReady+0x254>)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 faf8 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
 80036b4:	e104      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2C_IsDeviceReady+0x50>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e0fd      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d007      	beq.n	80036ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2224      	movs	r2, #36	@ 0x24
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a70      	ldr	r2, [pc, #448]	@ (80038cc <HAL_I2C_IsDeviceReady+0x258>)
 800370c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800371c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2200      	movs	r2, #0
 8003726:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fab6 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003744:	d103      	bne.n	800374e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800374c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e0b6      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003752:	897b      	ldrh	r3, [r7, #10]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003760:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003762:	f7fe fea7 	bl	80024b4 <HAL_GetTick>
 8003766:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003796:	e025      	b.n	80037e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003798:	f7fe fe8c 	bl	80024b4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d302      	bcc.n	80037ae <HAL_I2C_IsDeviceReady+0x13a>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	22a0      	movs	r2, #160	@ 0xa0
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80037ee:	d005      	beq.n	80037fc <HAL_I2C_IsDeviceReady+0x188>
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_I2C_IsDeviceReady+0x188>
 80037f6:	7dbb      	ldrb	r3, [r7, #22]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0cd      	beq.n	8003798 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	d129      	bne.n	8003866 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003820:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	2319      	movs	r3, #25
 800383e:	2201      	movs	r2, #1
 8003840:	4921      	ldr	r1, [pc, #132]	@ (80038c8 <HAL_I2C_IsDeviceReady+0x254>)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 fa2a 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e036      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e02c      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003874:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800387e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2319      	movs	r3, #25
 8003886:	2201      	movs	r2, #1
 8003888:	490f      	ldr	r1, [pc, #60]	@ (80038c8 <HAL_I2C_IsDeviceReady+0x254>)
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa06 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e012      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3301      	adds	r3, #1
 800389e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	f4ff af32 	bcc.w	800370e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80038be:	2302      	movs	r3, #2
  }
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	00100002 	.word	0x00100002
 80038cc:	ffff0000 	.word	0xffff0000

080038d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	460b      	mov	r3, r1
 80038de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d006      	beq.n	80038fa <I2C_MasterRequestWrite+0x2a>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d003      	beq.n	80038fa <I2C_MasterRequestWrite+0x2a>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038f8:	d108      	bne.n	800390c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e00b      	b.n	8003924 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	2b12      	cmp	r3, #18
 8003912:	d107      	bne.n	8003924 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003922:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f9b3 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00d      	beq.n	8003958 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800394a:	d103      	bne.n	8003954 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003952:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e035      	b.n	80039c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003960:	d108      	bne.n	8003974 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003962:	897b      	ldrh	r3, [r7, #10]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003970:	611a      	str	r2, [r3, #16]
 8003972:	e01b      	b.n	80039ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003974:	897b      	ldrh	r3, [r7, #10]
 8003976:	11db      	asrs	r3, r3, #7
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 0306 	and.w	r3, r3, #6
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f063 030f 	orn	r3, r3, #15
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	490e      	ldr	r1, [pc, #56]	@ (80039cc <I2C_MasterRequestWrite+0xfc>)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f9fc 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e010      	b.n	80039c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039a2:	897b      	ldrh	r3, [r7, #10]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4907      	ldr	r1, [pc, #28]	@ (80039d0 <I2C_MasterRequestWrite+0x100>)
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f9ec 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	00010008 	.word	0x00010008
 80039d0:	00010002 	.word	0x00010002

080039d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	460b      	mov	r3, r1
 80039e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d006      	beq.n	8003a0e <I2C_MasterRequestRead+0x3a>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d003      	beq.n	8003a0e <I2C_MasterRequestRead+0x3a>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a0c:	d108      	bne.n	8003a20 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e00b      	b.n	8003a38 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	2b11      	cmp	r3, #17
 8003a26:	d107      	bne.n	8003a38 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f929 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00d      	beq.n	8003a6c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a5e:	d103      	bne.n	8003a68 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e079      	b.n	8003b60 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a74:	d108      	bne.n	8003a88 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a76:	897b      	ldrh	r3, [r7, #10]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	611a      	str	r2, [r3, #16]
 8003a86:	e05f      	b.n	8003b48 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a88:	897b      	ldrh	r3, [r7, #10]
 8003a8a:	11db      	asrs	r3, r3, #7
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f003 0306 	and.w	r3, r3, #6
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f063 030f 	orn	r3, r3, #15
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4930      	ldr	r1, [pc, #192]	@ (8003b68 <I2C_MasterRequestRead+0x194>)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f972 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e054      	b.n	8003b60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4929      	ldr	r1, [pc, #164]	@ (8003b6c <I2C_MasterRequestRead+0x198>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f962 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e044      	b.n	8003b60 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003afa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f8c7 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b22:	d103      	bne.n	8003b2c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b2a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e017      	b.n	8003b60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b30:	897b      	ldrh	r3, [r7, #10]
 8003b32:	11db      	asrs	r3, r3, #7
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0306 	and.w	r3, r3, #6
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f063 030e 	orn	r3, r3, #14
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4907      	ldr	r1, [pc, #28]	@ (8003b6c <I2C_MasterRequestRead+0x198>)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f91e 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	00010008 	.word	0x00010008
 8003b6c:	00010002 	.word	0x00010002

08003b70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	817b      	strh	r3, [r7, #10]
 8003b82:	460b      	mov	r3, r1
 8003b84:	813b      	strh	r3, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f878 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bc0:	d103      	bne.n	8003bca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e05f      	b.n	8003c8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bce:	897b      	ldrh	r3, [r7, #10]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	6a3a      	ldr	r2, [r7, #32]
 8003be2:	492d      	ldr	r1, [pc, #180]	@ (8003c98 <I2C_RequestMemoryWrite+0x128>)
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f8d3 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e04c      	b.n	8003c8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c0c:	6a39      	ldr	r1, [r7, #32]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f95e 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00d      	beq.n	8003c36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d107      	bne.n	8003c32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e02b      	b.n	8003c8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	611a      	str	r2, [r3, #16]
 8003c46:	e021      	b.n	8003c8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c48:	893b      	ldrh	r3, [r7, #8]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c58:	6a39      	ldr	r1, [r7, #32]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f938 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d107      	bne.n	8003c7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e005      	b.n	8003c8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c82:	893b      	ldrh	r3, [r7, #8]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	00010002 	.word	0x00010002

08003c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cac:	e048      	b.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	d044      	beq.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7fe fbfd 	bl	80024b4 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d139      	bne.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d10d      	bne.n	8003cf2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	e00c      	b.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	43da      	mvns	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d116      	bne.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e023      	b.n	8003d88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d10d      	bne.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	43da      	mvns	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	e00c      	b.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d093      	beq.n	8003cae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d9e:	e071      	b.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dae:	d123      	bne.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	f043 0204 	orr.w	r2, r3, #4
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e067      	b.n	8003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	d041      	beq.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e00:	f7fe fb58 	bl	80024b4 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d302      	bcc.n	8003e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d136      	bne.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10c      	bne.n	8003e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf14      	ite	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	2300      	moveq	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	e00b      	b.n	8003e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	43da      	mvns	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e021      	b.n	8003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10c      	bne.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	43da      	mvns	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf14      	ite	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	2300      	moveq	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e00b      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf14      	ite	ne
 8003eba:	2301      	movne	r3, #1
 8003ebc:	2300      	moveq	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f47f af6d 	bne.w	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003edc:	e034      	b.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f8e3 	bl	80040aa <I2C_IsAcknowledgeFailed>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e034      	b.n	8003f58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d028      	beq.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef6:	f7fe fadd 	bl	80024b4 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11d      	bne.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f16:	2b80      	cmp	r3, #128	@ 0x80
 8003f18:	d016      	beq.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e007      	b.n	8003f58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b80      	cmp	r3, #128	@ 0x80
 8003f54:	d1c3      	bne.n	8003ede <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f6c:	e034      	b.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f89b 	bl	80040aa <I2C_IsAcknowledgeFailed>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e034      	b.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d028      	beq.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fe fa95 	bl	80024b4 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d11d      	bne.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d016      	beq.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e007      	b.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d1c3      	bne.n	8003f6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ffc:	e049      	b.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b10      	cmp	r3, #16
 800400a:	d119      	bne.n	8004040 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0210 	mvn.w	r2, #16
 8004014:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e030      	b.n	80040a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004040:	f7fe fa38 	bl	80024b4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	d302      	bcc.n	8004056 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d11d      	bne.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004060:	2b40      	cmp	r3, #64	@ 0x40
 8004062:	d016      	beq.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	f043 0220 	orr.w	r2, r3, #32
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e007      	b.n	80040a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409c:	2b40      	cmp	r3, #64	@ 0x40
 800409e:	d1ae      	bne.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c0:	d11b      	bne.n	80040fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	f043 0204 	orr.w	r2, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e267      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d075      	beq.n	8004212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004126:	4b88      	ldr	r3, [pc, #544]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	2b04      	cmp	r3, #4
 8004130:	d00c      	beq.n	800414c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004132:	4b85      	ldr	r3, [pc, #532]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800413a:	2b08      	cmp	r3, #8
 800413c:	d112      	bne.n	8004164 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800413e:	4b82      	ldr	r3, [pc, #520]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800414a:	d10b      	bne.n	8004164 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	4b7e      	ldr	r3, [pc, #504]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d05b      	beq.n	8004210 <HAL_RCC_OscConfig+0x108>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d157      	bne.n	8004210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e242      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416c:	d106      	bne.n	800417c <HAL_RCC_OscConfig+0x74>
 800416e:	4b76      	ldr	r3, [pc, #472]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a75      	ldr	r2, [pc, #468]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e01d      	b.n	80041b8 <HAL_RCC_OscConfig+0xb0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x98>
 8004186:	4b70      	ldr	r3, [pc, #448]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a6f      	ldr	r2, [pc, #444]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800418c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	4b6d      	ldr	r3, [pc, #436]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a6c      	ldr	r2, [pc, #432]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e00b      	b.n	80041b8 <HAL_RCC_OscConfig+0xb0>
 80041a0:	4b69      	ldr	r3, [pc, #420]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a68      	ldr	r2, [pc, #416]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b66      	ldr	r3, [pc, #408]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a65      	ldr	r2, [pc, #404]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80041b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d013      	beq.n	80041e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fe f978 	bl	80024b4 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c8:	f7fe f974 	bl	80024b4 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	@ 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e207      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b5b      	ldr	r3, [pc, #364]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0xc0>
 80041e6:	e014      	b.n	8004212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fe f964 	bl	80024b4 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f0:	f7fe f960 	bl	80024b4 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	@ 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e1f3      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004202:	4b51      	ldr	r3, [pc, #324]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0xe8>
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d063      	beq.n	80042e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800421e:	4b4a      	ldr	r3, [pc, #296]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800422a:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004232:	2b08      	cmp	r3, #8
 8004234:	d11c      	bne.n	8004270 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004236:	4b44      	ldr	r3, [pc, #272]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d116      	bne.n	8004270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	4b41      	ldr	r3, [pc, #260]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_RCC_OscConfig+0x152>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e1c7      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425a:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4937      	ldr	r1, [pc, #220]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426e:	e03a      	b.n	80042e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d020      	beq.n	80042ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004278:	4b34      	ldr	r3, [pc, #208]	@ (800434c <HAL_RCC_OscConfig+0x244>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fe f919 	bl	80024b4 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004286:	f7fe f915 	bl	80024b4 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e1a8      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	4b2b      	ldr	r3, [pc, #172]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a4:	4b28      	ldr	r3, [pc, #160]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4925      	ldr	r1, [pc, #148]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]
 80042b8:	e015      	b.n	80042e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ba:	4b24      	ldr	r3, [pc, #144]	@ (800434c <HAL_RCC_OscConfig+0x244>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fe f8f8 	bl	80024b4 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c8:	f7fe f8f4 	bl	80024b4 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e187      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d036      	beq.n	8004360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042fa:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <HAL_RCC_OscConfig+0x248>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fe f8d8 	bl	80024b4 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004308:	f7fe f8d4 	bl	80024b4 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e167      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800431c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x200>
 8004326:	e01b      	b.n	8004360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004328:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_RCC_OscConfig+0x248>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432e:	f7fe f8c1 	bl	80024b4 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004334:	e00e      	b.n	8004354 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004336:	f7fe f8bd 	bl	80024b4 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d907      	bls.n	8004354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e150      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
 8004348:	40023800 	.word	0x40023800
 800434c:	42470000 	.word	0x42470000
 8004350:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	4b88      	ldr	r3, [pc, #544]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ea      	bne.n	8004336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8097 	beq.w	800449c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004372:	4b81      	ldr	r3, [pc, #516]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	4b7d      	ldr	r3, [pc, #500]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	4a7c      	ldr	r2, [pc, #496]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	@ 0x40
 800438e:	4b7a      	ldr	r3, [pc, #488]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439e:	4b77      	ldr	r3, [pc, #476]	@ (800457c <HAL_RCC_OscConfig+0x474>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d118      	bne.n	80043dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043aa:	4b74      	ldr	r3, [pc, #464]	@ (800457c <HAL_RCC_OscConfig+0x474>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a73      	ldr	r2, [pc, #460]	@ (800457c <HAL_RCC_OscConfig+0x474>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b6:	f7fe f87d 	bl	80024b4 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043be:	f7fe f879 	bl	80024b4 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e10c      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d0:	4b6a      	ldr	r3, [pc, #424]	@ (800457c <HAL_RCC_OscConfig+0x474>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x2ea>
 80043e4:	4b64      	ldr	r3, [pc, #400]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e8:	4a63      	ldr	r2, [pc, #396]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f0:	e01c      	b.n	800442c <HAL_RCC_OscConfig+0x324>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x30c>
 80043fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	6713      	str	r3, [r2, #112]	@ 0x70
 8004406:	4b5c      	ldr	r3, [pc, #368]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	4a5b      	ldr	r2, [pc, #364]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6713      	str	r3, [r2, #112]	@ 0x70
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0x324>
 8004414:	4b58      	ldr	r3, [pc, #352]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004418:	4a57      	ldr	r2, [pc, #348]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004420:	4b55      	ldr	r3, [pc, #340]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	4a54      	ldr	r2, [pc, #336]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004426:	f023 0304 	bic.w	r3, r3, #4
 800442a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fe f83e 	bl	80024b4 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	e00a      	b.n	8004452 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fe f83a 	bl	80024b4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e0cb      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	4b49      	ldr	r3, [pc, #292]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ee      	beq.n	800443c <HAL_RCC_OscConfig+0x334>
 800445e:	e014      	b.n	800448a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004460:	f7fe f828 	bl	80024b4 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004466:	e00a      	b.n	800447e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fe f824 	bl	80024b4 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0b5      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	4b3e      	ldr	r3, [pc, #248]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1ee      	bne.n	8004468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800448a:	7dfb      	ldrb	r3, [r7, #23]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d105      	bne.n	800449c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004490:	4b39      	ldr	r3, [pc, #228]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	4a38      	ldr	r2, [pc, #224]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800449a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80a1 	beq.w	80045e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044a6:	4b34      	ldr	r3, [pc, #208]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d05c      	beq.n	800456c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d141      	bne.n	800453e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b31      	ldr	r3, [pc, #196]	@ (8004580 <HAL_RCC_OscConfig+0x478>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fd fff8 	bl	80024b4 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c8:	f7fd fff4 	bl	80024b4 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e087      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	4b27      	ldr	r3, [pc, #156]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	019b      	lsls	r3, r3, #6
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	3b01      	subs	r3, #1
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	491b      	ldr	r1, [pc, #108]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 800450c:	4313      	orrs	r3, r2
 800450e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004510:	4b1b      	ldr	r3, [pc, #108]	@ (8004580 <HAL_RCC_OscConfig+0x478>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fd ffcd 	bl	80024b4 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451e:	f7fd ffc9 	bl	80024b4 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e05c      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004530:	4b11      	ldr	r3, [pc, #68]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x416>
 800453c:	e054      	b.n	80045e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453e:	4b10      	ldr	r3, [pc, #64]	@ (8004580 <HAL_RCC_OscConfig+0x478>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fd ffb6 	bl	80024b4 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fd ffb2 	bl	80024b4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e045      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x444>
 800456a:	e03d      	b.n	80045e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d107      	bne.n	8004584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e038      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
 8004578:	40023800 	.word	0x40023800
 800457c:	40007000 	.word	0x40007000
 8004580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004584:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <HAL_RCC_OscConfig+0x4ec>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d028      	beq.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d121      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d11a      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045bc:	4293      	cmp	r3, r2
 80045be:	d111      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	3b01      	subs	r3, #1
 80045ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800

080045f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0cc      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800460c:	4b68      	ldr	r3, [pc, #416]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d90c      	bls.n	8004634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	4b65      	ldr	r3, [pc, #404]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b63      	ldr	r3, [pc, #396]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0b8      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d020      	beq.n	8004682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800464c:	4b59      	ldr	r3, [pc, #356]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a58      	ldr	r2, [pc, #352]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004664:	4b53      	ldr	r3, [pc, #332]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4a52      	ldr	r2, [pc, #328]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800466e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004670:	4b50      	ldr	r3, [pc, #320]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	494d      	ldr	r1, [pc, #308]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d044      	beq.n	8004718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	4b47      	ldr	r3, [pc, #284]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d119      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e07f      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d003      	beq.n	80046b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d107      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b6:	4b3f      	ldr	r3, [pc, #252]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e06f      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c6:	4b3b      	ldr	r3, [pc, #236]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e067      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046d6:	4b37      	ldr	r3, [pc, #220]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f023 0203 	bic.w	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4934      	ldr	r1, [pc, #208]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e8:	f7fd fee4 	bl	80024b4 <HAL_GetTick>
 80046ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f0:	f7fd fee0 	bl	80024b4 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e04f      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	4b2b      	ldr	r3, [pc, #172]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 020c 	and.w	r2, r3, #12
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	429a      	cmp	r2, r3
 8004716:	d1eb      	bne.n	80046f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004718:	4b25      	ldr	r3, [pc, #148]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d20c      	bcs.n	8004740 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b22      	ldr	r3, [pc, #136]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e032      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800474c:	4b19      	ldr	r3, [pc, #100]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4916      	ldr	r1, [pc, #88]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800476a:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	490e      	ldr	r1, [pc, #56]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	4313      	orrs	r3, r2
 800477c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800477e:	f000 f821 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 8004782:	4602      	mov	r2, r0
 8004784:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	490a      	ldr	r1, [pc, #40]	@ (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004790:	5ccb      	ldrb	r3, [r1, r3]
 8004792:	fa22 f303 	lsr.w	r3, r2, r3
 8004796:	4a09      	ldr	r2, [pc, #36]	@ (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800479a:	4b09      	ldr	r3, [pc, #36]	@ (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fd fe44 	bl	800242c <HAL_InitTick>

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40023c00 	.word	0x40023c00
 80047b4:	40023800 	.word	0x40023800
 80047b8:	08009244 	.word	0x08009244
 80047bc:	20000004 	.word	0x20000004
 80047c0:	20000008 	.word	0x20000008

080047c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c8:	b090      	sub	sp, #64	@ 0x40
 80047ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047dc:	4b59      	ldr	r3, [pc, #356]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x180>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d00d      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x40>
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	f200 80a1 	bhi.w	8004930 <HAL_RCC_GetSysClockFreq+0x16c>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0x34>
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d003      	beq.n	80047fe <HAL_RCC_GetSysClockFreq+0x3a>
 80047f6:	e09b      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047f8:	4b53      	ldr	r3, [pc, #332]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x184>)
 80047fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047fc:	e09b      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047fe:	4b53      	ldr	r3, [pc, #332]	@ (800494c <HAL_RCC_GetSysClockFreq+0x188>)
 8004800:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004802:	e098      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004804:	4b4f      	ldr	r3, [pc, #316]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x180>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800480c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800480e:	4b4d      	ldr	r3, [pc, #308]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x180>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d028      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800481a:	4b4a      	ldr	r3, [pc, #296]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x180>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	099b      	lsrs	r3, r3, #6
 8004820:	2200      	movs	r2, #0
 8004822:	623b      	str	r3, [r7, #32]
 8004824:	627a      	str	r2, [r7, #36]	@ 0x24
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800482c:	2100      	movs	r1, #0
 800482e:	4b47      	ldr	r3, [pc, #284]	@ (800494c <HAL_RCC_GetSysClockFreq+0x188>)
 8004830:	fb03 f201 	mul.w	r2, r3, r1
 8004834:	2300      	movs	r3, #0
 8004836:	fb00 f303 	mul.w	r3, r0, r3
 800483a:	4413      	add	r3, r2
 800483c:	4a43      	ldr	r2, [pc, #268]	@ (800494c <HAL_RCC_GetSysClockFreq+0x188>)
 800483e:	fba0 1202 	umull	r1, r2, r0, r2
 8004842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004844:	460a      	mov	r2, r1
 8004846:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800484a:	4413      	add	r3, r2
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800484e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004850:	2200      	movs	r2, #0
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	61fa      	str	r2, [r7, #28]
 8004856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800485a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800485e:	f7fc f9fb 	bl	8000c58 <__aeabi_uldivmod>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4613      	mov	r3, r2
 8004868:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800486a:	e053      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486c:	4b35      	ldr	r3, [pc, #212]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x180>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	099b      	lsrs	r3, r3, #6
 8004872:	2200      	movs	r2, #0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	617a      	str	r2, [r7, #20]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800487e:	f04f 0b00 	mov.w	fp, #0
 8004882:	4652      	mov	r2, sl
 8004884:	465b      	mov	r3, fp
 8004886:	f04f 0000 	mov.w	r0, #0
 800488a:	f04f 0100 	mov.w	r1, #0
 800488e:	0159      	lsls	r1, r3, #5
 8004890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004894:	0150      	lsls	r0, r2, #5
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	ebb2 080a 	subs.w	r8, r2, sl
 800489e:	eb63 090b 	sbc.w	r9, r3, fp
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048b6:	ebb2 0408 	subs.w	r4, r2, r8
 80048ba:	eb63 0509 	sbc.w	r5, r3, r9
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	00eb      	lsls	r3, r5, #3
 80048c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048cc:	00e2      	lsls	r2, r4, #3
 80048ce:	4614      	mov	r4, r2
 80048d0:	461d      	mov	r5, r3
 80048d2:	eb14 030a 	adds.w	r3, r4, sl
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	eb45 030b 	adc.w	r3, r5, fp
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ea:	4629      	mov	r1, r5
 80048ec:	028b      	lsls	r3, r1, #10
 80048ee:	4621      	mov	r1, r4
 80048f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048f4:	4621      	mov	r1, r4
 80048f6:	028a      	lsls	r2, r1, #10
 80048f8:	4610      	mov	r0, r2
 80048fa:	4619      	mov	r1, r3
 80048fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fe:	2200      	movs	r2, #0
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	60fa      	str	r2, [r7, #12]
 8004904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004908:	f7fc f9a6 	bl	8000c58 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4613      	mov	r3, r2
 8004912:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004914:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x180>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	3301      	adds	r3, #1
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004924:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800492e:	e002      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004930:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x184>)
 8004932:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004938:	4618      	mov	r0, r3
 800493a:	3740      	adds	r7, #64	@ 0x40
 800493c:	46bd      	mov	sp, r7
 800493e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	00f42400 	.word	0x00f42400
 800494c:	017d7840 	.word	0x017d7840

08004950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004954:	4b03      	ldr	r3, [pc, #12]	@ (8004964 <HAL_RCC_GetHCLKFreq+0x14>)
 8004956:	681b      	ldr	r3, [r3, #0]
}
 8004958:	4618      	mov	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000004 	.word	0x20000004

08004968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800496c:	f7ff fff0 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	0a9b      	lsrs	r3, r3, #10
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	4903      	ldr	r1, [pc, #12]	@ (800498c <HAL_RCC_GetPCLK1Freq+0x24>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004984:	4618      	mov	r0, r3
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40023800 	.word	0x40023800
 800498c:	08009254 	.word	0x08009254

08004990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004994:	f7ff ffdc 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 8004998:	4602      	mov	r2, r0
 800499a:	4b05      	ldr	r3, [pc, #20]	@ (80049b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	0b5b      	lsrs	r3, r3, #13
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	4903      	ldr	r1, [pc, #12]	@ (80049b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a6:	5ccb      	ldrb	r3, [r1, r3]
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40023800 	.word	0x40023800
 80049b4:	08009254 	.word	0x08009254

080049b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e042      	b.n	8004a50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fd fb30 	bl	8002044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2224      	movs	r2, #36	@ 0x24
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fdbd 	bl	800557c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	@ 0x28
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d175      	bne.n	8004b64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_UART_Transmit+0x2c>
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e06e      	b.n	8004b66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2221      	movs	r2, #33	@ 0x21
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a96:	f7fd fd0d 	bl	80024b4 <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	88fa      	ldrh	r2, [r7, #6]
 8004aa0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	88fa      	ldrh	r2, [r7, #6]
 8004aa6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab0:	d108      	bne.n	8004ac4 <HAL_UART_Transmit+0x6c>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	e003      	b.n	8004acc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004acc:	e02e      	b.n	8004b2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2180      	movs	r1, #128	@ 0x80
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fb1f 	bl	800511c <UART_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e03a      	b.n	8004b66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10b      	bne.n	8004b0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	3302      	adds	r3, #2
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e007      	b.n	8004b1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1cb      	bne.n	8004ace <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2140      	movs	r1, #64	@ 0x40
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 faeb 	bl	800511c <UART_WaitOnFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e006      	b.n	8004b66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e000      	b.n	8004b66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d112      	bne.n	8004bae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_UART_Receive_IT+0x26>
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e00b      	b.n	8004bb0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fb12 	bl	80051ce <UART_Start_Receive_IT>
 8004baa:	4603      	mov	r3, r0
 8004bac:	e000      	b.n	8004bb0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
  }
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b0ba      	sub	sp, #232	@ 0xe8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10f      	bne.n	8004c1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <HAL_UART_IRQHandler+0x66>
 8004c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fbf2 	bl	8005400 <UART_Receive_IT>
      return;
 8004c1c:	e25b      	b.n	80050d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 80de 	beq.w	8004de4 <HAL_UART_IRQHandler+0x22c>
 8004c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c38:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 80d1 	beq.w	8004de4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <HAL_UART_IRQHandler+0xae>
 8004c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5e:	f043 0201 	orr.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <HAL_UART_IRQHandler+0xd2>
 8004c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c82:	f043 0202 	orr.w	r2, r3, #2
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <HAL_UART_IRQHandler+0xf6>
 8004c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca6:	f043 0204 	orr.w	r2, r3, #4
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d011      	beq.n	8004cde <HAL_UART_IRQHandler+0x126>
 8004cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d105      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	f043 0208 	orr.w	r2, r3, #8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 81f2 	beq.w	80050cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <HAL_UART_IRQHandler+0x14e>
 8004cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fb7d 	bl	8005400 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d103      	bne.n	8004d32 <HAL_UART_IRQHandler+0x17a>
 8004d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d04f      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fa85 	bl	8005242 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d42:	2b40      	cmp	r3, #64	@ 0x40
 8004d44:	d141      	bne.n	8004dca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3314      	adds	r3, #20
 8004d4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1d9      	bne.n	8004d46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d013      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f98 <HAL_UART_IRQHandler+0x3e0>)
 8004da0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fd fd35 	bl	8002816 <HAL_DMA_Abort_IT>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc0:	e00e      	b.n	8004de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f994 	bl	80050f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc8:	e00a      	b.n	8004de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f990 	bl	80050f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd0:	e006      	b.n	8004de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f98c 	bl	80050f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004dde:	e175      	b.n	80050cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de0:	bf00      	nop
    return;
 8004de2:	e173      	b.n	80050cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	f040 814f 	bne.w	800508c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8148 	beq.w	800508c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8141 	beq.w	800508c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2a:	2b40      	cmp	r3, #64	@ 0x40
 8004e2c:	f040 80b6 	bne.w	8004f9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8145 	beq.w	80050d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	f080 813e 	bcs.w	80050d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e66:	f000 8088 	beq.w	8004f7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004e96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1d9      	bne.n	8004e6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3314      	adds	r3, #20
 8004ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004eda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ede:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004eec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e1      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3314      	adds	r3, #20
 8004f12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e3      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f4a:	f023 0310 	bic.w	r3, r3, #16
 8004f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004f5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f5e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e3      	bne.n	8004f38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fd fbde 	bl	8002736 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f8b7 	bl	8005104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f96:	e09b      	b.n	80050d0 <HAL_UART_IRQHandler+0x518>
 8004f98:	08005309 	.word	0x08005309
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 808e 	beq.w	80050d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8089 	beq.w	80050d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004fe6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004fe8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e3      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3314      	adds	r3, #20
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	623b      	str	r3, [r7, #32]
   return(result);
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3314      	adds	r3, #20
 800501a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800501e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005020:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005024:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e3      	bne.n	8004ffa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	330c      	adds	r3, #12
 8005046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0310 	bic.w	r3, r3, #16
 8005056:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005064:	61fa      	str	r2, [r7, #28]
 8005066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	69b9      	ldr	r1, [r7, #24]
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	617b      	str	r3, [r7, #20]
   return(result);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e3      	bne.n	8005040 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800507e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f83d 	bl	8005104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800508a:	e023      	b.n	80050d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800508c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005094:	2b00      	cmp	r3, #0
 8005096:	d009      	beq.n	80050ac <HAL_UART_IRQHandler+0x4f4>
 8005098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800509c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f943 	bl	8005330 <UART_Transmit_IT>
    return;
 80050aa:	e014      	b.n	80050d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00e      	beq.n	80050d6 <HAL_UART_IRQHandler+0x51e>
 80050b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f983 	bl	80053d0 <UART_EndTransmit_IT>
    return;
 80050ca:	e004      	b.n	80050d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80050cc:	bf00      	nop
 80050ce:	e002      	b.n	80050d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80050d0:	bf00      	nop
 80050d2:	e000      	b.n	80050d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80050d4:	bf00      	nop
  }
}
 80050d6:	37e8      	adds	r7, #232	@ 0xe8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512c:	e03b      	b.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d037      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005136:	f7fd f9bd 	bl	80024b4 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	6a3a      	ldr	r2, [r7, #32]
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <UART_WaitOnFlagUntilTimeout+0x30>
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e03a      	b.n	80051c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	d023      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b80      	cmp	r3, #128	@ 0x80
 8005162:	d020      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b40      	cmp	r3, #64	@ 0x40
 8005168:	d01d      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b08      	cmp	r3, #8
 8005176:	d116      	bne.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f857 	bl	8005242 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2208      	movs	r2, #8
 8005198:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e00f      	b.n	80051c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4013      	ands	r3, r2
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d0b4      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	4613      	mov	r3, r2
 80051da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	88fa      	ldrh	r2, [r7, #6]
 80051e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	88fa      	ldrh	r2, [r7, #6]
 80051ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2222      	movs	r2, #34	@ 0x22
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005212:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695a      	ldr	r2, [r3, #20]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0220 	orr.w	r2, r2, #32
 8005232:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005242:	b480      	push	{r7}
 8005244:	b095      	sub	sp, #84	@ 0x54
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800525a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800526a:	643a      	str	r2, [r7, #64]	@ 0x40
 800526c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e5      	bne.n	800524a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3314      	adds	r3, #20
 8005284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	61fb      	str	r3, [r7, #28]
   return(result);
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3314      	adds	r3, #20
 800529c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800529e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e5      	bne.n	800527e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d119      	bne.n	80052ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f023 0310 	bic.w	r3, r3, #16
 80052d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052da:	61ba      	str	r2, [r7, #24]
 80052dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6979      	ldr	r1, [r7, #20]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	613b      	str	r3, [r7, #16]
   return(result);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e5      	bne.n	80052ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052fc:	bf00      	nop
 80052fe:	3754      	adds	r7, #84	@ 0x54
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7ff fee4 	bl	80050f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b21      	cmp	r3, #33	@ 0x21
 8005342:	d13e      	bne.n	80053c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534c:	d114      	bne.n	8005378 <UART_Transmit_IT+0x48>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d110      	bne.n	8005378 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800536a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	1c9a      	adds	r2, r3, #2
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	621a      	str	r2, [r3, #32]
 8005376:	e008      	b.n	800538a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	1c59      	adds	r1, r3, #1
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6211      	str	r1, [r2, #32]
 8005382:	781a      	ldrb	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29b      	uxth	r3, r3
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	4619      	mov	r1, r3
 8005398:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10f      	bne.n	80053be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	e000      	b.n	80053c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fe73 	bl	80050dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08c      	sub	sp, #48	@ 0x30
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b22      	cmp	r3, #34	@ 0x22
 8005412:	f040 80ae 	bne.w	8005572 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800541e:	d117      	bne.n	8005450 <UART_Receive_IT+0x50>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d113      	bne.n	8005450 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543e:	b29a      	uxth	r2, r3
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005448:	1c9a      	adds	r2, r3, #2
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	629a      	str	r2, [r3, #40]	@ 0x28
 800544e:	e026      	b.n	800549e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005462:	d007      	beq.n	8005474 <UART_Receive_IT+0x74>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <UART_Receive_IT+0x82>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d106      	bne.n	8005482 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	e008      	b.n	8005494 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800548e:	b2da      	uxtb	r2, r3
 8005490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005492:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4619      	mov	r1, r3
 80054ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d15d      	bne.n	800556e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0220 	bic.w	r2, r2, #32
 80054c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695a      	ldr	r2, [r3, #20]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0201 	bic.w	r2, r2, #1
 80054e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d135      	bne.n	8005564 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	613b      	str	r3, [r7, #16]
   return(result);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f023 0310 	bic.w	r3, r3, #16
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551e:	623a      	str	r2, [r7, #32]
 8005520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	69f9      	ldr	r1, [r7, #28]
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	61bb      	str	r3, [r7, #24]
   return(result);
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e5      	bne.n	80054fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b10      	cmp	r3, #16
 800553e:	d10a      	bne.n	8005556 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fdd1 	bl	8005104 <HAL_UARTEx_RxEventCallback>
 8005562:	e002      	b.n	800556a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fc fa9b 	bl	8001aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e002      	b.n	8005574 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e000      	b.n	8005574 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005572:	2302      	movs	r3, #2
  }
}
 8005574:	4618      	mov	r0, r3
 8005576:	3730      	adds	r7, #48	@ 0x30
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800557c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005580:	b0c0      	sub	sp, #256	@ 0x100
 8005582:	af00      	add	r7, sp, #0
 8005584:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	68d9      	ldr	r1, [r3, #12]
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	ea40 0301 	orr.w	r3, r0, r1
 80055a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055d4:	f021 010c 	bic.w	r1, r1, #12
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055e2:	430b      	orrs	r3, r1
 80055e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f6:	6999      	ldr	r1, [r3, #24]
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	ea40 0301 	orr.w	r3, r0, r1
 8005602:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4b8f      	ldr	r3, [pc, #572]	@ (8005848 <UART_SetConfig+0x2cc>)
 800560c:	429a      	cmp	r2, r3
 800560e:	d005      	beq.n	800561c <UART_SetConfig+0xa0>
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b8d      	ldr	r3, [pc, #564]	@ (800584c <UART_SetConfig+0x2d0>)
 8005618:	429a      	cmp	r2, r3
 800561a:	d104      	bne.n	8005626 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800561c:	f7ff f9b8 	bl	8004990 <HAL_RCC_GetPCLK2Freq>
 8005620:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005624:	e003      	b.n	800562e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005626:	f7ff f99f 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 800562a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005638:	f040 810c 	bne.w	8005854 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800563c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005646:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800564a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	1891      	adds	r1, r2, r2
 8005654:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005656:	415b      	adcs	r3, r3
 8005658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800565a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800565e:	4621      	mov	r1, r4
 8005660:	eb12 0801 	adds.w	r8, r2, r1
 8005664:	4629      	mov	r1, r5
 8005666:	eb43 0901 	adc.w	r9, r3, r1
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800567a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800567e:	4690      	mov	r8, r2
 8005680:	4699      	mov	r9, r3
 8005682:	4623      	mov	r3, r4
 8005684:	eb18 0303 	adds.w	r3, r8, r3
 8005688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800568c:	462b      	mov	r3, r5
 800568e:	eb49 0303 	adc.w	r3, r9, r3
 8005692:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056aa:	460b      	mov	r3, r1
 80056ac:	18db      	adds	r3, r3, r3
 80056ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80056b0:	4613      	mov	r3, r2
 80056b2:	eb42 0303 	adc.w	r3, r2, r3
 80056b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056c0:	f7fb faca 	bl	8000c58 <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4b61      	ldr	r3, [pc, #388]	@ (8005850 <UART_SetConfig+0x2d4>)
 80056ca:	fba3 2302 	umull	r2, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	011c      	lsls	r4, r3, #4
 80056d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056e4:	4642      	mov	r2, r8
 80056e6:	464b      	mov	r3, r9
 80056e8:	1891      	adds	r1, r2, r2
 80056ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056ec:	415b      	adcs	r3, r3
 80056ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056f4:	4641      	mov	r1, r8
 80056f6:	eb12 0a01 	adds.w	sl, r2, r1
 80056fa:	4649      	mov	r1, r9
 80056fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800570c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005714:	4692      	mov	sl, r2
 8005716:	469b      	mov	fp, r3
 8005718:	4643      	mov	r3, r8
 800571a:	eb1a 0303 	adds.w	r3, sl, r3
 800571e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005722:	464b      	mov	r3, r9
 8005724:	eb4b 0303 	adc.w	r3, fp, r3
 8005728:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005738:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800573c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005740:	460b      	mov	r3, r1
 8005742:	18db      	adds	r3, r3, r3
 8005744:	643b      	str	r3, [r7, #64]	@ 0x40
 8005746:	4613      	mov	r3, r2
 8005748:	eb42 0303 	adc.w	r3, r2, r3
 800574c:	647b      	str	r3, [r7, #68]	@ 0x44
 800574e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005752:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005756:	f7fb fa7f 	bl	8000c58 <__aeabi_uldivmod>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4611      	mov	r1, r2
 8005760:	4b3b      	ldr	r3, [pc, #236]	@ (8005850 <UART_SetConfig+0x2d4>)
 8005762:	fba3 2301 	umull	r2, r3, r3, r1
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	2264      	movs	r2, #100	@ 0x64
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	1acb      	subs	r3, r1, r3
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005776:	4b36      	ldr	r3, [pc, #216]	@ (8005850 <UART_SetConfig+0x2d4>)
 8005778:	fba3 2302 	umull	r2, r3, r3, r2
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005784:	441c      	add	r4, r3
 8005786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800578a:	2200      	movs	r2, #0
 800578c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005790:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005794:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005798:	4642      	mov	r2, r8
 800579a:	464b      	mov	r3, r9
 800579c:	1891      	adds	r1, r2, r2
 800579e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057a0:	415b      	adcs	r3, r3
 80057a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057a8:	4641      	mov	r1, r8
 80057aa:	1851      	adds	r1, r2, r1
 80057ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80057ae:	4649      	mov	r1, r9
 80057b0:	414b      	adcs	r3, r1
 80057b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057c0:	4659      	mov	r1, fp
 80057c2:	00cb      	lsls	r3, r1, #3
 80057c4:	4651      	mov	r1, sl
 80057c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ca:	4651      	mov	r1, sl
 80057cc:	00ca      	lsls	r2, r1, #3
 80057ce:	4610      	mov	r0, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	4603      	mov	r3, r0
 80057d4:	4642      	mov	r2, r8
 80057d6:	189b      	adds	r3, r3, r2
 80057d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057dc:	464b      	mov	r3, r9
 80057de:	460a      	mov	r2, r1
 80057e0:	eb42 0303 	adc.w	r3, r2, r3
 80057e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057fc:	460b      	mov	r3, r1
 80057fe:	18db      	adds	r3, r3, r3
 8005800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005802:	4613      	mov	r3, r2
 8005804:	eb42 0303 	adc.w	r3, r2, r3
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800580a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800580e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005812:	f7fb fa21 	bl	8000c58 <__aeabi_uldivmod>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <UART_SetConfig+0x2d4>)
 800581c:	fba3 1302 	umull	r1, r3, r3, r2
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	2164      	movs	r1, #100	@ 0x64
 8005824:	fb01 f303 	mul.w	r3, r1, r3
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	3332      	adds	r3, #50	@ 0x32
 800582e:	4a08      	ldr	r2, [pc, #32]	@ (8005850 <UART_SetConfig+0x2d4>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	f003 0207 	and.w	r2, r3, #7
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4422      	add	r2, r4
 8005842:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005844:	e106      	b.n	8005a54 <UART_SetConfig+0x4d8>
 8005846:	bf00      	nop
 8005848:	40011000 	.word	0x40011000
 800584c:	40011400 	.word	0x40011400
 8005850:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005858:	2200      	movs	r2, #0
 800585a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800585e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005862:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005866:	4642      	mov	r2, r8
 8005868:	464b      	mov	r3, r9
 800586a:	1891      	adds	r1, r2, r2
 800586c:	6239      	str	r1, [r7, #32]
 800586e:	415b      	adcs	r3, r3
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
 8005872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005876:	4641      	mov	r1, r8
 8005878:	1854      	adds	r4, r2, r1
 800587a:	4649      	mov	r1, r9
 800587c:	eb43 0501 	adc.w	r5, r3, r1
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	00eb      	lsls	r3, r5, #3
 800588a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800588e:	00e2      	lsls	r2, r4, #3
 8005890:	4614      	mov	r4, r2
 8005892:	461d      	mov	r5, r3
 8005894:	4643      	mov	r3, r8
 8005896:	18e3      	adds	r3, r4, r3
 8005898:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800589c:	464b      	mov	r3, r9
 800589e:	eb45 0303 	adc.w	r3, r5, r3
 80058a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058c2:	4629      	mov	r1, r5
 80058c4:	008b      	lsls	r3, r1, #2
 80058c6:	4621      	mov	r1, r4
 80058c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058cc:	4621      	mov	r1, r4
 80058ce:	008a      	lsls	r2, r1, #2
 80058d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058d4:	f7fb f9c0 	bl	8000c58 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4b60      	ldr	r3, [pc, #384]	@ (8005a60 <UART_SetConfig+0x4e4>)
 80058de:	fba3 2302 	umull	r2, r3, r3, r2
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	011c      	lsls	r4, r3, #4
 80058e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	1891      	adds	r1, r2, r2
 80058fe:	61b9      	str	r1, [r7, #24]
 8005900:	415b      	adcs	r3, r3
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005908:	4641      	mov	r1, r8
 800590a:	1851      	adds	r1, r2, r1
 800590c:	6139      	str	r1, [r7, #16]
 800590e:	4649      	mov	r1, r9
 8005910:	414b      	adcs	r3, r1
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005920:	4659      	mov	r1, fp
 8005922:	00cb      	lsls	r3, r1, #3
 8005924:	4651      	mov	r1, sl
 8005926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800592a:	4651      	mov	r1, sl
 800592c:	00ca      	lsls	r2, r1, #3
 800592e:	4610      	mov	r0, r2
 8005930:	4619      	mov	r1, r3
 8005932:	4603      	mov	r3, r0
 8005934:	4642      	mov	r2, r8
 8005936:	189b      	adds	r3, r3, r2
 8005938:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800593c:	464b      	mov	r3, r9
 800593e:	460a      	mov	r2, r1
 8005940:	eb42 0303 	adc.w	r3, r2, r3
 8005944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005952:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005960:	4649      	mov	r1, r9
 8005962:	008b      	lsls	r3, r1, #2
 8005964:	4641      	mov	r1, r8
 8005966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800596a:	4641      	mov	r1, r8
 800596c:	008a      	lsls	r2, r1, #2
 800596e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005972:	f7fb f971 	bl	8000c58 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4611      	mov	r1, r2
 800597c:	4b38      	ldr	r3, [pc, #224]	@ (8005a60 <UART_SetConfig+0x4e4>)
 800597e:	fba3 2301 	umull	r2, r3, r3, r1
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2264      	movs	r2, #100	@ 0x64
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	1acb      	subs	r3, r1, r3
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	3332      	adds	r3, #50	@ 0x32
 8005990:	4a33      	ldr	r2, [pc, #204]	@ (8005a60 <UART_SetConfig+0x4e4>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800599c:	441c      	add	r4, r3
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a2:	2200      	movs	r2, #0
 80059a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80059a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80059a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	1891      	adds	r1, r2, r2
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	415b      	adcs	r3, r3
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059bc:	4641      	mov	r1, r8
 80059be:	1851      	adds	r1, r2, r1
 80059c0:	6039      	str	r1, [r7, #0]
 80059c2:	4649      	mov	r1, r9
 80059c4:	414b      	adcs	r3, r1
 80059c6:	607b      	str	r3, [r7, #4]
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059d4:	4659      	mov	r1, fp
 80059d6:	00cb      	lsls	r3, r1, #3
 80059d8:	4651      	mov	r1, sl
 80059da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059de:	4651      	mov	r1, sl
 80059e0:	00ca      	lsls	r2, r1, #3
 80059e2:	4610      	mov	r0, r2
 80059e4:	4619      	mov	r1, r3
 80059e6:	4603      	mov	r3, r0
 80059e8:	4642      	mov	r2, r8
 80059ea:	189b      	adds	r3, r3, r2
 80059ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059ee:	464b      	mov	r3, r9
 80059f0:	460a      	mov	r2, r1
 80059f2:	eb42 0303 	adc.w	r3, r2, r3
 80059f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a02:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a10:	4649      	mov	r1, r9
 8005a12:	008b      	lsls	r3, r1, #2
 8005a14:	4641      	mov	r1, r8
 8005a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a1a:	4641      	mov	r1, r8
 8005a1c:	008a      	lsls	r2, r1, #2
 8005a1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a22:	f7fb f919 	bl	8000c58 <__aeabi_uldivmod>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a60 <UART_SetConfig+0x4e4>)
 8005a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	2164      	movs	r1, #100	@ 0x64
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	3332      	adds	r3, #50	@ 0x32
 8005a3e:	4a08      	ldr	r2, [pc, #32]	@ (8005a60 <UART_SetConfig+0x4e4>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4422      	add	r2, r4
 8005a52:	609a      	str	r2, [r3, #8]
}
 8005a54:	bf00      	nop
 8005a56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a60:	51eb851f 	.word	0x51eb851f

08005a64 <__cvt>:
 8005a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	ec57 6b10 	vmov	r6, r7, d0
 8005a6c:	2f00      	cmp	r7, #0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	4619      	mov	r1, r3
 8005a72:	463b      	mov	r3, r7
 8005a74:	bfbb      	ittet	lt
 8005a76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a7a:	461f      	movlt	r7, r3
 8005a7c:	2300      	movge	r3, #0
 8005a7e:	232d      	movlt	r3, #45	@ 0x2d
 8005a80:	700b      	strb	r3, [r1, #0]
 8005a82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a88:	4691      	mov	r9, r2
 8005a8a:	f023 0820 	bic.w	r8, r3, #32
 8005a8e:	bfbc      	itt	lt
 8005a90:	4632      	movlt	r2, r6
 8005a92:	4616      	movlt	r6, r2
 8005a94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a98:	d005      	beq.n	8005aa6 <__cvt+0x42>
 8005a9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a9e:	d100      	bne.n	8005aa2 <__cvt+0x3e>
 8005aa0:	3401      	adds	r4, #1
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	e000      	b.n	8005aa8 <__cvt+0x44>
 8005aa6:	2103      	movs	r1, #3
 8005aa8:	ab03      	add	r3, sp, #12
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	ab02      	add	r3, sp, #8
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	ec47 6b10 	vmov	d0, r6, r7
 8005ab4:	4653      	mov	r3, sl
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	f000 fe3a 	bl	8006730 <_dtoa_r>
 8005abc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	d119      	bne.n	8005af8 <__cvt+0x94>
 8005ac4:	f019 0f01 	tst.w	r9, #1
 8005ac8:	d00e      	beq.n	8005ae8 <__cvt+0x84>
 8005aca:	eb00 0904 	add.w	r9, r0, r4
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	4639      	mov	r1, r7
 8005ad6:	f7fa ffff 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ada:	b108      	cbz	r0, 8005ae0 <__cvt+0x7c>
 8005adc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ae0:	2230      	movs	r2, #48	@ 0x30
 8005ae2:	9b03      	ldr	r3, [sp, #12]
 8005ae4:	454b      	cmp	r3, r9
 8005ae6:	d31e      	bcc.n	8005b26 <__cvt+0xc2>
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005aec:	1b5b      	subs	r3, r3, r5
 8005aee:	4628      	mov	r0, r5
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	b004      	add	sp, #16
 8005af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005afc:	eb00 0904 	add.w	r9, r0, r4
 8005b00:	d1e5      	bne.n	8005ace <__cvt+0x6a>
 8005b02:	7803      	ldrb	r3, [r0, #0]
 8005b04:	2b30      	cmp	r3, #48	@ 0x30
 8005b06:	d10a      	bne.n	8005b1e <__cvt+0xba>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	4639      	mov	r1, r7
 8005b10:	f7fa ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b14:	b918      	cbnz	r0, 8005b1e <__cvt+0xba>
 8005b16:	f1c4 0401 	rsb	r4, r4, #1
 8005b1a:	f8ca 4000 	str.w	r4, [sl]
 8005b1e:	f8da 3000 	ldr.w	r3, [sl]
 8005b22:	4499      	add	r9, r3
 8005b24:	e7d3      	b.n	8005ace <__cvt+0x6a>
 8005b26:	1c59      	adds	r1, r3, #1
 8005b28:	9103      	str	r1, [sp, #12]
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	e7d9      	b.n	8005ae2 <__cvt+0x7e>

08005b2e <__exponent>:
 8005b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b30:	2900      	cmp	r1, #0
 8005b32:	bfba      	itte	lt
 8005b34:	4249      	neglt	r1, r1
 8005b36:	232d      	movlt	r3, #45	@ 0x2d
 8005b38:	232b      	movge	r3, #43	@ 0x2b
 8005b3a:	2909      	cmp	r1, #9
 8005b3c:	7002      	strb	r2, [r0, #0]
 8005b3e:	7043      	strb	r3, [r0, #1]
 8005b40:	dd29      	ble.n	8005b96 <__exponent+0x68>
 8005b42:	f10d 0307 	add.w	r3, sp, #7
 8005b46:	461d      	mov	r5, r3
 8005b48:	270a      	movs	r7, #10
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b50:	fb07 1416 	mls	r4, r7, r6, r1
 8005b54:	3430      	adds	r4, #48	@ 0x30
 8005b56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	2c63      	cmp	r4, #99	@ 0x63
 8005b5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b62:	4631      	mov	r1, r6
 8005b64:	dcf1      	bgt.n	8005b4a <__exponent+0x1c>
 8005b66:	3130      	adds	r1, #48	@ 0x30
 8005b68:	1e94      	subs	r4, r2, #2
 8005b6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b6e:	1c41      	adds	r1, r0, #1
 8005b70:	4623      	mov	r3, r4
 8005b72:	42ab      	cmp	r3, r5
 8005b74:	d30a      	bcc.n	8005b8c <__exponent+0x5e>
 8005b76:	f10d 0309 	add.w	r3, sp, #9
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	42ac      	cmp	r4, r5
 8005b7e:	bf88      	it	hi
 8005b80:	2300      	movhi	r3, #0
 8005b82:	3302      	adds	r3, #2
 8005b84:	4403      	add	r3, r0
 8005b86:	1a18      	subs	r0, r3, r0
 8005b88:	b003      	add	sp, #12
 8005b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b94:	e7ed      	b.n	8005b72 <__exponent+0x44>
 8005b96:	2330      	movs	r3, #48	@ 0x30
 8005b98:	3130      	adds	r1, #48	@ 0x30
 8005b9a:	7083      	strb	r3, [r0, #2]
 8005b9c:	70c1      	strb	r1, [r0, #3]
 8005b9e:	1d03      	adds	r3, r0, #4
 8005ba0:	e7f1      	b.n	8005b86 <__exponent+0x58>
	...

08005ba4 <_printf_float>:
 8005ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba8:	b08d      	sub	sp, #52	@ 0x34
 8005baa:	460c      	mov	r4, r1
 8005bac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	461f      	mov	r7, r3
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	f000 fcbb 	bl	8006530 <_localeconv_r>
 8005bba:	6803      	ldr	r3, [r0, #0]
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fa fb5e 	bl	8000280 <strlen>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bcc:	9005      	str	r0, [sp, #20]
 8005bce:	3307      	adds	r3, #7
 8005bd0:	f023 0307 	bic.w	r3, r3, #7
 8005bd4:	f103 0208 	add.w	r2, r3, #8
 8005bd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bdc:	f8d4 b000 	ldr.w	fp, [r4]
 8005be0:	f8c8 2000 	str.w	r2, [r8]
 8005be4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005be8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005bec:	9307      	str	r3, [sp, #28]
 8005bee:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bf2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8005e6c <_printf_float+0x2c8>)
 8005bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005c00:	f7fa ff9c 	bl	8000b3c <__aeabi_dcmpun>
 8005c04:	bb70      	cbnz	r0, 8005c64 <_printf_float+0xc0>
 8005c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c0a:	4b98      	ldr	r3, [pc, #608]	@ (8005e6c <_printf_float+0x2c8>)
 8005c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c10:	f7fa ff76 	bl	8000b00 <__aeabi_dcmple>
 8005c14:	bb30      	cbnz	r0, 8005c64 <_printf_float+0xc0>
 8005c16:	2200      	movs	r2, #0
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	4649      	mov	r1, r9
 8005c1e:	f7fa ff65 	bl	8000aec <__aeabi_dcmplt>
 8005c22:	b110      	cbz	r0, 8005c2a <_printf_float+0x86>
 8005c24:	232d      	movs	r3, #45	@ 0x2d
 8005c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c2a:	4a91      	ldr	r2, [pc, #580]	@ (8005e70 <_printf_float+0x2cc>)
 8005c2c:	4b91      	ldr	r3, [pc, #580]	@ (8005e74 <_printf_float+0x2d0>)
 8005c2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c32:	bf94      	ite	ls
 8005c34:	4690      	movls	r8, r2
 8005c36:	4698      	movhi	r8, r3
 8005c38:	2303      	movs	r3, #3
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	f02b 0304 	bic.w	r3, fp, #4
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	f04f 0900 	mov.w	r9, #0
 8005c46:	9700      	str	r7, [sp, #0]
 8005c48:	4633      	mov	r3, r6
 8005c4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 f9d2 	bl	8005ff8 <_printf_common>
 8005c54:	3001      	adds	r0, #1
 8005c56:	f040 808d 	bne.w	8005d74 <_printf_float+0x1d0>
 8005c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5e:	b00d      	add	sp, #52	@ 0x34
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c64:	4642      	mov	r2, r8
 8005c66:	464b      	mov	r3, r9
 8005c68:	4640      	mov	r0, r8
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	f7fa ff66 	bl	8000b3c <__aeabi_dcmpun>
 8005c70:	b140      	cbz	r0, 8005c84 <_printf_float+0xe0>
 8005c72:	464b      	mov	r3, r9
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bfbc      	itt	lt
 8005c78:	232d      	movlt	r3, #45	@ 0x2d
 8005c7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e78 <_printf_float+0x2d4>)
 8005c80:	4b7e      	ldr	r3, [pc, #504]	@ (8005e7c <_printf_float+0x2d8>)
 8005c82:	e7d4      	b.n	8005c2e <_printf_float+0x8a>
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c8a:	9206      	str	r2, [sp, #24]
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	d13b      	bne.n	8005d08 <_printf_float+0x164>
 8005c90:	2306      	movs	r3, #6
 8005c92:	6063      	str	r3, [r4, #4]
 8005c94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c98:	2300      	movs	r3, #0
 8005c9a:	6022      	str	r2, [r4, #0]
 8005c9c:	9303      	str	r3, [sp, #12]
 8005c9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005ca0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005ca4:	ab09      	add	r3, sp, #36	@ 0x24
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	6861      	ldr	r1, [r4, #4]
 8005caa:	ec49 8b10 	vmov	d0, r8, r9
 8005cae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f7ff fed6 	bl	8005a64 <__cvt>
 8005cb8:	9b06      	ldr	r3, [sp, #24]
 8005cba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005cbc:	2b47      	cmp	r3, #71	@ 0x47
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	d129      	bne.n	8005d16 <_printf_float+0x172>
 8005cc2:	1cc8      	adds	r0, r1, #3
 8005cc4:	db02      	blt.n	8005ccc <_printf_float+0x128>
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	dd41      	ble.n	8005d50 <_printf_float+0x1ac>
 8005ccc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005cd0:	fa5f fa8a 	uxtb.w	sl, sl
 8005cd4:	3901      	subs	r1, #1
 8005cd6:	4652      	mov	r2, sl
 8005cd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005cdc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cde:	f7ff ff26 	bl	8005b2e <__exponent>
 8005ce2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ce4:	1813      	adds	r3, r2, r0
 8005ce6:	2a01      	cmp	r2, #1
 8005ce8:	4681      	mov	r9, r0
 8005cea:	6123      	str	r3, [r4, #16]
 8005cec:	dc02      	bgt.n	8005cf4 <_printf_float+0x150>
 8005cee:	6822      	ldr	r2, [r4, #0]
 8005cf0:	07d2      	lsls	r2, r2, #31
 8005cf2:	d501      	bpl.n	8005cf8 <_printf_float+0x154>
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0a2      	beq.n	8005c46 <_printf_float+0xa2>
 8005d00:	232d      	movs	r3, #45	@ 0x2d
 8005d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d06:	e79e      	b.n	8005c46 <_printf_float+0xa2>
 8005d08:	9a06      	ldr	r2, [sp, #24]
 8005d0a:	2a47      	cmp	r2, #71	@ 0x47
 8005d0c:	d1c2      	bne.n	8005c94 <_printf_float+0xf0>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1c0      	bne.n	8005c94 <_printf_float+0xf0>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e7bd      	b.n	8005c92 <_printf_float+0xee>
 8005d16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d1a:	d9db      	bls.n	8005cd4 <_printf_float+0x130>
 8005d1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d20:	d118      	bne.n	8005d54 <_printf_float+0x1b0>
 8005d22:	2900      	cmp	r1, #0
 8005d24:	6863      	ldr	r3, [r4, #4]
 8005d26:	dd0b      	ble.n	8005d40 <_printf_float+0x19c>
 8005d28:	6121      	str	r1, [r4, #16]
 8005d2a:	b913      	cbnz	r3, 8005d32 <_printf_float+0x18e>
 8005d2c:	6822      	ldr	r2, [r4, #0]
 8005d2e:	07d0      	lsls	r0, r2, #31
 8005d30:	d502      	bpl.n	8005d38 <_printf_float+0x194>
 8005d32:	3301      	adds	r3, #1
 8005d34:	440b      	add	r3, r1
 8005d36:	6123      	str	r3, [r4, #16]
 8005d38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d3a:	f04f 0900 	mov.w	r9, #0
 8005d3e:	e7db      	b.n	8005cf8 <_printf_float+0x154>
 8005d40:	b913      	cbnz	r3, 8005d48 <_printf_float+0x1a4>
 8005d42:	6822      	ldr	r2, [r4, #0]
 8005d44:	07d2      	lsls	r2, r2, #31
 8005d46:	d501      	bpl.n	8005d4c <_printf_float+0x1a8>
 8005d48:	3302      	adds	r3, #2
 8005d4a:	e7f4      	b.n	8005d36 <_printf_float+0x192>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e7f2      	b.n	8005d36 <_printf_float+0x192>
 8005d50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d56:	4299      	cmp	r1, r3
 8005d58:	db05      	blt.n	8005d66 <_printf_float+0x1c2>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	6121      	str	r1, [r4, #16]
 8005d5e:	07d8      	lsls	r0, r3, #31
 8005d60:	d5ea      	bpl.n	8005d38 <_printf_float+0x194>
 8005d62:	1c4b      	adds	r3, r1, #1
 8005d64:	e7e7      	b.n	8005d36 <_printf_float+0x192>
 8005d66:	2900      	cmp	r1, #0
 8005d68:	bfd4      	ite	le
 8005d6a:	f1c1 0202 	rsble	r2, r1, #2
 8005d6e:	2201      	movgt	r2, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	e7e0      	b.n	8005d36 <_printf_float+0x192>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	055a      	lsls	r2, r3, #21
 8005d78:	d407      	bmi.n	8005d8a <_printf_float+0x1e6>
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	d12b      	bne.n	8005de0 <_printf_float+0x23c>
 8005d88:	e767      	b.n	8005c5a <_printf_float+0xb6>
 8005d8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d8e:	f240 80dd 	bls.w	8005f4c <_printf_float+0x3a8>
 8005d92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d96:	2200      	movs	r2, #0
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f7fa fe9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d033      	beq.n	8005e0a <_printf_float+0x266>
 8005da2:	4a37      	ldr	r2, [pc, #220]	@ (8005e80 <_printf_float+0x2dc>)
 8005da4:	2301      	movs	r3, #1
 8005da6:	4631      	mov	r1, r6
 8005da8:	4628      	mov	r0, r5
 8005daa:	47b8      	blx	r7
 8005dac:	3001      	adds	r0, #1
 8005dae:	f43f af54 	beq.w	8005c5a <_printf_float+0xb6>
 8005db2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005db6:	4543      	cmp	r3, r8
 8005db8:	db02      	blt.n	8005dc0 <_printf_float+0x21c>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	07d8      	lsls	r0, r3, #31
 8005dbe:	d50f      	bpl.n	8005de0 <_printf_float+0x23c>
 8005dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af45 	beq.w	8005c5a <_printf_float+0xb6>
 8005dd0:	f04f 0900 	mov.w	r9, #0
 8005dd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005dd8:	f104 0a1a 	add.w	sl, r4, #26
 8005ddc:	45c8      	cmp	r8, r9
 8005dde:	dc09      	bgt.n	8005df4 <_printf_float+0x250>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	079b      	lsls	r3, r3, #30
 8005de4:	f100 8103 	bmi.w	8005fee <_printf_float+0x44a>
 8005de8:	68e0      	ldr	r0, [r4, #12]
 8005dea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dec:	4298      	cmp	r0, r3
 8005dee:	bfb8      	it	lt
 8005df0:	4618      	movlt	r0, r3
 8005df2:	e734      	b.n	8005c5e <_printf_float+0xba>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4652      	mov	r2, sl
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f43f af2b 	beq.w	8005c5a <_printf_float+0xb6>
 8005e04:	f109 0901 	add.w	r9, r9, #1
 8005e08:	e7e8      	b.n	8005ddc <_printf_float+0x238>
 8005e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dc39      	bgt.n	8005e84 <_printf_float+0x2e0>
 8005e10:	4a1b      	ldr	r2, [pc, #108]	@ (8005e80 <_printf_float+0x2dc>)
 8005e12:	2301      	movs	r3, #1
 8005e14:	4631      	mov	r1, r6
 8005e16:	4628      	mov	r0, r5
 8005e18:	47b8      	blx	r7
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	f43f af1d 	beq.w	8005c5a <_printf_float+0xb6>
 8005e20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005e24:	ea59 0303 	orrs.w	r3, r9, r3
 8005e28:	d102      	bne.n	8005e30 <_printf_float+0x28c>
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	07d9      	lsls	r1, r3, #31
 8005e2e:	d5d7      	bpl.n	8005de0 <_printf_float+0x23c>
 8005e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f43f af0d 	beq.w	8005c5a <_printf_float+0xb6>
 8005e40:	f04f 0a00 	mov.w	sl, #0
 8005e44:	f104 0b1a 	add.w	fp, r4, #26
 8005e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4a:	425b      	negs	r3, r3
 8005e4c:	4553      	cmp	r3, sl
 8005e4e:	dc01      	bgt.n	8005e54 <_printf_float+0x2b0>
 8005e50:	464b      	mov	r3, r9
 8005e52:	e793      	b.n	8005d7c <_printf_float+0x1d8>
 8005e54:	2301      	movs	r3, #1
 8005e56:	465a      	mov	r2, fp
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f43f aefb 	beq.w	8005c5a <_printf_float+0xb6>
 8005e64:	f10a 0a01 	add.w	sl, sl, #1
 8005e68:	e7ee      	b.n	8005e48 <_printf_float+0x2a4>
 8005e6a:	bf00      	nop
 8005e6c:	7fefffff 	.word	0x7fefffff
 8005e70:	0800925c 	.word	0x0800925c
 8005e74:	08009260 	.word	0x08009260
 8005e78:	08009264 	.word	0x08009264
 8005e7c:	08009268 	.word	0x08009268
 8005e80:	0800926c 	.word	0x0800926c
 8005e84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e8a:	4553      	cmp	r3, sl
 8005e8c:	bfa8      	it	ge
 8005e8e:	4653      	movge	r3, sl
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	4699      	mov	r9, r3
 8005e94:	dc36      	bgt.n	8005f04 <_printf_float+0x360>
 8005e96:	f04f 0b00 	mov.w	fp, #0
 8005e9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e9e:	f104 021a 	add.w	r2, r4, #26
 8005ea2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ea4:	9306      	str	r3, [sp, #24]
 8005ea6:	eba3 0309 	sub.w	r3, r3, r9
 8005eaa:	455b      	cmp	r3, fp
 8005eac:	dc31      	bgt.n	8005f12 <_printf_float+0x36e>
 8005eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eb0:	459a      	cmp	sl, r3
 8005eb2:	dc3a      	bgt.n	8005f2a <_printf_float+0x386>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	07da      	lsls	r2, r3, #31
 8005eb8:	d437      	bmi.n	8005f2a <_printf_float+0x386>
 8005eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ebc:	ebaa 0903 	sub.w	r9, sl, r3
 8005ec0:	9b06      	ldr	r3, [sp, #24]
 8005ec2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ec6:	4599      	cmp	r9, r3
 8005ec8:	bfa8      	it	ge
 8005eca:	4699      	movge	r9, r3
 8005ecc:	f1b9 0f00 	cmp.w	r9, #0
 8005ed0:	dc33      	bgt.n	8005f3a <_printf_float+0x396>
 8005ed2:	f04f 0800 	mov.w	r8, #0
 8005ed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eda:	f104 0b1a 	add.w	fp, r4, #26
 8005ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ee4:	eba3 0309 	sub.w	r3, r3, r9
 8005ee8:	4543      	cmp	r3, r8
 8005eea:	f77f af79 	ble.w	8005de0 <_printf_float+0x23c>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	465a      	mov	r2, fp
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b8      	blx	r7
 8005ef8:	3001      	adds	r0, #1
 8005efa:	f43f aeae 	beq.w	8005c5a <_printf_float+0xb6>
 8005efe:	f108 0801 	add.w	r8, r8, #1
 8005f02:	e7ec      	b.n	8005ede <_printf_float+0x33a>
 8005f04:	4642      	mov	r2, r8
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d1c2      	bne.n	8005e96 <_printf_float+0x2f2>
 8005f10:	e6a3      	b.n	8005c5a <_printf_float+0xb6>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	9206      	str	r2, [sp, #24]
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f ae9c 	beq.w	8005c5a <_printf_float+0xb6>
 8005f22:	9a06      	ldr	r2, [sp, #24]
 8005f24:	f10b 0b01 	add.w	fp, fp, #1
 8005f28:	e7bb      	b.n	8005ea2 <_printf_float+0x2fe>
 8005f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	d1c0      	bne.n	8005eba <_printf_float+0x316>
 8005f38:	e68f      	b.n	8005c5a <_printf_float+0xb6>
 8005f3a:	9a06      	ldr	r2, [sp, #24]
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	4442      	add	r2, r8
 8005f40:	4631      	mov	r1, r6
 8005f42:	4628      	mov	r0, r5
 8005f44:	47b8      	blx	r7
 8005f46:	3001      	adds	r0, #1
 8005f48:	d1c3      	bne.n	8005ed2 <_printf_float+0x32e>
 8005f4a:	e686      	b.n	8005c5a <_printf_float+0xb6>
 8005f4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f50:	f1ba 0f01 	cmp.w	sl, #1
 8005f54:	dc01      	bgt.n	8005f5a <_printf_float+0x3b6>
 8005f56:	07db      	lsls	r3, r3, #31
 8005f58:	d536      	bpl.n	8005fc8 <_printf_float+0x424>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	f43f ae78 	beq.w	8005c5a <_printf_float+0xb6>
 8005f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f ae70 	beq.w	8005c5a <_printf_float+0xb6>
 8005f7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2300      	movs	r3, #0
 8005f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f86:	f7fa fda7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f8a:	b9c0      	cbnz	r0, 8005fbe <_printf_float+0x41a>
 8005f8c:	4653      	mov	r3, sl
 8005f8e:	f108 0201 	add.w	r2, r8, #1
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d10c      	bne.n	8005fb6 <_printf_float+0x412>
 8005f9c:	e65d      	b.n	8005c5a <_printf_float+0xb6>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	465a      	mov	r2, fp
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f43f ae56 	beq.w	8005c5a <_printf_float+0xb6>
 8005fae:	f108 0801 	add.w	r8, r8, #1
 8005fb2:	45d0      	cmp	r8, sl
 8005fb4:	dbf3      	blt.n	8005f9e <_printf_float+0x3fa>
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005fbc:	e6df      	b.n	8005d7e <_printf_float+0x1da>
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	f104 0b1a 	add.w	fp, r4, #26
 8005fc6:	e7f4      	b.n	8005fb2 <_printf_float+0x40e>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4642      	mov	r2, r8
 8005fcc:	e7e1      	b.n	8005f92 <_printf_float+0x3ee>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	464a      	mov	r2, r9
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f43f ae3e 	beq.w	8005c5a <_printf_float+0xb6>
 8005fde:	f108 0801 	add.w	r8, r8, #1
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005fe6:	1a5b      	subs	r3, r3, r1
 8005fe8:	4543      	cmp	r3, r8
 8005fea:	dcf0      	bgt.n	8005fce <_printf_float+0x42a>
 8005fec:	e6fc      	b.n	8005de8 <_printf_float+0x244>
 8005fee:	f04f 0800 	mov.w	r8, #0
 8005ff2:	f104 0919 	add.w	r9, r4, #25
 8005ff6:	e7f4      	b.n	8005fe2 <_printf_float+0x43e>

08005ff8 <_printf_common>:
 8005ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	4616      	mov	r6, r2
 8005ffe:	4698      	mov	r8, r3
 8006000:	688a      	ldr	r2, [r1, #8]
 8006002:	690b      	ldr	r3, [r1, #16]
 8006004:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006008:	4293      	cmp	r3, r2
 800600a:	bfb8      	it	lt
 800600c:	4613      	movlt	r3, r2
 800600e:	6033      	str	r3, [r6, #0]
 8006010:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006014:	4607      	mov	r7, r0
 8006016:	460c      	mov	r4, r1
 8006018:	b10a      	cbz	r2, 800601e <_printf_common+0x26>
 800601a:	3301      	adds	r3, #1
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	0699      	lsls	r1, r3, #26
 8006022:	bf42      	ittt	mi
 8006024:	6833      	ldrmi	r3, [r6, #0]
 8006026:	3302      	addmi	r3, #2
 8006028:	6033      	strmi	r3, [r6, #0]
 800602a:	6825      	ldr	r5, [r4, #0]
 800602c:	f015 0506 	ands.w	r5, r5, #6
 8006030:	d106      	bne.n	8006040 <_printf_common+0x48>
 8006032:	f104 0a19 	add.w	sl, r4, #25
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	6832      	ldr	r2, [r6, #0]
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	42ab      	cmp	r3, r5
 800603e:	dc26      	bgt.n	800608e <_printf_common+0x96>
 8006040:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	3b00      	subs	r3, #0
 8006048:	bf18      	it	ne
 800604a:	2301      	movne	r3, #1
 800604c:	0692      	lsls	r2, r2, #26
 800604e:	d42b      	bmi.n	80060a8 <_printf_common+0xb0>
 8006050:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006054:	4641      	mov	r1, r8
 8006056:	4638      	mov	r0, r7
 8006058:	47c8      	blx	r9
 800605a:	3001      	adds	r0, #1
 800605c:	d01e      	beq.n	800609c <_printf_common+0xa4>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	f003 0306 	and.w	r3, r3, #6
 8006066:	2b04      	cmp	r3, #4
 8006068:	bf02      	ittt	eq
 800606a:	68e5      	ldreq	r5, [r4, #12]
 800606c:	6833      	ldreq	r3, [r6, #0]
 800606e:	1aed      	subeq	r5, r5, r3
 8006070:	68a3      	ldr	r3, [r4, #8]
 8006072:	bf0c      	ite	eq
 8006074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006078:	2500      	movne	r5, #0
 800607a:	4293      	cmp	r3, r2
 800607c:	bfc4      	itt	gt
 800607e:	1a9b      	subgt	r3, r3, r2
 8006080:	18ed      	addgt	r5, r5, r3
 8006082:	2600      	movs	r6, #0
 8006084:	341a      	adds	r4, #26
 8006086:	42b5      	cmp	r5, r6
 8006088:	d11a      	bne.n	80060c0 <_printf_common+0xc8>
 800608a:	2000      	movs	r0, #0
 800608c:	e008      	b.n	80060a0 <_printf_common+0xa8>
 800608e:	2301      	movs	r3, #1
 8006090:	4652      	mov	r2, sl
 8006092:	4641      	mov	r1, r8
 8006094:	4638      	mov	r0, r7
 8006096:	47c8      	blx	r9
 8006098:	3001      	adds	r0, #1
 800609a:	d103      	bne.n	80060a4 <_printf_common+0xac>
 800609c:	f04f 30ff 	mov.w	r0, #4294967295
 80060a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a4:	3501      	adds	r5, #1
 80060a6:	e7c6      	b.n	8006036 <_printf_common+0x3e>
 80060a8:	18e1      	adds	r1, r4, r3
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	2030      	movs	r0, #48	@ 0x30
 80060ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060b2:	4422      	add	r2, r4
 80060b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060bc:	3302      	adds	r3, #2
 80060be:	e7c7      	b.n	8006050 <_printf_common+0x58>
 80060c0:	2301      	movs	r3, #1
 80060c2:	4622      	mov	r2, r4
 80060c4:	4641      	mov	r1, r8
 80060c6:	4638      	mov	r0, r7
 80060c8:	47c8      	blx	r9
 80060ca:	3001      	adds	r0, #1
 80060cc:	d0e6      	beq.n	800609c <_printf_common+0xa4>
 80060ce:	3601      	adds	r6, #1
 80060d0:	e7d9      	b.n	8006086 <_printf_common+0x8e>
	...

080060d4 <_printf_i>:
 80060d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060d8:	7e0f      	ldrb	r7, [r1, #24]
 80060da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060dc:	2f78      	cmp	r7, #120	@ 0x78
 80060de:	4691      	mov	r9, r2
 80060e0:	4680      	mov	r8, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	469a      	mov	sl, r3
 80060e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ea:	d807      	bhi.n	80060fc <_printf_i+0x28>
 80060ec:	2f62      	cmp	r7, #98	@ 0x62
 80060ee:	d80a      	bhi.n	8006106 <_printf_i+0x32>
 80060f0:	2f00      	cmp	r7, #0
 80060f2:	f000 80d2 	beq.w	800629a <_printf_i+0x1c6>
 80060f6:	2f58      	cmp	r7, #88	@ 0x58
 80060f8:	f000 80b9 	beq.w	800626e <_printf_i+0x19a>
 80060fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006100:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006104:	e03a      	b.n	800617c <_printf_i+0xa8>
 8006106:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800610a:	2b15      	cmp	r3, #21
 800610c:	d8f6      	bhi.n	80060fc <_printf_i+0x28>
 800610e:	a101      	add	r1, pc, #4	@ (adr r1, 8006114 <_printf_i+0x40>)
 8006110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006114:	0800616d 	.word	0x0800616d
 8006118:	08006181 	.word	0x08006181
 800611c:	080060fd 	.word	0x080060fd
 8006120:	080060fd 	.word	0x080060fd
 8006124:	080060fd 	.word	0x080060fd
 8006128:	080060fd 	.word	0x080060fd
 800612c:	08006181 	.word	0x08006181
 8006130:	080060fd 	.word	0x080060fd
 8006134:	080060fd 	.word	0x080060fd
 8006138:	080060fd 	.word	0x080060fd
 800613c:	080060fd 	.word	0x080060fd
 8006140:	08006281 	.word	0x08006281
 8006144:	080061ab 	.word	0x080061ab
 8006148:	0800623b 	.word	0x0800623b
 800614c:	080060fd 	.word	0x080060fd
 8006150:	080060fd 	.word	0x080060fd
 8006154:	080062a3 	.word	0x080062a3
 8006158:	080060fd 	.word	0x080060fd
 800615c:	080061ab 	.word	0x080061ab
 8006160:	080060fd 	.word	0x080060fd
 8006164:	080060fd 	.word	0x080060fd
 8006168:	08006243 	.word	0x08006243
 800616c:	6833      	ldr	r3, [r6, #0]
 800616e:	1d1a      	adds	r2, r3, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6032      	str	r2, [r6, #0]
 8006174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006178:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800617c:	2301      	movs	r3, #1
 800617e:	e09d      	b.n	80062bc <_printf_i+0x1e8>
 8006180:	6833      	ldr	r3, [r6, #0]
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	1d19      	adds	r1, r3, #4
 8006186:	6031      	str	r1, [r6, #0]
 8006188:	0606      	lsls	r6, r0, #24
 800618a:	d501      	bpl.n	8006190 <_printf_i+0xbc>
 800618c:	681d      	ldr	r5, [r3, #0]
 800618e:	e003      	b.n	8006198 <_printf_i+0xc4>
 8006190:	0645      	lsls	r5, r0, #25
 8006192:	d5fb      	bpl.n	800618c <_printf_i+0xb8>
 8006194:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006198:	2d00      	cmp	r5, #0
 800619a:	da03      	bge.n	80061a4 <_printf_i+0xd0>
 800619c:	232d      	movs	r3, #45	@ 0x2d
 800619e:	426d      	negs	r5, r5
 80061a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a4:	4859      	ldr	r0, [pc, #356]	@ (800630c <_printf_i+0x238>)
 80061a6:	230a      	movs	r3, #10
 80061a8:	e011      	b.n	80061ce <_printf_i+0xfa>
 80061aa:	6821      	ldr	r1, [r4, #0]
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	0608      	lsls	r0, r1, #24
 80061b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80061b4:	d402      	bmi.n	80061bc <_printf_i+0xe8>
 80061b6:	0649      	lsls	r1, r1, #25
 80061b8:	bf48      	it	mi
 80061ba:	b2ad      	uxthmi	r5, r5
 80061bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80061be:	4853      	ldr	r0, [pc, #332]	@ (800630c <_printf_i+0x238>)
 80061c0:	6033      	str	r3, [r6, #0]
 80061c2:	bf14      	ite	ne
 80061c4:	230a      	movne	r3, #10
 80061c6:	2308      	moveq	r3, #8
 80061c8:	2100      	movs	r1, #0
 80061ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061ce:	6866      	ldr	r6, [r4, #4]
 80061d0:	60a6      	str	r6, [r4, #8]
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	bfa2      	ittt	ge
 80061d6:	6821      	ldrge	r1, [r4, #0]
 80061d8:	f021 0104 	bicge.w	r1, r1, #4
 80061dc:	6021      	strge	r1, [r4, #0]
 80061de:	b90d      	cbnz	r5, 80061e4 <_printf_i+0x110>
 80061e0:	2e00      	cmp	r6, #0
 80061e2:	d04b      	beq.n	800627c <_printf_i+0x1a8>
 80061e4:	4616      	mov	r6, r2
 80061e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061ea:	fb03 5711 	mls	r7, r3, r1, r5
 80061ee:	5dc7      	ldrb	r7, [r0, r7]
 80061f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061f4:	462f      	mov	r7, r5
 80061f6:	42bb      	cmp	r3, r7
 80061f8:	460d      	mov	r5, r1
 80061fa:	d9f4      	bls.n	80061e6 <_printf_i+0x112>
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d10b      	bne.n	8006218 <_printf_i+0x144>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	07df      	lsls	r7, r3, #31
 8006204:	d508      	bpl.n	8006218 <_printf_i+0x144>
 8006206:	6923      	ldr	r3, [r4, #16]
 8006208:	6861      	ldr	r1, [r4, #4]
 800620a:	4299      	cmp	r1, r3
 800620c:	bfde      	ittt	le
 800620e:	2330      	movle	r3, #48	@ 0x30
 8006210:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006214:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006218:	1b92      	subs	r2, r2, r6
 800621a:	6122      	str	r2, [r4, #16]
 800621c:	f8cd a000 	str.w	sl, [sp]
 8006220:	464b      	mov	r3, r9
 8006222:	aa03      	add	r2, sp, #12
 8006224:	4621      	mov	r1, r4
 8006226:	4640      	mov	r0, r8
 8006228:	f7ff fee6 	bl	8005ff8 <_printf_common>
 800622c:	3001      	adds	r0, #1
 800622e:	d14a      	bne.n	80062c6 <_printf_i+0x1f2>
 8006230:	f04f 30ff 	mov.w	r0, #4294967295
 8006234:	b004      	add	sp, #16
 8006236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f043 0320 	orr.w	r3, r3, #32
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	4833      	ldr	r0, [pc, #204]	@ (8006310 <_printf_i+0x23c>)
 8006244:	2778      	movs	r7, #120	@ 0x78
 8006246:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	6831      	ldr	r1, [r6, #0]
 800624e:	061f      	lsls	r7, r3, #24
 8006250:	f851 5b04 	ldr.w	r5, [r1], #4
 8006254:	d402      	bmi.n	800625c <_printf_i+0x188>
 8006256:	065f      	lsls	r7, r3, #25
 8006258:	bf48      	it	mi
 800625a:	b2ad      	uxthmi	r5, r5
 800625c:	6031      	str	r1, [r6, #0]
 800625e:	07d9      	lsls	r1, r3, #31
 8006260:	bf44      	itt	mi
 8006262:	f043 0320 	orrmi.w	r3, r3, #32
 8006266:	6023      	strmi	r3, [r4, #0]
 8006268:	b11d      	cbz	r5, 8006272 <_printf_i+0x19e>
 800626a:	2310      	movs	r3, #16
 800626c:	e7ac      	b.n	80061c8 <_printf_i+0xf4>
 800626e:	4827      	ldr	r0, [pc, #156]	@ (800630c <_printf_i+0x238>)
 8006270:	e7e9      	b.n	8006246 <_printf_i+0x172>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	f023 0320 	bic.w	r3, r3, #32
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	e7f6      	b.n	800626a <_printf_i+0x196>
 800627c:	4616      	mov	r6, r2
 800627e:	e7bd      	b.n	80061fc <_printf_i+0x128>
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	6825      	ldr	r5, [r4, #0]
 8006284:	6961      	ldr	r1, [r4, #20]
 8006286:	1d18      	adds	r0, r3, #4
 8006288:	6030      	str	r0, [r6, #0]
 800628a:	062e      	lsls	r6, r5, #24
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	d501      	bpl.n	8006294 <_printf_i+0x1c0>
 8006290:	6019      	str	r1, [r3, #0]
 8006292:	e002      	b.n	800629a <_printf_i+0x1c6>
 8006294:	0668      	lsls	r0, r5, #25
 8006296:	d5fb      	bpl.n	8006290 <_printf_i+0x1bc>
 8006298:	8019      	strh	r1, [r3, #0]
 800629a:	2300      	movs	r3, #0
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	4616      	mov	r6, r2
 80062a0:	e7bc      	b.n	800621c <_printf_i+0x148>
 80062a2:	6833      	ldr	r3, [r6, #0]
 80062a4:	1d1a      	adds	r2, r3, #4
 80062a6:	6032      	str	r2, [r6, #0]
 80062a8:	681e      	ldr	r6, [r3, #0]
 80062aa:	6862      	ldr	r2, [r4, #4]
 80062ac:	2100      	movs	r1, #0
 80062ae:	4630      	mov	r0, r6
 80062b0:	f7f9 ff96 	bl	80001e0 <memchr>
 80062b4:	b108      	cbz	r0, 80062ba <_printf_i+0x1e6>
 80062b6:	1b80      	subs	r0, r0, r6
 80062b8:	6060      	str	r0, [r4, #4]
 80062ba:	6863      	ldr	r3, [r4, #4]
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	2300      	movs	r3, #0
 80062c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c4:	e7aa      	b.n	800621c <_printf_i+0x148>
 80062c6:	6923      	ldr	r3, [r4, #16]
 80062c8:	4632      	mov	r2, r6
 80062ca:	4649      	mov	r1, r9
 80062cc:	4640      	mov	r0, r8
 80062ce:	47d0      	blx	sl
 80062d0:	3001      	adds	r0, #1
 80062d2:	d0ad      	beq.n	8006230 <_printf_i+0x15c>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	079b      	lsls	r3, r3, #30
 80062d8:	d413      	bmi.n	8006302 <_printf_i+0x22e>
 80062da:	68e0      	ldr	r0, [r4, #12]
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	4298      	cmp	r0, r3
 80062e0:	bfb8      	it	lt
 80062e2:	4618      	movlt	r0, r3
 80062e4:	e7a6      	b.n	8006234 <_printf_i+0x160>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4632      	mov	r2, r6
 80062ea:	4649      	mov	r1, r9
 80062ec:	4640      	mov	r0, r8
 80062ee:	47d0      	blx	sl
 80062f0:	3001      	adds	r0, #1
 80062f2:	d09d      	beq.n	8006230 <_printf_i+0x15c>
 80062f4:	3501      	adds	r5, #1
 80062f6:	68e3      	ldr	r3, [r4, #12]
 80062f8:	9903      	ldr	r1, [sp, #12]
 80062fa:	1a5b      	subs	r3, r3, r1
 80062fc:	42ab      	cmp	r3, r5
 80062fe:	dcf2      	bgt.n	80062e6 <_printf_i+0x212>
 8006300:	e7eb      	b.n	80062da <_printf_i+0x206>
 8006302:	2500      	movs	r5, #0
 8006304:	f104 0619 	add.w	r6, r4, #25
 8006308:	e7f5      	b.n	80062f6 <_printf_i+0x222>
 800630a:	bf00      	nop
 800630c:	0800926e 	.word	0x0800926e
 8006310:	0800927f 	.word	0x0800927f

08006314 <std>:
 8006314:	2300      	movs	r3, #0
 8006316:	b510      	push	{r4, lr}
 8006318:	4604      	mov	r4, r0
 800631a:	e9c0 3300 	strd	r3, r3, [r0]
 800631e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006322:	6083      	str	r3, [r0, #8]
 8006324:	8181      	strh	r1, [r0, #12]
 8006326:	6643      	str	r3, [r0, #100]	@ 0x64
 8006328:	81c2      	strh	r2, [r0, #14]
 800632a:	6183      	str	r3, [r0, #24]
 800632c:	4619      	mov	r1, r3
 800632e:	2208      	movs	r2, #8
 8006330:	305c      	adds	r0, #92	@ 0x5c
 8006332:	f000 f8f4 	bl	800651e <memset>
 8006336:	4b0d      	ldr	r3, [pc, #52]	@ (800636c <std+0x58>)
 8006338:	6263      	str	r3, [r4, #36]	@ 0x24
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <std+0x5c>)
 800633c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800633e:	4b0d      	ldr	r3, [pc, #52]	@ (8006374 <std+0x60>)
 8006340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006342:	4b0d      	ldr	r3, [pc, #52]	@ (8006378 <std+0x64>)
 8006344:	6323      	str	r3, [r4, #48]	@ 0x30
 8006346:	4b0d      	ldr	r3, [pc, #52]	@ (800637c <std+0x68>)
 8006348:	6224      	str	r4, [r4, #32]
 800634a:	429c      	cmp	r4, r3
 800634c:	d006      	beq.n	800635c <std+0x48>
 800634e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006352:	4294      	cmp	r4, r2
 8006354:	d002      	beq.n	800635c <std+0x48>
 8006356:	33d0      	adds	r3, #208	@ 0xd0
 8006358:	429c      	cmp	r4, r3
 800635a:	d105      	bne.n	8006368 <std+0x54>
 800635c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006364:	f000 b958 	b.w	8006618 <__retarget_lock_init_recursive>
 8006368:	bd10      	pop	{r4, pc}
 800636a:	bf00      	nop
 800636c:	08006499 	.word	0x08006499
 8006370:	080064bb 	.word	0x080064bb
 8006374:	080064f3 	.word	0x080064f3
 8006378:	08006517 	.word	0x08006517
 800637c:	200004c8 	.word	0x200004c8

08006380 <stdio_exit_handler>:
 8006380:	4a02      	ldr	r2, [pc, #8]	@ (800638c <stdio_exit_handler+0xc>)
 8006382:	4903      	ldr	r1, [pc, #12]	@ (8006390 <stdio_exit_handler+0x10>)
 8006384:	4803      	ldr	r0, [pc, #12]	@ (8006394 <stdio_exit_handler+0x14>)
 8006386:	f000 b869 	b.w	800645c <_fwalk_sglue>
 800638a:	bf00      	nop
 800638c:	20000010 	.word	0x20000010
 8006390:	08007cc5 	.word	0x08007cc5
 8006394:	20000020 	.word	0x20000020

08006398 <cleanup_stdio>:
 8006398:	6841      	ldr	r1, [r0, #4]
 800639a:	4b0c      	ldr	r3, [pc, #48]	@ (80063cc <cleanup_stdio+0x34>)
 800639c:	4299      	cmp	r1, r3
 800639e:	b510      	push	{r4, lr}
 80063a0:	4604      	mov	r4, r0
 80063a2:	d001      	beq.n	80063a8 <cleanup_stdio+0x10>
 80063a4:	f001 fc8e 	bl	8007cc4 <_fflush_r>
 80063a8:	68a1      	ldr	r1, [r4, #8]
 80063aa:	4b09      	ldr	r3, [pc, #36]	@ (80063d0 <cleanup_stdio+0x38>)
 80063ac:	4299      	cmp	r1, r3
 80063ae:	d002      	beq.n	80063b6 <cleanup_stdio+0x1e>
 80063b0:	4620      	mov	r0, r4
 80063b2:	f001 fc87 	bl	8007cc4 <_fflush_r>
 80063b6:	68e1      	ldr	r1, [r4, #12]
 80063b8:	4b06      	ldr	r3, [pc, #24]	@ (80063d4 <cleanup_stdio+0x3c>)
 80063ba:	4299      	cmp	r1, r3
 80063bc:	d004      	beq.n	80063c8 <cleanup_stdio+0x30>
 80063be:	4620      	mov	r0, r4
 80063c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c4:	f001 bc7e 	b.w	8007cc4 <_fflush_r>
 80063c8:	bd10      	pop	{r4, pc}
 80063ca:	bf00      	nop
 80063cc:	200004c8 	.word	0x200004c8
 80063d0:	20000530 	.word	0x20000530
 80063d4:	20000598 	.word	0x20000598

080063d8 <global_stdio_init.part.0>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	4b0b      	ldr	r3, [pc, #44]	@ (8006408 <global_stdio_init.part.0+0x30>)
 80063dc:	4c0b      	ldr	r4, [pc, #44]	@ (800640c <global_stdio_init.part.0+0x34>)
 80063de:	4a0c      	ldr	r2, [pc, #48]	@ (8006410 <global_stdio_init.part.0+0x38>)
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	4620      	mov	r0, r4
 80063e4:	2200      	movs	r2, #0
 80063e6:	2104      	movs	r1, #4
 80063e8:	f7ff ff94 	bl	8006314 <std>
 80063ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063f0:	2201      	movs	r2, #1
 80063f2:	2109      	movs	r1, #9
 80063f4:	f7ff ff8e 	bl	8006314 <std>
 80063f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063fc:	2202      	movs	r2, #2
 80063fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006402:	2112      	movs	r1, #18
 8006404:	f7ff bf86 	b.w	8006314 <std>
 8006408:	20000600 	.word	0x20000600
 800640c:	200004c8 	.word	0x200004c8
 8006410:	08006381 	.word	0x08006381

08006414 <__sfp_lock_acquire>:
 8006414:	4801      	ldr	r0, [pc, #4]	@ (800641c <__sfp_lock_acquire+0x8>)
 8006416:	f000 b900 	b.w	800661a <__retarget_lock_acquire_recursive>
 800641a:	bf00      	nop
 800641c:	20000609 	.word	0x20000609

08006420 <__sfp_lock_release>:
 8006420:	4801      	ldr	r0, [pc, #4]	@ (8006428 <__sfp_lock_release+0x8>)
 8006422:	f000 b8fb 	b.w	800661c <__retarget_lock_release_recursive>
 8006426:	bf00      	nop
 8006428:	20000609 	.word	0x20000609

0800642c <__sinit>:
 800642c:	b510      	push	{r4, lr}
 800642e:	4604      	mov	r4, r0
 8006430:	f7ff fff0 	bl	8006414 <__sfp_lock_acquire>
 8006434:	6a23      	ldr	r3, [r4, #32]
 8006436:	b11b      	cbz	r3, 8006440 <__sinit+0x14>
 8006438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643c:	f7ff bff0 	b.w	8006420 <__sfp_lock_release>
 8006440:	4b04      	ldr	r3, [pc, #16]	@ (8006454 <__sinit+0x28>)
 8006442:	6223      	str	r3, [r4, #32]
 8006444:	4b04      	ldr	r3, [pc, #16]	@ (8006458 <__sinit+0x2c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f5      	bne.n	8006438 <__sinit+0xc>
 800644c:	f7ff ffc4 	bl	80063d8 <global_stdio_init.part.0>
 8006450:	e7f2      	b.n	8006438 <__sinit+0xc>
 8006452:	bf00      	nop
 8006454:	08006399 	.word	0x08006399
 8006458:	20000600 	.word	0x20000600

0800645c <_fwalk_sglue>:
 800645c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006460:	4607      	mov	r7, r0
 8006462:	4688      	mov	r8, r1
 8006464:	4614      	mov	r4, r2
 8006466:	2600      	movs	r6, #0
 8006468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800646c:	f1b9 0901 	subs.w	r9, r9, #1
 8006470:	d505      	bpl.n	800647e <_fwalk_sglue+0x22>
 8006472:	6824      	ldr	r4, [r4, #0]
 8006474:	2c00      	cmp	r4, #0
 8006476:	d1f7      	bne.n	8006468 <_fwalk_sglue+0xc>
 8006478:	4630      	mov	r0, r6
 800647a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d907      	bls.n	8006494 <_fwalk_sglue+0x38>
 8006484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006488:	3301      	adds	r3, #1
 800648a:	d003      	beq.n	8006494 <_fwalk_sglue+0x38>
 800648c:	4629      	mov	r1, r5
 800648e:	4638      	mov	r0, r7
 8006490:	47c0      	blx	r8
 8006492:	4306      	orrs	r6, r0
 8006494:	3568      	adds	r5, #104	@ 0x68
 8006496:	e7e9      	b.n	800646c <_fwalk_sglue+0x10>

08006498 <__sread>:
 8006498:	b510      	push	{r4, lr}
 800649a:	460c      	mov	r4, r1
 800649c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a0:	f000 f86c 	bl	800657c <_read_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	bfab      	itete	ge
 80064a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064aa:	89a3      	ldrhlt	r3, [r4, #12]
 80064ac:	181b      	addge	r3, r3, r0
 80064ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064b2:	bfac      	ite	ge
 80064b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064b6:	81a3      	strhlt	r3, [r4, #12]
 80064b8:	bd10      	pop	{r4, pc}

080064ba <__swrite>:
 80064ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064be:	461f      	mov	r7, r3
 80064c0:	898b      	ldrh	r3, [r1, #12]
 80064c2:	05db      	lsls	r3, r3, #23
 80064c4:	4605      	mov	r5, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	4616      	mov	r6, r2
 80064ca:	d505      	bpl.n	80064d8 <__swrite+0x1e>
 80064cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d0:	2302      	movs	r3, #2
 80064d2:	2200      	movs	r2, #0
 80064d4:	f000 f840 	bl	8006558 <_lseek_r>
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	4632      	mov	r2, r6
 80064e6:	463b      	mov	r3, r7
 80064e8:	4628      	mov	r0, r5
 80064ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ee:	f000 b857 	b.w	80065a0 <_write_r>

080064f2 <__sseek>:
 80064f2:	b510      	push	{r4, lr}
 80064f4:	460c      	mov	r4, r1
 80064f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fa:	f000 f82d 	bl	8006558 <_lseek_r>
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	bf15      	itete	ne
 8006504:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006506:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800650a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800650e:	81a3      	strheq	r3, [r4, #12]
 8006510:	bf18      	it	ne
 8006512:	81a3      	strhne	r3, [r4, #12]
 8006514:	bd10      	pop	{r4, pc}

08006516 <__sclose>:
 8006516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651a:	f000 b80d 	b.w	8006538 <_close_r>

0800651e <memset>:
 800651e:	4402      	add	r2, r0
 8006520:	4603      	mov	r3, r0
 8006522:	4293      	cmp	r3, r2
 8006524:	d100      	bne.n	8006528 <memset+0xa>
 8006526:	4770      	bx	lr
 8006528:	f803 1b01 	strb.w	r1, [r3], #1
 800652c:	e7f9      	b.n	8006522 <memset+0x4>
	...

08006530 <_localeconv_r>:
 8006530:	4800      	ldr	r0, [pc, #0]	@ (8006534 <_localeconv_r+0x4>)
 8006532:	4770      	bx	lr
 8006534:	2000015c 	.word	0x2000015c

08006538 <_close_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4d06      	ldr	r5, [pc, #24]	@ (8006554 <_close_r+0x1c>)
 800653c:	2300      	movs	r3, #0
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	602b      	str	r3, [r5, #0]
 8006544:	f7fb feaa 	bl	800229c <_close>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_close_r+0x1a>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_close_r+0x1a>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	20000604 	.word	0x20000604

08006558 <_lseek_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4d07      	ldr	r5, [pc, #28]	@ (8006578 <_lseek_r+0x20>)
 800655c:	4604      	mov	r4, r0
 800655e:	4608      	mov	r0, r1
 8006560:	4611      	mov	r1, r2
 8006562:	2200      	movs	r2, #0
 8006564:	602a      	str	r2, [r5, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	f7fb febf 	bl	80022ea <_lseek>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_lseek_r+0x1e>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_lseek_r+0x1e>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	20000604 	.word	0x20000604

0800657c <_read_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4d07      	ldr	r5, [pc, #28]	@ (800659c <_read_r+0x20>)
 8006580:	4604      	mov	r4, r0
 8006582:	4608      	mov	r0, r1
 8006584:	4611      	mov	r1, r2
 8006586:	2200      	movs	r2, #0
 8006588:	602a      	str	r2, [r5, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	f7fb fe4d 	bl	800222a <_read>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d102      	bne.n	800659a <_read_r+0x1e>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	b103      	cbz	r3, 800659a <_read_r+0x1e>
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	20000604 	.word	0x20000604

080065a0 <_write_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d07      	ldr	r5, [pc, #28]	@ (80065c0 <_write_r+0x20>)
 80065a4:	4604      	mov	r4, r0
 80065a6:	4608      	mov	r0, r1
 80065a8:	4611      	mov	r1, r2
 80065aa:	2200      	movs	r2, #0
 80065ac:	602a      	str	r2, [r5, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f7fb fe58 	bl	8002264 <_write>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_write_r+0x1e>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_write_r+0x1e>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	20000604 	.word	0x20000604

080065c4 <__errno>:
 80065c4:	4b01      	ldr	r3, [pc, #4]	@ (80065cc <__errno+0x8>)
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	2000001c 	.word	0x2000001c

080065d0 <__libc_init_array>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006608 <__libc_init_array+0x38>)
 80065d4:	4c0d      	ldr	r4, [pc, #52]	@ (800660c <__libc_init_array+0x3c>)
 80065d6:	1b64      	subs	r4, r4, r5
 80065d8:	10a4      	asrs	r4, r4, #2
 80065da:	2600      	movs	r6, #0
 80065dc:	42a6      	cmp	r6, r4
 80065de:	d109      	bne.n	80065f4 <__libc_init_array+0x24>
 80065e0:	4d0b      	ldr	r5, [pc, #44]	@ (8006610 <__libc_init_array+0x40>)
 80065e2:	4c0c      	ldr	r4, [pc, #48]	@ (8006614 <__libc_init_array+0x44>)
 80065e4:	f002 fe1a 	bl	800921c <_init>
 80065e8:	1b64      	subs	r4, r4, r5
 80065ea:	10a4      	asrs	r4, r4, #2
 80065ec:	2600      	movs	r6, #0
 80065ee:	42a6      	cmp	r6, r4
 80065f0:	d105      	bne.n	80065fe <__libc_init_array+0x2e>
 80065f2:	bd70      	pop	{r4, r5, r6, pc}
 80065f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f8:	4798      	blx	r3
 80065fa:	3601      	adds	r6, #1
 80065fc:	e7ee      	b.n	80065dc <__libc_init_array+0xc>
 80065fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006602:	4798      	blx	r3
 8006604:	3601      	adds	r6, #1
 8006606:	e7f2      	b.n	80065ee <__libc_init_array+0x1e>
 8006608:	08009608 	.word	0x08009608
 800660c:	08009608 	.word	0x08009608
 8006610:	08009608 	.word	0x08009608
 8006614:	0800960c 	.word	0x0800960c

08006618 <__retarget_lock_init_recursive>:
 8006618:	4770      	bx	lr

0800661a <__retarget_lock_acquire_recursive>:
 800661a:	4770      	bx	lr

0800661c <__retarget_lock_release_recursive>:
 800661c:	4770      	bx	lr

0800661e <quorem>:
 800661e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006622:	6903      	ldr	r3, [r0, #16]
 8006624:	690c      	ldr	r4, [r1, #16]
 8006626:	42a3      	cmp	r3, r4
 8006628:	4607      	mov	r7, r0
 800662a:	db7e      	blt.n	800672a <quorem+0x10c>
 800662c:	3c01      	subs	r4, #1
 800662e:	f101 0814 	add.w	r8, r1, #20
 8006632:	00a3      	lsls	r3, r4, #2
 8006634:	f100 0514 	add.w	r5, r0, #20
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006644:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006648:	3301      	adds	r3, #1
 800664a:	429a      	cmp	r2, r3
 800664c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006650:	fbb2 f6f3 	udiv	r6, r2, r3
 8006654:	d32e      	bcc.n	80066b4 <quorem+0x96>
 8006656:	f04f 0a00 	mov.w	sl, #0
 800665a:	46c4      	mov	ip, r8
 800665c:	46ae      	mov	lr, r5
 800665e:	46d3      	mov	fp, sl
 8006660:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006664:	b298      	uxth	r0, r3
 8006666:	fb06 a000 	mla	r0, r6, r0, sl
 800666a:	0c02      	lsrs	r2, r0, #16
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	fb06 2303 	mla	r3, r6, r3, r2
 8006672:	f8de 2000 	ldr.w	r2, [lr]
 8006676:	b280      	uxth	r0, r0
 8006678:	b292      	uxth	r2, r2
 800667a:	1a12      	subs	r2, r2, r0
 800667c:	445a      	add	r2, fp
 800667e:	f8de 0000 	ldr.w	r0, [lr]
 8006682:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006686:	b29b      	uxth	r3, r3
 8006688:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800668c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006690:	b292      	uxth	r2, r2
 8006692:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006696:	45e1      	cmp	r9, ip
 8006698:	f84e 2b04 	str.w	r2, [lr], #4
 800669c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80066a0:	d2de      	bcs.n	8006660 <quorem+0x42>
 80066a2:	9b00      	ldr	r3, [sp, #0]
 80066a4:	58eb      	ldr	r3, [r5, r3]
 80066a6:	b92b      	cbnz	r3, 80066b4 <quorem+0x96>
 80066a8:	9b01      	ldr	r3, [sp, #4]
 80066aa:	3b04      	subs	r3, #4
 80066ac:	429d      	cmp	r5, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	d32f      	bcc.n	8006712 <quorem+0xf4>
 80066b2:	613c      	str	r4, [r7, #16]
 80066b4:	4638      	mov	r0, r7
 80066b6:	f001 f979 	bl	80079ac <__mcmp>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	db25      	blt.n	800670a <quorem+0xec>
 80066be:	4629      	mov	r1, r5
 80066c0:	2000      	movs	r0, #0
 80066c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80066c6:	f8d1 c000 	ldr.w	ip, [r1]
 80066ca:	fa1f fe82 	uxth.w	lr, r2
 80066ce:	fa1f f38c 	uxth.w	r3, ip
 80066d2:	eba3 030e 	sub.w	r3, r3, lr
 80066d6:	4403      	add	r3, r0
 80066d8:	0c12      	lsrs	r2, r2, #16
 80066da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80066de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066e8:	45c1      	cmp	r9, r8
 80066ea:	f841 3b04 	str.w	r3, [r1], #4
 80066ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066f2:	d2e6      	bcs.n	80066c2 <quorem+0xa4>
 80066f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066fc:	b922      	cbnz	r2, 8006708 <quorem+0xea>
 80066fe:	3b04      	subs	r3, #4
 8006700:	429d      	cmp	r5, r3
 8006702:	461a      	mov	r2, r3
 8006704:	d30b      	bcc.n	800671e <quorem+0x100>
 8006706:	613c      	str	r4, [r7, #16]
 8006708:	3601      	adds	r6, #1
 800670a:	4630      	mov	r0, r6
 800670c:	b003      	add	sp, #12
 800670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	3b04      	subs	r3, #4
 8006716:	2a00      	cmp	r2, #0
 8006718:	d1cb      	bne.n	80066b2 <quorem+0x94>
 800671a:	3c01      	subs	r4, #1
 800671c:	e7c6      	b.n	80066ac <quorem+0x8e>
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	3b04      	subs	r3, #4
 8006722:	2a00      	cmp	r2, #0
 8006724:	d1ef      	bne.n	8006706 <quorem+0xe8>
 8006726:	3c01      	subs	r4, #1
 8006728:	e7ea      	b.n	8006700 <quorem+0xe2>
 800672a:	2000      	movs	r0, #0
 800672c:	e7ee      	b.n	800670c <quorem+0xee>
	...

08006730 <_dtoa_r>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	69c7      	ldr	r7, [r0, #28]
 8006736:	b099      	sub	sp, #100	@ 0x64
 8006738:	ed8d 0b02 	vstr	d0, [sp, #8]
 800673c:	ec55 4b10 	vmov	r4, r5, d0
 8006740:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006742:	9109      	str	r1, [sp, #36]	@ 0x24
 8006744:	4683      	mov	fp, r0
 8006746:	920e      	str	r2, [sp, #56]	@ 0x38
 8006748:	9313      	str	r3, [sp, #76]	@ 0x4c
 800674a:	b97f      	cbnz	r7, 800676c <_dtoa_r+0x3c>
 800674c:	2010      	movs	r0, #16
 800674e:	f000 fdfd 	bl	800734c <malloc>
 8006752:	4602      	mov	r2, r0
 8006754:	f8cb 001c 	str.w	r0, [fp, #28]
 8006758:	b920      	cbnz	r0, 8006764 <_dtoa_r+0x34>
 800675a:	4ba7      	ldr	r3, [pc, #668]	@ (80069f8 <_dtoa_r+0x2c8>)
 800675c:	21ef      	movs	r1, #239	@ 0xef
 800675e:	48a7      	ldr	r0, [pc, #668]	@ (80069fc <_dtoa_r+0x2cc>)
 8006760:	f001 faf6 	bl	8007d50 <__assert_func>
 8006764:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006768:	6007      	str	r7, [r0, #0]
 800676a:	60c7      	str	r7, [r0, #12]
 800676c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006770:	6819      	ldr	r1, [r3, #0]
 8006772:	b159      	cbz	r1, 800678c <_dtoa_r+0x5c>
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	604a      	str	r2, [r1, #4]
 8006778:	2301      	movs	r3, #1
 800677a:	4093      	lsls	r3, r2
 800677c:	608b      	str	r3, [r1, #8]
 800677e:	4658      	mov	r0, fp
 8006780:	f000 feda 	bl	8007538 <_Bfree>
 8006784:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	1e2b      	subs	r3, r5, #0
 800678e:	bfb9      	ittee	lt
 8006790:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006794:	9303      	strlt	r3, [sp, #12]
 8006796:	2300      	movge	r3, #0
 8006798:	6033      	strge	r3, [r6, #0]
 800679a:	9f03      	ldr	r7, [sp, #12]
 800679c:	4b98      	ldr	r3, [pc, #608]	@ (8006a00 <_dtoa_r+0x2d0>)
 800679e:	bfbc      	itt	lt
 80067a0:	2201      	movlt	r2, #1
 80067a2:	6032      	strlt	r2, [r6, #0]
 80067a4:	43bb      	bics	r3, r7
 80067a6:	d112      	bne.n	80067ce <_dtoa_r+0x9e>
 80067a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067b4:	4323      	orrs	r3, r4
 80067b6:	f000 854d 	beq.w	8007254 <_dtoa_r+0xb24>
 80067ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a14 <_dtoa_r+0x2e4>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 854f 	beq.w	8007264 <_dtoa_r+0xb34>
 80067c6:	f10a 0303 	add.w	r3, sl, #3
 80067ca:	f000 bd49 	b.w	8007260 <_dtoa_r+0xb30>
 80067ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067d2:	2200      	movs	r2, #0
 80067d4:	ec51 0b17 	vmov	r0, r1, d7
 80067d8:	2300      	movs	r3, #0
 80067da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80067de:	f7fa f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 80067e2:	4680      	mov	r8, r0
 80067e4:	b158      	cbz	r0, 80067fe <_dtoa_r+0xce>
 80067e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067e8:	2301      	movs	r3, #1
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067ee:	b113      	cbz	r3, 80067f6 <_dtoa_r+0xc6>
 80067f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80067f2:	4b84      	ldr	r3, [pc, #528]	@ (8006a04 <_dtoa_r+0x2d4>)
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006a18 <_dtoa_r+0x2e8>
 80067fa:	f000 bd33 	b.w	8007264 <_dtoa_r+0xb34>
 80067fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006802:	aa16      	add	r2, sp, #88	@ 0x58
 8006804:	a917      	add	r1, sp, #92	@ 0x5c
 8006806:	4658      	mov	r0, fp
 8006808:	f001 f980 	bl	8007b0c <__d2b>
 800680c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006810:	4681      	mov	r9, r0
 8006812:	2e00      	cmp	r6, #0
 8006814:	d077      	beq.n	8006906 <_dtoa_r+0x1d6>
 8006816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006818:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800681c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006824:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006828:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800682c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006830:	4619      	mov	r1, r3
 8006832:	2200      	movs	r2, #0
 8006834:	4b74      	ldr	r3, [pc, #464]	@ (8006a08 <_dtoa_r+0x2d8>)
 8006836:	f7f9 fd2f 	bl	8000298 <__aeabi_dsub>
 800683a:	a369      	add	r3, pc, #420	@ (adr r3, 80069e0 <_dtoa_r+0x2b0>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 fee2 	bl	8000608 <__aeabi_dmul>
 8006844:	a368      	add	r3, pc, #416	@ (adr r3, 80069e8 <_dtoa_r+0x2b8>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f7f9 fd27 	bl	800029c <__adddf3>
 800684e:	4604      	mov	r4, r0
 8006850:	4630      	mov	r0, r6
 8006852:	460d      	mov	r5, r1
 8006854:	f7f9 fe6e 	bl	8000534 <__aeabi_i2d>
 8006858:	a365      	add	r3, pc, #404	@ (adr r3, 80069f0 <_dtoa_r+0x2c0>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f7f9 fed3 	bl	8000608 <__aeabi_dmul>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f7f9 fd17 	bl	800029c <__adddf3>
 800686e:	4604      	mov	r4, r0
 8006870:	460d      	mov	r5, r1
 8006872:	f7fa f979 	bl	8000b68 <__aeabi_d2iz>
 8006876:	2200      	movs	r2, #0
 8006878:	4607      	mov	r7, r0
 800687a:	2300      	movs	r3, #0
 800687c:	4620      	mov	r0, r4
 800687e:	4629      	mov	r1, r5
 8006880:	f7fa f934 	bl	8000aec <__aeabi_dcmplt>
 8006884:	b140      	cbz	r0, 8006898 <_dtoa_r+0x168>
 8006886:	4638      	mov	r0, r7
 8006888:	f7f9 fe54 	bl	8000534 <__aeabi_i2d>
 800688c:	4622      	mov	r2, r4
 800688e:	462b      	mov	r3, r5
 8006890:	f7fa f922 	bl	8000ad8 <__aeabi_dcmpeq>
 8006894:	b900      	cbnz	r0, 8006898 <_dtoa_r+0x168>
 8006896:	3f01      	subs	r7, #1
 8006898:	2f16      	cmp	r7, #22
 800689a:	d851      	bhi.n	8006940 <_dtoa_r+0x210>
 800689c:	4b5b      	ldr	r3, [pc, #364]	@ (8006a0c <_dtoa_r+0x2dc>)
 800689e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068aa:	f7fa f91f 	bl	8000aec <__aeabi_dcmplt>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d048      	beq.n	8006944 <_dtoa_r+0x214>
 80068b2:	3f01      	subs	r7, #1
 80068b4:	2300      	movs	r3, #0
 80068b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80068b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80068ba:	1b9b      	subs	r3, r3, r6
 80068bc:	1e5a      	subs	r2, r3, #1
 80068be:	bf44      	itt	mi
 80068c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80068c4:	2300      	movmi	r3, #0
 80068c6:	9208      	str	r2, [sp, #32]
 80068c8:	bf54      	ite	pl
 80068ca:	f04f 0800 	movpl.w	r8, #0
 80068ce:	9308      	strmi	r3, [sp, #32]
 80068d0:	2f00      	cmp	r7, #0
 80068d2:	db39      	blt.n	8006948 <_dtoa_r+0x218>
 80068d4:	9b08      	ldr	r3, [sp, #32]
 80068d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80068d8:	443b      	add	r3, r7
 80068da:	9308      	str	r3, [sp, #32]
 80068dc:	2300      	movs	r3, #0
 80068de:	930a      	str	r3, [sp, #40]	@ 0x28
 80068e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e2:	2b09      	cmp	r3, #9
 80068e4:	d864      	bhi.n	80069b0 <_dtoa_r+0x280>
 80068e6:	2b05      	cmp	r3, #5
 80068e8:	bfc4      	itt	gt
 80068ea:	3b04      	subgt	r3, #4
 80068ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80068ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f0:	f1a3 0302 	sub.w	r3, r3, #2
 80068f4:	bfcc      	ite	gt
 80068f6:	2400      	movgt	r4, #0
 80068f8:	2401      	movle	r4, #1
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d863      	bhi.n	80069c6 <_dtoa_r+0x296>
 80068fe:	e8df f003 	tbb	[pc, r3]
 8006902:	372a      	.short	0x372a
 8006904:	5535      	.short	0x5535
 8006906:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800690a:	441e      	add	r6, r3
 800690c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006910:	2b20      	cmp	r3, #32
 8006912:	bfc1      	itttt	gt
 8006914:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006918:	409f      	lslgt	r7, r3
 800691a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800691e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006922:	bfd6      	itet	le
 8006924:	f1c3 0320 	rsble	r3, r3, #32
 8006928:	ea47 0003 	orrgt.w	r0, r7, r3
 800692c:	fa04 f003 	lslle.w	r0, r4, r3
 8006930:	f7f9 fdf0 	bl	8000514 <__aeabi_ui2d>
 8006934:	2201      	movs	r2, #1
 8006936:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800693a:	3e01      	subs	r6, #1
 800693c:	9214      	str	r2, [sp, #80]	@ 0x50
 800693e:	e777      	b.n	8006830 <_dtoa_r+0x100>
 8006940:	2301      	movs	r3, #1
 8006942:	e7b8      	b.n	80068b6 <_dtoa_r+0x186>
 8006944:	9012      	str	r0, [sp, #72]	@ 0x48
 8006946:	e7b7      	b.n	80068b8 <_dtoa_r+0x188>
 8006948:	427b      	negs	r3, r7
 800694a:	930a      	str	r3, [sp, #40]	@ 0x28
 800694c:	2300      	movs	r3, #0
 800694e:	eba8 0807 	sub.w	r8, r8, r7
 8006952:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006954:	e7c4      	b.n	80068e0 <_dtoa_r+0x1b0>
 8006956:	2300      	movs	r3, #0
 8006958:	930b      	str	r3, [sp, #44]	@ 0x2c
 800695a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc35      	bgt.n	80069cc <_dtoa_r+0x29c>
 8006960:	2301      	movs	r3, #1
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	9307      	str	r3, [sp, #28]
 8006966:	461a      	mov	r2, r3
 8006968:	920e      	str	r2, [sp, #56]	@ 0x38
 800696a:	e00b      	b.n	8006984 <_dtoa_r+0x254>
 800696c:	2301      	movs	r3, #1
 800696e:	e7f3      	b.n	8006958 <_dtoa_r+0x228>
 8006970:	2300      	movs	r3, #0
 8006972:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	2b01      	cmp	r3, #1
 800697e:	9307      	str	r3, [sp, #28]
 8006980:	bfb8      	it	lt
 8006982:	2301      	movlt	r3, #1
 8006984:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006988:	2100      	movs	r1, #0
 800698a:	2204      	movs	r2, #4
 800698c:	f102 0514 	add.w	r5, r2, #20
 8006990:	429d      	cmp	r5, r3
 8006992:	d91f      	bls.n	80069d4 <_dtoa_r+0x2a4>
 8006994:	6041      	str	r1, [r0, #4]
 8006996:	4658      	mov	r0, fp
 8006998:	f000 fd8e 	bl	80074b8 <_Balloc>
 800699c:	4682      	mov	sl, r0
 800699e:	2800      	cmp	r0, #0
 80069a0:	d13c      	bne.n	8006a1c <_dtoa_r+0x2ec>
 80069a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a10 <_dtoa_r+0x2e0>)
 80069a4:	4602      	mov	r2, r0
 80069a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80069aa:	e6d8      	b.n	800675e <_dtoa_r+0x2e>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e7e0      	b.n	8006972 <_dtoa_r+0x242>
 80069b0:	2401      	movs	r4, #1
 80069b2:	2300      	movs	r3, #0
 80069b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069b8:	f04f 33ff 	mov.w	r3, #4294967295
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	9307      	str	r3, [sp, #28]
 80069c0:	2200      	movs	r2, #0
 80069c2:	2312      	movs	r3, #18
 80069c4:	e7d0      	b.n	8006968 <_dtoa_r+0x238>
 80069c6:	2301      	movs	r3, #1
 80069c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069ca:	e7f5      	b.n	80069b8 <_dtoa_r+0x288>
 80069cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	9307      	str	r3, [sp, #28]
 80069d2:	e7d7      	b.n	8006984 <_dtoa_r+0x254>
 80069d4:	3101      	adds	r1, #1
 80069d6:	0052      	lsls	r2, r2, #1
 80069d8:	e7d8      	b.n	800698c <_dtoa_r+0x25c>
 80069da:	bf00      	nop
 80069dc:	f3af 8000 	nop.w
 80069e0:	636f4361 	.word	0x636f4361
 80069e4:	3fd287a7 	.word	0x3fd287a7
 80069e8:	8b60c8b3 	.word	0x8b60c8b3
 80069ec:	3fc68a28 	.word	0x3fc68a28
 80069f0:	509f79fb 	.word	0x509f79fb
 80069f4:	3fd34413 	.word	0x3fd34413
 80069f8:	0800929d 	.word	0x0800929d
 80069fc:	080092b4 	.word	0x080092b4
 8006a00:	7ff00000 	.word	0x7ff00000
 8006a04:	0800926d 	.word	0x0800926d
 8006a08:	3ff80000 	.word	0x3ff80000
 8006a0c:	080093b0 	.word	0x080093b0
 8006a10:	0800930c 	.word	0x0800930c
 8006a14:	08009299 	.word	0x08009299
 8006a18:	0800926c 	.word	0x0800926c
 8006a1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a20:	6018      	str	r0, [r3, #0]
 8006a22:	9b07      	ldr	r3, [sp, #28]
 8006a24:	2b0e      	cmp	r3, #14
 8006a26:	f200 80a4 	bhi.w	8006b72 <_dtoa_r+0x442>
 8006a2a:	2c00      	cmp	r4, #0
 8006a2c:	f000 80a1 	beq.w	8006b72 <_dtoa_r+0x442>
 8006a30:	2f00      	cmp	r7, #0
 8006a32:	dd33      	ble.n	8006a9c <_dtoa_r+0x36c>
 8006a34:	4bad      	ldr	r3, [pc, #692]	@ (8006cec <_dtoa_r+0x5bc>)
 8006a36:	f007 020f 	and.w	r2, r7, #15
 8006a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a3e:	ed93 7b00 	vldr	d7, [r3]
 8006a42:	05f8      	lsls	r0, r7, #23
 8006a44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a4c:	d516      	bpl.n	8006a7c <_dtoa_r+0x34c>
 8006a4e:	4ba8      	ldr	r3, [pc, #672]	@ (8006cf0 <_dtoa_r+0x5c0>)
 8006a50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a58:	f7f9 ff00 	bl	800085c <__aeabi_ddiv>
 8006a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a60:	f004 040f 	and.w	r4, r4, #15
 8006a64:	2603      	movs	r6, #3
 8006a66:	4da2      	ldr	r5, [pc, #648]	@ (8006cf0 <_dtoa_r+0x5c0>)
 8006a68:	b954      	cbnz	r4, 8006a80 <_dtoa_r+0x350>
 8006a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a72:	f7f9 fef3 	bl	800085c <__aeabi_ddiv>
 8006a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a7a:	e028      	b.n	8006ace <_dtoa_r+0x39e>
 8006a7c:	2602      	movs	r6, #2
 8006a7e:	e7f2      	b.n	8006a66 <_dtoa_r+0x336>
 8006a80:	07e1      	lsls	r1, r4, #31
 8006a82:	d508      	bpl.n	8006a96 <_dtoa_r+0x366>
 8006a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a8c:	f7f9 fdbc 	bl	8000608 <__aeabi_dmul>
 8006a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a94:	3601      	adds	r6, #1
 8006a96:	1064      	asrs	r4, r4, #1
 8006a98:	3508      	adds	r5, #8
 8006a9a:	e7e5      	b.n	8006a68 <_dtoa_r+0x338>
 8006a9c:	f000 80d2 	beq.w	8006c44 <_dtoa_r+0x514>
 8006aa0:	427c      	negs	r4, r7
 8006aa2:	4b92      	ldr	r3, [pc, #584]	@ (8006cec <_dtoa_r+0x5bc>)
 8006aa4:	4d92      	ldr	r5, [pc, #584]	@ (8006cf0 <_dtoa_r+0x5c0>)
 8006aa6:	f004 020f 	and.w	r2, r4, #15
 8006aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ab6:	f7f9 fda7 	bl	8000608 <__aeabi_dmul>
 8006aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006abe:	1124      	asrs	r4, r4, #4
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2602      	movs	r6, #2
 8006ac4:	2c00      	cmp	r4, #0
 8006ac6:	f040 80b2 	bne.w	8006c2e <_dtoa_r+0x4fe>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1d3      	bne.n	8006a76 <_dtoa_r+0x346>
 8006ace:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ad0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 80b7 	beq.w	8006c48 <_dtoa_r+0x518>
 8006ada:	4b86      	ldr	r3, [pc, #536]	@ (8006cf4 <_dtoa_r+0x5c4>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f7fa f803 	bl	8000aec <__aeabi_dcmplt>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f000 80ae 	beq.w	8006c48 <_dtoa_r+0x518>
 8006aec:	9b07      	ldr	r3, [sp, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 80aa 	beq.w	8006c48 <_dtoa_r+0x518>
 8006af4:	9b00      	ldr	r3, [sp, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	dd37      	ble.n	8006b6a <_dtoa_r+0x43a>
 8006afa:	1e7b      	subs	r3, r7, #1
 8006afc:	9304      	str	r3, [sp, #16]
 8006afe:	4620      	mov	r0, r4
 8006b00:	4b7d      	ldr	r3, [pc, #500]	@ (8006cf8 <_dtoa_r+0x5c8>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	4629      	mov	r1, r5
 8006b06:	f7f9 fd7f 	bl	8000608 <__aeabi_dmul>
 8006b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b0e:	9c00      	ldr	r4, [sp, #0]
 8006b10:	3601      	adds	r6, #1
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7f9 fd0e 	bl	8000534 <__aeabi_i2d>
 8006b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b1c:	f7f9 fd74 	bl	8000608 <__aeabi_dmul>
 8006b20:	4b76      	ldr	r3, [pc, #472]	@ (8006cfc <_dtoa_r+0x5cc>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	f7f9 fbba 	bl	800029c <__adddf3>
 8006b28:	4605      	mov	r5, r0
 8006b2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b2e:	2c00      	cmp	r4, #0
 8006b30:	f040 808d 	bne.w	8006c4e <_dtoa_r+0x51e>
 8006b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b38:	4b71      	ldr	r3, [pc, #452]	@ (8006d00 <_dtoa_r+0x5d0>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f7f9 fbac 	bl	8000298 <__aeabi_dsub>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b48:	462a      	mov	r2, r5
 8006b4a:	4633      	mov	r3, r6
 8006b4c:	f7f9 ffec 	bl	8000b28 <__aeabi_dcmpgt>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	f040 828b 	bne.w	800706c <_dtoa_r+0x93c>
 8006b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b5a:	462a      	mov	r2, r5
 8006b5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b60:	f7f9 ffc4 	bl	8000aec <__aeabi_dcmplt>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	f040 8128 	bne.w	8006dba <_dtoa_r+0x68a>
 8006b6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006b6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006b72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f2c0 815a 	blt.w	8006e2e <_dtoa_r+0x6fe>
 8006b7a:	2f0e      	cmp	r7, #14
 8006b7c:	f300 8157 	bgt.w	8006e2e <_dtoa_r+0x6fe>
 8006b80:	4b5a      	ldr	r3, [pc, #360]	@ (8006cec <_dtoa_r+0x5bc>)
 8006b82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b86:	ed93 7b00 	vldr	d7, [r3]
 8006b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	ed8d 7b00 	vstr	d7, [sp]
 8006b92:	da03      	bge.n	8006b9c <_dtoa_r+0x46c>
 8006b94:	9b07      	ldr	r3, [sp, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f340 8101 	ble.w	8006d9e <_dtoa_r+0x66e>
 8006b9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ba0:	4656      	mov	r6, sl
 8006ba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f7f9 fe57 	bl	800085c <__aeabi_ddiv>
 8006bae:	f7f9 ffdb 	bl	8000b68 <__aeabi_d2iz>
 8006bb2:	4680      	mov	r8, r0
 8006bb4:	f7f9 fcbe 	bl	8000534 <__aeabi_i2d>
 8006bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bbc:	f7f9 fd24 	bl	8000608 <__aeabi_dmul>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006bcc:	f7f9 fb64 	bl	8000298 <__aeabi_dsub>
 8006bd0:	f806 4b01 	strb.w	r4, [r6], #1
 8006bd4:	9d07      	ldr	r5, [sp, #28]
 8006bd6:	eba6 040a 	sub.w	r4, r6, sl
 8006bda:	42a5      	cmp	r5, r4
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	f040 8117 	bne.w	8006e12 <_dtoa_r+0x6e2>
 8006be4:	f7f9 fb5a 	bl	800029c <__adddf3>
 8006be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	f7f9 ff9a 	bl	8000b28 <__aeabi_dcmpgt>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f040 80f9 	bne.w	8006dec <_dtoa_r+0x6bc>
 8006bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4629      	mov	r1, r5
 8006c02:	f7f9 ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c06:	b118      	cbz	r0, 8006c10 <_dtoa_r+0x4e0>
 8006c08:	f018 0f01 	tst.w	r8, #1
 8006c0c:	f040 80ee 	bne.w	8006dec <_dtoa_r+0x6bc>
 8006c10:	4649      	mov	r1, r9
 8006c12:	4658      	mov	r0, fp
 8006c14:	f000 fc90 	bl	8007538 <_Bfree>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	7033      	strb	r3, [r6, #0]
 8006c1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c1e:	3701      	adds	r7, #1
 8006c20:	601f      	str	r7, [r3, #0]
 8006c22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 831d 	beq.w	8007264 <_dtoa_r+0xb34>
 8006c2a:	601e      	str	r6, [r3, #0]
 8006c2c:	e31a      	b.n	8007264 <_dtoa_r+0xb34>
 8006c2e:	07e2      	lsls	r2, r4, #31
 8006c30:	d505      	bpl.n	8006c3e <_dtoa_r+0x50e>
 8006c32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c36:	f7f9 fce7 	bl	8000608 <__aeabi_dmul>
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	1064      	asrs	r4, r4, #1
 8006c40:	3508      	adds	r5, #8
 8006c42:	e73f      	b.n	8006ac4 <_dtoa_r+0x394>
 8006c44:	2602      	movs	r6, #2
 8006c46:	e742      	b.n	8006ace <_dtoa_r+0x39e>
 8006c48:	9c07      	ldr	r4, [sp, #28]
 8006c4a:	9704      	str	r7, [sp, #16]
 8006c4c:	e761      	b.n	8006b12 <_dtoa_r+0x3e2>
 8006c4e:	4b27      	ldr	r3, [pc, #156]	@ (8006cec <_dtoa_r+0x5bc>)
 8006c50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c5a:	4454      	add	r4, sl
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	d053      	beq.n	8006d08 <_dtoa_r+0x5d8>
 8006c60:	4928      	ldr	r1, [pc, #160]	@ (8006d04 <_dtoa_r+0x5d4>)
 8006c62:	2000      	movs	r0, #0
 8006c64:	f7f9 fdfa 	bl	800085c <__aeabi_ddiv>
 8006c68:	4633      	mov	r3, r6
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	f7f9 fb14 	bl	8000298 <__aeabi_dsub>
 8006c70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c74:	4656      	mov	r6, sl
 8006c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c7a:	f7f9 ff75 	bl	8000b68 <__aeabi_d2iz>
 8006c7e:	4605      	mov	r5, r0
 8006c80:	f7f9 fc58 	bl	8000534 <__aeabi_i2d>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c8c:	f7f9 fb04 	bl	8000298 <__aeabi_dsub>
 8006c90:	3530      	adds	r5, #48	@ 0x30
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c9a:	f806 5b01 	strb.w	r5, [r6], #1
 8006c9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ca2:	f7f9 ff23 	bl	8000aec <__aeabi_dcmplt>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d171      	bne.n	8006d8e <_dtoa_r+0x65e>
 8006caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cae:	4911      	ldr	r1, [pc, #68]	@ (8006cf4 <_dtoa_r+0x5c4>)
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	f7f9 faf1 	bl	8000298 <__aeabi_dsub>
 8006cb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cba:	f7f9 ff17 	bl	8000aec <__aeabi_dcmplt>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f040 8095 	bne.w	8006dee <_dtoa_r+0x6be>
 8006cc4:	42a6      	cmp	r6, r4
 8006cc6:	f43f af50 	beq.w	8006b6a <_dtoa_r+0x43a>
 8006cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cce:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf8 <_dtoa_r+0x5c8>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f7f9 fc99 	bl	8000608 <__aeabi_dmul>
 8006cd6:	4b08      	ldr	r3, [pc, #32]	@ (8006cf8 <_dtoa_r+0x5c8>)
 8006cd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cdc:	2200      	movs	r2, #0
 8006cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ce2:	f7f9 fc91 	bl	8000608 <__aeabi_dmul>
 8006ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cea:	e7c4      	b.n	8006c76 <_dtoa_r+0x546>
 8006cec:	080093b0 	.word	0x080093b0
 8006cf0:	08009388 	.word	0x08009388
 8006cf4:	3ff00000 	.word	0x3ff00000
 8006cf8:	40240000 	.word	0x40240000
 8006cfc:	401c0000 	.word	0x401c0000
 8006d00:	40140000 	.word	0x40140000
 8006d04:	3fe00000 	.word	0x3fe00000
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f7f9 fc7c 	bl	8000608 <__aeabi_dmul>
 8006d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d14:	9415      	str	r4, [sp, #84]	@ 0x54
 8006d16:	4656      	mov	r6, sl
 8006d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d1c:	f7f9 ff24 	bl	8000b68 <__aeabi_d2iz>
 8006d20:	4605      	mov	r5, r0
 8006d22:	f7f9 fc07 	bl	8000534 <__aeabi_i2d>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d2e:	f7f9 fab3 	bl	8000298 <__aeabi_dsub>
 8006d32:	3530      	adds	r5, #48	@ 0x30
 8006d34:	f806 5b01 	strb.w	r5, [r6], #1
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	42a6      	cmp	r6, r4
 8006d3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	d124      	bne.n	8006d92 <_dtoa_r+0x662>
 8006d48:	4bac      	ldr	r3, [pc, #688]	@ (8006ffc <_dtoa_r+0x8cc>)
 8006d4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d4e:	f7f9 faa5 	bl	800029c <__adddf3>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d5a:	f7f9 fee5 	bl	8000b28 <__aeabi_dcmpgt>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d145      	bne.n	8006dee <_dtoa_r+0x6be>
 8006d62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d66:	49a5      	ldr	r1, [pc, #660]	@ (8006ffc <_dtoa_r+0x8cc>)
 8006d68:	2000      	movs	r0, #0
 8006d6a:	f7f9 fa95 	bl	8000298 <__aeabi_dsub>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d76:	f7f9 feb9 	bl	8000aec <__aeabi_dcmplt>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	f43f aef5 	beq.w	8006b6a <_dtoa_r+0x43a>
 8006d80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006d82:	1e73      	subs	r3, r6, #1
 8006d84:	9315      	str	r3, [sp, #84]	@ 0x54
 8006d86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d8a:	2b30      	cmp	r3, #48	@ 0x30
 8006d8c:	d0f8      	beq.n	8006d80 <_dtoa_r+0x650>
 8006d8e:	9f04      	ldr	r7, [sp, #16]
 8006d90:	e73e      	b.n	8006c10 <_dtoa_r+0x4e0>
 8006d92:	4b9b      	ldr	r3, [pc, #620]	@ (8007000 <_dtoa_r+0x8d0>)
 8006d94:	f7f9 fc38 	bl	8000608 <__aeabi_dmul>
 8006d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d9c:	e7bc      	b.n	8006d18 <_dtoa_r+0x5e8>
 8006d9e:	d10c      	bne.n	8006dba <_dtoa_r+0x68a>
 8006da0:	4b98      	ldr	r3, [pc, #608]	@ (8007004 <_dtoa_r+0x8d4>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006da8:	f7f9 fc2e 	bl	8000608 <__aeabi_dmul>
 8006dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006db0:	f7f9 feb0 	bl	8000b14 <__aeabi_dcmpge>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	f000 8157 	beq.w	8007068 <_dtoa_r+0x938>
 8006dba:	2400      	movs	r4, #0
 8006dbc:	4625      	mov	r5, r4
 8006dbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	9304      	str	r3, [sp, #16]
 8006dc4:	4656      	mov	r6, sl
 8006dc6:	2700      	movs	r7, #0
 8006dc8:	4621      	mov	r1, r4
 8006dca:	4658      	mov	r0, fp
 8006dcc:	f000 fbb4 	bl	8007538 <_Bfree>
 8006dd0:	2d00      	cmp	r5, #0
 8006dd2:	d0dc      	beq.n	8006d8e <_dtoa_r+0x65e>
 8006dd4:	b12f      	cbz	r7, 8006de2 <_dtoa_r+0x6b2>
 8006dd6:	42af      	cmp	r7, r5
 8006dd8:	d003      	beq.n	8006de2 <_dtoa_r+0x6b2>
 8006dda:	4639      	mov	r1, r7
 8006ddc:	4658      	mov	r0, fp
 8006dde:	f000 fbab 	bl	8007538 <_Bfree>
 8006de2:	4629      	mov	r1, r5
 8006de4:	4658      	mov	r0, fp
 8006de6:	f000 fba7 	bl	8007538 <_Bfree>
 8006dea:	e7d0      	b.n	8006d8e <_dtoa_r+0x65e>
 8006dec:	9704      	str	r7, [sp, #16]
 8006dee:	4633      	mov	r3, r6
 8006df0:	461e      	mov	r6, r3
 8006df2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006df6:	2a39      	cmp	r2, #57	@ 0x39
 8006df8:	d107      	bne.n	8006e0a <_dtoa_r+0x6da>
 8006dfa:	459a      	cmp	sl, r3
 8006dfc:	d1f8      	bne.n	8006df0 <_dtoa_r+0x6c0>
 8006dfe:	9a04      	ldr	r2, [sp, #16]
 8006e00:	3201      	adds	r2, #1
 8006e02:	9204      	str	r2, [sp, #16]
 8006e04:	2230      	movs	r2, #48	@ 0x30
 8006e06:	f88a 2000 	strb.w	r2, [sl]
 8006e0a:	781a      	ldrb	r2, [r3, #0]
 8006e0c:	3201      	adds	r2, #1
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	e7bd      	b.n	8006d8e <_dtoa_r+0x65e>
 8006e12:	4b7b      	ldr	r3, [pc, #492]	@ (8007000 <_dtoa_r+0x8d0>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	f7f9 fbf7 	bl	8000608 <__aeabi_dmul>
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4604      	mov	r4, r0
 8006e20:	460d      	mov	r5, r1
 8006e22:	f7f9 fe59 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	f43f aebb 	beq.w	8006ba2 <_dtoa_r+0x472>
 8006e2c:	e6f0      	b.n	8006c10 <_dtoa_r+0x4e0>
 8006e2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	f000 80db 	beq.w	8006fec <_dtoa_r+0x8bc>
 8006e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e38:	2a01      	cmp	r2, #1
 8006e3a:	f300 80bf 	bgt.w	8006fbc <_dtoa_r+0x88c>
 8006e3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	f000 80b7 	beq.w	8006fb4 <_dtoa_r+0x884>
 8006e46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e4c:	4646      	mov	r6, r8
 8006e4e:	9a08      	ldr	r2, [sp, #32]
 8006e50:	2101      	movs	r1, #1
 8006e52:	441a      	add	r2, r3
 8006e54:	4658      	mov	r0, fp
 8006e56:	4498      	add	r8, r3
 8006e58:	9208      	str	r2, [sp, #32]
 8006e5a:	f000 fc21 	bl	80076a0 <__i2b>
 8006e5e:	4605      	mov	r5, r0
 8006e60:	b15e      	cbz	r6, 8006e7a <_dtoa_r+0x74a>
 8006e62:	9b08      	ldr	r3, [sp, #32]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	dd08      	ble.n	8006e7a <_dtoa_r+0x74a>
 8006e68:	42b3      	cmp	r3, r6
 8006e6a:	9a08      	ldr	r2, [sp, #32]
 8006e6c:	bfa8      	it	ge
 8006e6e:	4633      	movge	r3, r6
 8006e70:	eba8 0803 	sub.w	r8, r8, r3
 8006e74:	1af6      	subs	r6, r6, r3
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	9308      	str	r3, [sp, #32]
 8006e7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e7c:	b1f3      	cbz	r3, 8006ebc <_dtoa_r+0x78c>
 8006e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 80b7 	beq.w	8006ff4 <_dtoa_r+0x8c4>
 8006e86:	b18c      	cbz	r4, 8006eac <_dtoa_r+0x77c>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	4658      	mov	r0, fp
 8006e8e:	f000 fcc7 	bl	8007820 <__pow5mult>
 8006e92:	464a      	mov	r2, r9
 8006e94:	4601      	mov	r1, r0
 8006e96:	4605      	mov	r5, r0
 8006e98:	4658      	mov	r0, fp
 8006e9a:	f000 fc17 	bl	80076cc <__multiply>
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	9004      	str	r0, [sp, #16]
 8006ea2:	4658      	mov	r0, fp
 8006ea4:	f000 fb48 	bl	8007538 <_Bfree>
 8006ea8:	9b04      	ldr	r3, [sp, #16]
 8006eaa:	4699      	mov	r9, r3
 8006eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eae:	1b1a      	subs	r2, r3, r4
 8006eb0:	d004      	beq.n	8006ebc <_dtoa_r+0x78c>
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	4658      	mov	r0, fp
 8006eb6:	f000 fcb3 	bl	8007820 <__pow5mult>
 8006eba:	4681      	mov	r9, r0
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	4658      	mov	r0, fp
 8006ec0:	f000 fbee 	bl	80076a0 <__i2b>
 8006ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 81cf 	beq.w	800726c <_dtoa_r+0xb3c>
 8006ece:	461a      	mov	r2, r3
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	4658      	mov	r0, fp
 8006ed4:	f000 fca4 	bl	8007820 <__pow5mult>
 8006ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	4604      	mov	r4, r0
 8006ede:	f300 8095 	bgt.w	800700c <_dtoa_r+0x8dc>
 8006ee2:	9b02      	ldr	r3, [sp, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f040 8087 	bne.w	8006ff8 <_dtoa_r+0x8c8>
 8006eea:	9b03      	ldr	r3, [sp, #12]
 8006eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f040 8089 	bne.w	8007008 <_dtoa_r+0x8d8>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006efc:	0d1b      	lsrs	r3, r3, #20
 8006efe:	051b      	lsls	r3, r3, #20
 8006f00:	b12b      	cbz	r3, 8006f0e <_dtoa_r+0x7de>
 8006f02:	9b08      	ldr	r3, [sp, #32]
 8006f04:	3301      	adds	r3, #1
 8006f06:	9308      	str	r3, [sp, #32]
 8006f08:	f108 0801 	add.w	r8, r8, #1
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 81b0 	beq.w	8007278 <_dtoa_r+0xb48>
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f1e:	6918      	ldr	r0, [r3, #16]
 8006f20:	f000 fb72 	bl	8007608 <__hi0bits>
 8006f24:	f1c0 0020 	rsb	r0, r0, #32
 8006f28:	9b08      	ldr	r3, [sp, #32]
 8006f2a:	4418      	add	r0, r3
 8006f2c:	f010 001f 	ands.w	r0, r0, #31
 8006f30:	d077      	beq.n	8007022 <_dtoa_r+0x8f2>
 8006f32:	f1c0 0320 	rsb	r3, r0, #32
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	dd6b      	ble.n	8007012 <_dtoa_r+0x8e2>
 8006f3a:	9b08      	ldr	r3, [sp, #32]
 8006f3c:	f1c0 001c 	rsb	r0, r0, #28
 8006f40:	4403      	add	r3, r0
 8006f42:	4480      	add	r8, r0
 8006f44:	4406      	add	r6, r0
 8006f46:	9308      	str	r3, [sp, #32]
 8006f48:	f1b8 0f00 	cmp.w	r8, #0
 8006f4c:	dd05      	ble.n	8006f5a <_dtoa_r+0x82a>
 8006f4e:	4649      	mov	r1, r9
 8006f50:	4642      	mov	r2, r8
 8006f52:	4658      	mov	r0, fp
 8006f54:	f000 fcbe 	bl	80078d4 <__lshift>
 8006f58:	4681      	mov	r9, r0
 8006f5a:	9b08      	ldr	r3, [sp, #32]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	dd05      	ble.n	8006f6c <_dtoa_r+0x83c>
 8006f60:	4621      	mov	r1, r4
 8006f62:	461a      	mov	r2, r3
 8006f64:	4658      	mov	r0, fp
 8006f66:	f000 fcb5 	bl	80078d4 <__lshift>
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d059      	beq.n	8007026 <_dtoa_r+0x8f6>
 8006f72:	4621      	mov	r1, r4
 8006f74:	4648      	mov	r0, r9
 8006f76:	f000 fd19 	bl	80079ac <__mcmp>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	da53      	bge.n	8007026 <_dtoa_r+0x8f6>
 8006f7e:	1e7b      	subs	r3, r7, #1
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	4649      	mov	r1, r9
 8006f84:	2300      	movs	r3, #0
 8006f86:	220a      	movs	r2, #10
 8006f88:	4658      	mov	r0, fp
 8006f8a:	f000 faf7 	bl	800757c <__multadd>
 8006f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f90:	4681      	mov	r9, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8172 	beq.w	800727c <_dtoa_r+0xb4c>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	220a      	movs	r2, #10
 8006f9e:	4658      	mov	r0, fp
 8006fa0:	f000 faec 	bl	800757c <__multadd>
 8006fa4:	9b00      	ldr	r3, [sp, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	4605      	mov	r5, r0
 8006faa:	dc67      	bgt.n	800707c <_dtoa_r+0x94c>
 8006fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	dc41      	bgt.n	8007036 <_dtoa_r+0x906>
 8006fb2:	e063      	b.n	800707c <_dtoa_r+0x94c>
 8006fb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006fba:	e746      	b.n	8006e4a <_dtoa_r+0x71a>
 8006fbc:	9b07      	ldr	r3, [sp, #28]
 8006fbe:	1e5c      	subs	r4, r3, #1
 8006fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fc2:	42a3      	cmp	r3, r4
 8006fc4:	bfbf      	itttt	lt
 8006fc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006fc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006fca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006fcc:	1ae3      	sublt	r3, r4, r3
 8006fce:	bfb4      	ite	lt
 8006fd0:	18d2      	addlt	r2, r2, r3
 8006fd2:	1b1c      	subge	r4, r3, r4
 8006fd4:	9b07      	ldr	r3, [sp, #28]
 8006fd6:	bfbc      	itt	lt
 8006fd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006fda:	2400      	movlt	r4, #0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bfb5      	itete	lt
 8006fe0:	eba8 0603 	sublt.w	r6, r8, r3
 8006fe4:	9b07      	ldrge	r3, [sp, #28]
 8006fe6:	2300      	movlt	r3, #0
 8006fe8:	4646      	movge	r6, r8
 8006fea:	e730      	b.n	8006e4e <_dtoa_r+0x71e>
 8006fec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006fee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006ff0:	4646      	mov	r6, r8
 8006ff2:	e735      	b.n	8006e60 <_dtoa_r+0x730>
 8006ff4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ff6:	e75c      	b.n	8006eb2 <_dtoa_r+0x782>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e788      	b.n	8006f0e <_dtoa_r+0x7de>
 8006ffc:	3fe00000 	.word	0x3fe00000
 8007000:	40240000 	.word	0x40240000
 8007004:	40140000 	.word	0x40140000
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	e780      	b.n	8006f0e <_dtoa_r+0x7de>
 800700c:	2300      	movs	r3, #0
 800700e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007010:	e782      	b.n	8006f18 <_dtoa_r+0x7e8>
 8007012:	d099      	beq.n	8006f48 <_dtoa_r+0x818>
 8007014:	9a08      	ldr	r2, [sp, #32]
 8007016:	331c      	adds	r3, #28
 8007018:	441a      	add	r2, r3
 800701a:	4498      	add	r8, r3
 800701c:	441e      	add	r6, r3
 800701e:	9208      	str	r2, [sp, #32]
 8007020:	e792      	b.n	8006f48 <_dtoa_r+0x818>
 8007022:	4603      	mov	r3, r0
 8007024:	e7f6      	b.n	8007014 <_dtoa_r+0x8e4>
 8007026:	9b07      	ldr	r3, [sp, #28]
 8007028:	9704      	str	r7, [sp, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	dc20      	bgt.n	8007070 <_dtoa_r+0x940>
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007032:	2b02      	cmp	r3, #2
 8007034:	dd1e      	ble.n	8007074 <_dtoa_r+0x944>
 8007036:	9b00      	ldr	r3, [sp, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f47f aec0 	bne.w	8006dbe <_dtoa_r+0x68e>
 800703e:	4621      	mov	r1, r4
 8007040:	2205      	movs	r2, #5
 8007042:	4658      	mov	r0, fp
 8007044:	f000 fa9a 	bl	800757c <__multadd>
 8007048:	4601      	mov	r1, r0
 800704a:	4604      	mov	r4, r0
 800704c:	4648      	mov	r0, r9
 800704e:	f000 fcad 	bl	80079ac <__mcmp>
 8007052:	2800      	cmp	r0, #0
 8007054:	f77f aeb3 	ble.w	8006dbe <_dtoa_r+0x68e>
 8007058:	4656      	mov	r6, sl
 800705a:	2331      	movs	r3, #49	@ 0x31
 800705c:	f806 3b01 	strb.w	r3, [r6], #1
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	3301      	adds	r3, #1
 8007064:	9304      	str	r3, [sp, #16]
 8007066:	e6ae      	b.n	8006dc6 <_dtoa_r+0x696>
 8007068:	9c07      	ldr	r4, [sp, #28]
 800706a:	9704      	str	r7, [sp, #16]
 800706c:	4625      	mov	r5, r4
 800706e:	e7f3      	b.n	8007058 <_dtoa_r+0x928>
 8007070:	9b07      	ldr	r3, [sp, #28]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 8104 	beq.w	8007284 <_dtoa_r+0xb54>
 800707c:	2e00      	cmp	r6, #0
 800707e:	dd05      	ble.n	800708c <_dtoa_r+0x95c>
 8007080:	4629      	mov	r1, r5
 8007082:	4632      	mov	r2, r6
 8007084:	4658      	mov	r0, fp
 8007086:	f000 fc25 	bl	80078d4 <__lshift>
 800708a:	4605      	mov	r5, r0
 800708c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800708e:	2b00      	cmp	r3, #0
 8007090:	d05a      	beq.n	8007148 <_dtoa_r+0xa18>
 8007092:	6869      	ldr	r1, [r5, #4]
 8007094:	4658      	mov	r0, fp
 8007096:	f000 fa0f 	bl	80074b8 <_Balloc>
 800709a:	4606      	mov	r6, r0
 800709c:	b928      	cbnz	r0, 80070aa <_dtoa_r+0x97a>
 800709e:	4b84      	ldr	r3, [pc, #528]	@ (80072b0 <_dtoa_r+0xb80>)
 80070a0:	4602      	mov	r2, r0
 80070a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80070a6:	f7ff bb5a 	b.w	800675e <_dtoa_r+0x2e>
 80070aa:	692a      	ldr	r2, [r5, #16]
 80070ac:	3202      	adds	r2, #2
 80070ae:	0092      	lsls	r2, r2, #2
 80070b0:	f105 010c 	add.w	r1, r5, #12
 80070b4:	300c      	adds	r0, #12
 80070b6:	f000 fe3d 	bl	8007d34 <memcpy>
 80070ba:	2201      	movs	r2, #1
 80070bc:	4631      	mov	r1, r6
 80070be:	4658      	mov	r0, fp
 80070c0:	f000 fc08 	bl	80078d4 <__lshift>
 80070c4:	f10a 0301 	add.w	r3, sl, #1
 80070c8:	9307      	str	r3, [sp, #28]
 80070ca:	9b00      	ldr	r3, [sp, #0]
 80070cc:	4453      	add	r3, sl
 80070ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070d0:	9b02      	ldr	r3, [sp, #8]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	462f      	mov	r7, r5
 80070d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070da:	4605      	mov	r5, r0
 80070dc:	9b07      	ldr	r3, [sp, #28]
 80070de:	4621      	mov	r1, r4
 80070e0:	3b01      	subs	r3, #1
 80070e2:	4648      	mov	r0, r9
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	f7ff fa9a 	bl	800661e <quorem>
 80070ea:	4639      	mov	r1, r7
 80070ec:	9002      	str	r0, [sp, #8]
 80070ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80070f2:	4648      	mov	r0, r9
 80070f4:	f000 fc5a 	bl	80079ac <__mcmp>
 80070f8:	462a      	mov	r2, r5
 80070fa:	9008      	str	r0, [sp, #32]
 80070fc:	4621      	mov	r1, r4
 80070fe:	4658      	mov	r0, fp
 8007100:	f000 fc70 	bl	80079e4 <__mdiff>
 8007104:	68c2      	ldr	r2, [r0, #12]
 8007106:	4606      	mov	r6, r0
 8007108:	bb02      	cbnz	r2, 800714c <_dtoa_r+0xa1c>
 800710a:	4601      	mov	r1, r0
 800710c:	4648      	mov	r0, r9
 800710e:	f000 fc4d 	bl	80079ac <__mcmp>
 8007112:	4602      	mov	r2, r0
 8007114:	4631      	mov	r1, r6
 8007116:	4658      	mov	r0, fp
 8007118:	920e      	str	r2, [sp, #56]	@ 0x38
 800711a:	f000 fa0d 	bl	8007538 <_Bfree>
 800711e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007120:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007122:	9e07      	ldr	r6, [sp, #28]
 8007124:	ea43 0102 	orr.w	r1, r3, r2
 8007128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800712a:	4319      	orrs	r1, r3
 800712c:	d110      	bne.n	8007150 <_dtoa_r+0xa20>
 800712e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007132:	d029      	beq.n	8007188 <_dtoa_r+0xa58>
 8007134:	9b08      	ldr	r3, [sp, #32]
 8007136:	2b00      	cmp	r3, #0
 8007138:	dd02      	ble.n	8007140 <_dtoa_r+0xa10>
 800713a:	9b02      	ldr	r3, [sp, #8]
 800713c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007140:	9b00      	ldr	r3, [sp, #0]
 8007142:	f883 8000 	strb.w	r8, [r3]
 8007146:	e63f      	b.n	8006dc8 <_dtoa_r+0x698>
 8007148:	4628      	mov	r0, r5
 800714a:	e7bb      	b.n	80070c4 <_dtoa_r+0x994>
 800714c:	2201      	movs	r2, #1
 800714e:	e7e1      	b.n	8007114 <_dtoa_r+0x9e4>
 8007150:	9b08      	ldr	r3, [sp, #32]
 8007152:	2b00      	cmp	r3, #0
 8007154:	db04      	blt.n	8007160 <_dtoa_r+0xa30>
 8007156:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007158:	430b      	orrs	r3, r1
 800715a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800715c:	430b      	orrs	r3, r1
 800715e:	d120      	bne.n	80071a2 <_dtoa_r+0xa72>
 8007160:	2a00      	cmp	r2, #0
 8007162:	dded      	ble.n	8007140 <_dtoa_r+0xa10>
 8007164:	4649      	mov	r1, r9
 8007166:	2201      	movs	r2, #1
 8007168:	4658      	mov	r0, fp
 800716a:	f000 fbb3 	bl	80078d4 <__lshift>
 800716e:	4621      	mov	r1, r4
 8007170:	4681      	mov	r9, r0
 8007172:	f000 fc1b 	bl	80079ac <__mcmp>
 8007176:	2800      	cmp	r0, #0
 8007178:	dc03      	bgt.n	8007182 <_dtoa_r+0xa52>
 800717a:	d1e1      	bne.n	8007140 <_dtoa_r+0xa10>
 800717c:	f018 0f01 	tst.w	r8, #1
 8007180:	d0de      	beq.n	8007140 <_dtoa_r+0xa10>
 8007182:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007186:	d1d8      	bne.n	800713a <_dtoa_r+0xa0a>
 8007188:	9a00      	ldr	r2, [sp, #0]
 800718a:	2339      	movs	r3, #57	@ 0x39
 800718c:	7013      	strb	r3, [r2, #0]
 800718e:	4633      	mov	r3, r6
 8007190:	461e      	mov	r6, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007198:	2a39      	cmp	r2, #57	@ 0x39
 800719a:	d052      	beq.n	8007242 <_dtoa_r+0xb12>
 800719c:	3201      	adds	r2, #1
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	e612      	b.n	8006dc8 <_dtoa_r+0x698>
 80071a2:	2a00      	cmp	r2, #0
 80071a4:	dd07      	ble.n	80071b6 <_dtoa_r+0xa86>
 80071a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071aa:	d0ed      	beq.n	8007188 <_dtoa_r+0xa58>
 80071ac:	9a00      	ldr	r2, [sp, #0]
 80071ae:	f108 0301 	add.w	r3, r8, #1
 80071b2:	7013      	strb	r3, [r2, #0]
 80071b4:	e608      	b.n	8006dc8 <_dtoa_r+0x698>
 80071b6:	9b07      	ldr	r3, [sp, #28]
 80071b8:	9a07      	ldr	r2, [sp, #28]
 80071ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80071be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d028      	beq.n	8007216 <_dtoa_r+0xae6>
 80071c4:	4649      	mov	r1, r9
 80071c6:	2300      	movs	r3, #0
 80071c8:	220a      	movs	r2, #10
 80071ca:	4658      	mov	r0, fp
 80071cc:	f000 f9d6 	bl	800757c <__multadd>
 80071d0:	42af      	cmp	r7, r5
 80071d2:	4681      	mov	r9, r0
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	f04f 020a 	mov.w	r2, #10
 80071dc:	4639      	mov	r1, r7
 80071de:	4658      	mov	r0, fp
 80071e0:	d107      	bne.n	80071f2 <_dtoa_r+0xac2>
 80071e2:	f000 f9cb 	bl	800757c <__multadd>
 80071e6:	4607      	mov	r7, r0
 80071e8:	4605      	mov	r5, r0
 80071ea:	9b07      	ldr	r3, [sp, #28]
 80071ec:	3301      	adds	r3, #1
 80071ee:	9307      	str	r3, [sp, #28]
 80071f0:	e774      	b.n	80070dc <_dtoa_r+0x9ac>
 80071f2:	f000 f9c3 	bl	800757c <__multadd>
 80071f6:	4629      	mov	r1, r5
 80071f8:	4607      	mov	r7, r0
 80071fa:	2300      	movs	r3, #0
 80071fc:	220a      	movs	r2, #10
 80071fe:	4658      	mov	r0, fp
 8007200:	f000 f9bc 	bl	800757c <__multadd>
 8007204:	4605      	mov	r5, r0
 8007206:	e7f0      	b.n	80071ea <_dtoa_r+0xaba>
 8007208:	9b00      	ldr	r3, [sp, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	bfcc      	ite	gt
 800720e:	461e      	movgt	r6, r3
 8007210:	2601      	movle	r6, #1
 8007212:	4456      	add	r6, sl
 8007214:	2700      	movs	r7, #0
 8007216:	4649      	mov	r1, r9
 8007218:	2201      	movs	r2, #1
 800721a:	4658      	mov	r0, fp
 800721c:	f000 fb5a 	bl	80078d4 <__lshift>
 8007220:	4621      	mov	r1, r4
 8007222:	4681      	mov	r9, r0
 8007224:	f000 fbc2 	bl	80079ac <__mcmp>
 8007228:	2800      	cmp	r0, #0
 800722a:	dcb0      	bgt.n	800718e <_dtoa_r+0xa5e>
 800722c:	d102      	bne.n	8007234 <_dtoa_r+0xb04>
 800722e:	f018 0f01 	tst.w	r8, #1
 8007232:	d1ac      	bne.n	800718e <_dtoa_r+0xa5e>
 8007234:	4633      	mov	r3, r6
 8007236:	461e      	mov	r6, r3
 8007238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800723c:	2a30      	cmp	r2, #48	@ 0x30
 800723e:	d0fa      	beq.n	8007236 <_dtoa_r+0xb06>
 8007240:	e5c2      	b.n	8006dc8 <_dtoa_r+0x698>
 8007242:	459a      	cmp	sl, r3
 8007244:	d1a4      	bne.n	8007190 <_dtoa_r+0xa60>
 8007246:	9b04      	ldr	r3, [sp, #16]
 8007248:	3301      	adds	r3, #1
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	2331      	movs	r3, #49	@ 0x31
 800724e:	f88a 3000 	strb.w	r3, [sl]
 8007252:	e5b9      	b.n	8006dc8 <_dtoa_r+0x698>
 8007254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007256:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80072b4 <_dtoa_r+0xb84>
 800725a:	b11b      	cbz	r3, 8007264 <_dtoa_r+0xb34>
 800725c:	f10a 0308 	add.w	r3, sl, #8
 8007260:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	4650      	mov	r0, sl
 8007266:	b019      	add	sp, #100	@ 0x64
 8007268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800726e:	2b01      	cmp	r3, #1
 8007270:	f77f ae37 	ble.w	8006ee2 <_dtoa_r+0x7b2>
 8007274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007276:	930a      	str	r3, [sp, #40]	@ 0x28
 8007278:	2001      	movs	r0, #1
 800727a:	e655      	b.n	8006f28 <_dtoa_r+0x7f8>
 800727c:	9b00      	ldr	r3, [sp, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f77f aed6 	ble.w	8007030 <_dtoa_r+0x900>
 8007284:	4656      	mov	r6, sl
 8007286:	4621      	mov	r1, r4
 8007288:	4648      	mov	r0, r9
 800728a:	f7ff f9c8 	bl	800661e <quorem>
 800728e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007292:	f806 8b01 	strb.w	r8, [r6], #1
 8007296:	9b00      	ldr	r3, [sp, #0]
 8007298:	eba6 020a 	sub.w	r2, r6, sl
 800729c:	4293      	cmp	r3, r2
 800729e:	ddb3      	ble.n	8007208 <_dtoa_r+0xad8>
 80072a0:	4649      	mov	r1, r9
 80072a2:	2300      	movs	r3, #0
 80072a4:	220a      	movs	r2, #10
 80072a6:	4658      	mov	r0, fp
 80072a8:	f000 f968 	bl	800757c <__multadd>
 80072ac:	4681      	mov	r9, r0
 80072ae:	e7ea      	b.n	8007286 <_dtoa_r+0xb56>
 80072b0:	0800930c 	.word	0x0800930c
 80072b4:	08009290 	.word	0x08009290

080072b8 <_free_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4605      	mov	r5, r0
 80072bc:	2900      	cmp	r1, #0
 80072be:	d041      	beq.n	8007344 <_free_r+0x8c>
 80072c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c4:	1f0c      	subs	r4, r1, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bfb8      	it	lt
 80072ca:	18e4      	addlt	r4, r4, r3
 80072cc:	f000 f8e8 	bl	80074a0 <__malloc_lock>
 80072d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007348 <_free_r+0x90>)
 80072d2:	6813      	ldr	r3, [r2, #0]
 80072d4:	b933      	cbnz	r3, 80072e4 <_free_r+0x2c>
 80072d6:	6063      	str	r3, [r4, #4]
 80072d8:	6014      	str	r4, [r2, #0]
 80072da:	4628      	mov	r0, r5
 80072dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e0:	f000 b8e4 	b.w	80074ac <__malloc_unlock>
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	d908      	bls.n	80072fa <_free_r+0x42>
 80072e8:	6820      	ldr	r0, [r4, #0]
 80072ea:	1821      	adds	r1, r4, r0
 80072ec:	428b      	cmp	r3, r1
 80072ee:	bf01      	itttt	eq
 80072f0:	6819      	ldreq	r1, [r3, #0]
 80072f2:	685b      	ldreq	r3, [r3, #4]
 80072f4:	1809      	addeq	r1, r1, r0
 80072f6:	6021      	streq	r1, [r4, #0]
 80072f8:	e7ed      	b.n	80072d6 <_free_r+0x1e>
 80072fa:	461a      	mov	r2, r3
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	b10b      	cbz	r3, 8007304 <_free_r+0x4c>
 8007300:	42a3      	cmp	r3, r4
 8007302:	d9fa      	bls.n	80072fa <_free_r+0x42>
 8007304:	6811      	ldr	r1, [r2, #0]
 8007306:	1850      	adds	r0, r2, r1
 8007308:	42a0      	cmp	r0, r4
 800730a:	d10b      	bne.n	8007324 <_free_r+0x6c>
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	4401      	add	r1, r0
 8007310:	1850      	adds	r0, r2, r1
 8007312:	4283      	cmp	r3, r0
 8007314:	6011      	str	r1, [r2, #0]
 8007316:	d1e0      	bne.n	80072da <_free_r+0x22>
 8007318:	6818      	ldr	r0, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	6053      	str	r3, [r2, #4]
 800731e:	4408      	add	r0, r1
 8007320:	6010      	str	r0, [r2, #0]
 8007322:	e7da      	b.n	80072da <_free_r+0x22>
 8007324:	d902      	bls.n	800732c <_free_r+0x74>
 8007326:	230c      	movs	r3, #12
 8007328:	602b      	str	r3, [r5, #0]
 800732a:	e7d6      	b.n	80072da <_free_r+0x22>
 800732c:	6820      	ldr	r0, [r4, #0]
 800732e:	1821      	adds	r1, r4, r0
 8007330:	428b      	cmp	r3, r1
 8007332:	bf04      	itt	eq
 8007334:	6819      	ldreq	r1, [r3, #0]
 8007336:	685b      	ldreq	r3, [r3, #4]
 8007338:	6063      	str	r3, [r4, #4]
 800733a:	bf04      	itt	eq
 800733c:	1809      	addeq	r1, r1, r0
 800733e:	6021      	streq	r1, [r4, #0]
 8007340:	6054      	str	r4, [r2, #4]
 8007342:	e7ca      	b.n	80072da <_free_r+0x22>
 8007344:	bd38      	pop	{r3, r4, r5, pc}
 8007346:	bf00      	nop
 8007348:	20000610 	.word	0x20000610

0800734c <malloc>:
 800734c:	4b02      	ldr	r3, [pc, #8]	@ (8007358 <malloc+0xc>)
 800734e:	4601      	mov	r1, r0
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	f000 b825 	b.w	80073a0 <_malloc_r>
 8007356:	bf00      	nop
 8007358:	2000001c 	.word	0x2000001c

0800735c <sbrk_aligned>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4e0f      	ldr	r6, [pc, #60]	@ (800739c <sbrk_aligned+0x40>)
 8007360:	460c      	mov	r4, r1
 8007362:	6831      	ldr	r1, [r6, #0]
 8007364:	4605      	mov	r5, r0
 8007366:	b911      	cbnz	r1, 800736e <sbrk_aligned+0x12>
 8007368:	f000 fcd4 	bl	8007d14 <_sbrk_r>
 800736c:	6030      	str	r0, [r6, #0]
 800736e:	4621      	mov	r1, r4
 8007370:	4628      	mov	r0, r5
 8007372:	f000 fccf 	bl	8007d14 <_sbrk_r>
 8007376:	1c43      	adds	r3, r0, #1
 8007378:	d103      	bne.n	8007382 <sbrk_aligned+0x26>
 800737a:	f04f 34ff 	mov.w	r4, #4294967295
 800737e:	4620      	mov	r0, r4
 8007380:	bd70      	pop	{r4, r5, r6, pc}
 8007382:	1cc4      	adds	r4, r0, #3
 8007384:	f024 0403 	bic.w	r4, r4, #3
 8007388:	42a0      	cmp	r0, r4
 800738a:	d0f8      	beq.n	800737e <sbrk_aligned+0x22>
 800738c:	1a21      	subs	r1, r4, r0
 800738e:	4628      	mov	r0, r5
 8007390:	f000 fcc0 	bl	8007d14 <_sbrk_r>
 8007394:	3001      	adds	r0, #1
 8007396:	d1f2      	bne.n	800737e <sbrk_aligned+0x22>
 8007398:	e7ef      	b.n	800737a <sbrk_aligned+0x1e>
 800739a:	bf00      	nop
 800739c:	2000060c 	.word	0x2000060c

080073a0 <_malloc_r>:
 80073a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a4:	1ccd      	adds	r5, r1, #3
 80073a6:	f025 0503 	bic.w	r5, r5, #3
 80073aa:	3508      	adds	r5, #8
 80073ac:	2d0c      	cmp	r5, #12
 80073ae:	bf38      	it	cc
 80073b0:	250c      	movcc	r5, #12
 80073b2:	2d00      	cmp	r5, #0
 80073b4:	4606      	mov	r6, r0
 80073b6:	db01      	blt.n	80073bc <_malloc_r+0x1c>
 80073b8:	42a9      	cmp	r1, r5
 80073ba:	d904      	bls.n	80073c6 <_malloc_r+0x26>
 80073bc:	230c      	movs	r3, #12
 80073be:	6033      	str	r3, [r6, #0]
 80073c0:	2000      	movs	r0, #0
 80073c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800749c <_malloc_r+0xfc>
 80073ca:	f000 f869 	bl	80074a0 <__malloc_lock>
 80073ce:	f8d8 3000 	ldr.w	r3, [r8]
 80073d2:	461c      	mov	r4, r3
 80073d4:	bb44      	cbnz	r4, 8007428 <_malloc_r+0x88>
 80073d6:	4629      	mov	r1, r5
 80073d8:	4630      	mov	r0, r6
 80073da:	f7ff ffbf 	bl	800735c <sbrk_aligned>
 80073de:	1c43      	adds	r3, r0, #1
 80073e0:	4604      	mov	r4, r0
 80073e2:	d158      	bne.n	8007496 <_malloc_r+0xf6>
 80073e4:	f8d8 4000 	ldr.w	r4, [r8]
 80073e8:	4627      	mov	r7, r4
 80073ea:	2f00      	cmp	r7, #0
 80073ec:	d143      	bne.n	8007476 <_malloc_r+0xd6>
 80073ee:	2c00      	cmp	r4, #0
 80073f0:	d04b      	beq.n	800748a <_malloc_r+0xea>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	4639      	mov	r1, r7
 80073f6:	4630      	mov	r0, r6
 80073f8:	eb04 0903 	add.w	r9, r4, r3
 80073fc:	f000 fc8a 	bl	8007d14 <_sbrk_r>
 8007400:	4581      	cmp	r9, r0
 8007402:	d142      	bne.n	800748a <_malloc_r+0xea>
 8007404:	6821      	ldr	r1, [r4, #0]
 8007406:	1a6d      	subs	r5, r5, r1
 8007408:	4629      	mov	r1, r5
 800740a:	4630      	mov	r0, r6
 800740c:	f7ff ffa6 	bl	800735c <sbrk_aligned>
 8007410:	3001      	adds	r0, #1
 8007412:	d03a      	beq.n	800748a <_malloc_r+0xea>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	442b      	add	r3, r5
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	f8d8 3000 	ldr.w	r3, [r8]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	bb62      	cbnz	r2, 800747c <_malloc_r+0xdc>
 8007422:	f8c8 7000 	str.w	r7, [r8]
 8007426:	e00f      	b.n	8007448 <_malloc_r+0xa8>
 8007428:	6822      	ldr	r2, [r4, #0]
 800742a:	1b52      	subs	r2, r2, r5
 800742c:	d420      	bmi.n	8007470 <_malloc_r+0xd0>
 800742e:	2a0b      	cmp	r2, #11
 8007430:	d917      	bls.n	8007462 <_malloc_r+0xc2>
 8007432:	1961      	adds	r1, r4, r5
 8007434:	42a3      	cmp	r3, r4
 8007436:	6025      	str	r5, [r4, #0]
 8007438:	bf18      	it	ne
 800743a:	6059      	strne	r1, [r3, #4]
 800743c:	6863      	ldr	r3, [r4, #4]
 800743e:	bf08      	it	eq
 8007440:	f8c8 1000 	streq.w	r1, [r8]
 8007444:	5162      	str	r2, [r4, r5]
 8007446:	604b      	str	r3, [r1, #4]
 8007448:	4630      	mov	r0, r6
 800744a:	f000 f82f 	bl	80074ac <__malloc_unlock>
 800744e:	f104 000b 	add.w	r0, r4, #11
 8007452:	1d23      	adds	r3, r4, #4
 8007454:	f020 0007 	bic.w	r0, r0, #7
 8007458:	1ac2      	subs	r2, r0, r3
 800745a:	bf1c      	itt	ne
 800745c:	1a1b      	subne	r3, r3, r0
 800745e:	50a3      	strne	r3, [r4, r2]
 8007460:	e7af      	b.n	80073c2 <_malloc_r+0x22>
 8007462:	6862      	ldr	r2, [r4, #4]
 8007464:	42a3      	cmp	r3, r4
 8007466:	bf0c      	ite	eq
 8007468:	f8c8 2000 	streq.w	r2, [r8]
 800746c:	605a      	strne	r2, [r3, #4]
 800746e:	e7eb      	b.n	8007448 <_malloc_r+0xa8>
 8007470:	4623      	mov	r3, r4
 8007472:	6864      	ldr	r4, [r4, #4]
 8007474:	e7ae      	b.n	80073d4 <_malloc_r+0x34>
 8007476:	463c      	mov	r4, r7
 8007478:	687f      	ldr	r7, [r7, #4]
 800747a:	e7b6      	b.n	80073ea <_malloc_r+0x4a>
 800747c:	461a      	mov	r2, r3
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	42a3      	cmp	r3, r4
 8007482:	d1fb      	bne.n	800747c <_malloc_r+0xdc>
 8007484:	2300      	movs	r3, #0
 8007486:	6053      	str	r3, [r2, #4]
 8007488:	e7de      	b.n	8007448 <_malloc_r+0xa8>
 800748a:	230c      	movs	r3, #12
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	4630      	mov	r0, r6
 8007490:	f000 f80c 	bl	80074ac <__malloc_unlock>
 8007494:	e794      	b.n	80073c0 <_malloc_r+0x20>
 8007496:	6005      	str	r5, [r0, #0]
 8007498:	e7d6      	b.n	8007448 <_malloc_r+0xa8>
 800749a:	bf00      	nop
 800749c:	20000610 	.word	0x20000610

080074a0 <__malloc_lock>:
 80074a0:	4801      	ldr	r0, [pc, #4]	@ (80074a8 <__malloc_lock+0x8>)
 80074a2:	f7ff b8ba 	b.w	800661a <__retarget_lock_acquire_recursive>
 80074a6:	bf00      	nop
 80074a8:	20000608 	.word	0x20000608

080074ac <__malloc_unlock>:
 80074ac:	4801      	ldr	r0, [pc, #4]	@ (80074b4 <__malloc_unlock+0x8>)
 80074ae:	f7ff b8b5 	b.w	800661c <__retarget_lock_release_recursive>
 80074b2:	bf00      	nop
 80074b4:	20000608 	.word	0x20000608

080074b8 <_Balloc>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	69c6      	ldr	r6, [r0, #28]
 80074bc:	4604      	mov	r4, r0
 80074be:	460d      	mov	r5, r1
 80074c0:	b976      	cbnz	r6, 80074e0 <_Balloc+0x28>
 80074c2:	2010      	movs	r0, #16
 80074c4:	f7ff ff42 	bl	800734c <malloc>
 80074c8:	4602      	mov	r2, r0
 80074ca:	61e0      	str	r0, [r4, #28]
 80074cc:	b920      	cbnz	r0, 80074d8 <_Balloc+0x20>
 80074ce:	4b18      	ldr	r3, [pc, #96]	@ (8007530 <_Balloc+0x78>)
 80074d0:	4818      	ldr	r0, [pc, #96]	@ (8007534 <_Balloc+0x7c>)
 80074d2:	216b      	movs	r1, #107	@ 0x6b
 80074d4:	f000 fc3c 	bl	8007d50 <__assert_func>
 80074d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074dc:	6006      	str	r6, [r0, #0]
 80074de:	60c6      	str	r6, [r0, #12]
 80074e0:	69e6      	ldr	r6, [r4, #28]
 80074e2:	68f3      	ldr	r3, [r6, #12]
 80074e4:	b183      	cbz	r3, 8007508 <_Balloc+0x50>
 80074e6:	69e3      	ldr	r3, [r4, #28]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074ee:	b9b8      	cbnz	r0, 8007520 <_Balloc+0x68>
 80074f0:	2101      	movs	r1, #1
 80074f2:	fa01 f605 	lsl.w	r6, r1, r5
 80074f6:	1d72      	adds	r2, r6, #5
 80074f8:	0092      	lsls	r2, r2, #2
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 fc46 	bl	8007d8c <_calloc_r>
 8007500:	b160      	cbz	r0, 800751c <_Balloc+0x64>
 8007502:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007506:	e00e      	b.n	8007526 <_Balloc+0x6e>
 8007508:	2221      	movs	r2, #33	@ 0x21
 800750a:	2104      	movs	r1, #4
 800750c:	4620      	mov	r0, r4
 800750e:	f000 fc3d 	bl	8007d8c <_calloc_r>
 8007512:	69e3      	ldr	r3, [r4, #28]
 8007514:	60f0      	str	r0, [r6, #12]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e4      	bne.n	80074e6 <_Balloc+0x2e>
 800751c:	2000      	movs	r0, #0
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	6802      	ldr	r2, [r0, #0]
 8007522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007526:	2300      	movs	r3, #0
 8007528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800752c:	e7f7      	b.n	800751e <_Balloc+0x66>
 800752e:	bf00      	nop
 8007530:	0800929d 	.word	0x0800929d
 8007534:	0800931d 	.word	0x0800931d

08007538 <_Bfree>:
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	69c6      	ldr	r6, [r0, #28]
 800753c:	4605      	mov	r5, r0
 800753e:	460c      	mov	r4, r1
 8007540:	b976      	cbnz	r6, 8007560 <_Bfree+0x28>
 8007542:	2010      	movs	r0, #16
 8007544:	f7ff ff02 	bl	800734c <malloc>
 8007548:	4602      	mov	r2, r0
 800754a:	61e8      	str	r0, [r5, #28]
 800754c:	b920      	cbnz	r0, 8007558 <_Bfree+0x20>
 800754e:	4b09      	ldr	r3, [pc, #36]	@ (8007574 <_Bfree+0x3c>)
 8007550:	4809      	ldr	r0, [pc, #36]	@ (8007578 <_Bfree+0x40>)
 8007552:	218f      	movs	r1, #143	@ 0x8f
 8007554:	f000 fbfc 	bl	8007d50 <__assert_func>
 8007558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800755c:	6006      	str	r6, [r0, #0]
 800755e:	60c6      	str	r6, [r0, #12]
 8007560:	b13c      	cbz	r4, 8007572 <_Bfree+0x3a>
 8007562:	69eb      	ldr	r3, [r5, #28]
 8007564:	6862      	ldr	r2, [r4, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800756c:	6021      	str	r1, [r4, #0]
 800756e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007572:	bd70      	pop	{r4, r5, r6, pc}
 8007574:	0800929d 	.word	0x0800929d
 8007578:	0800931d 	.word	0x0800931d

0800757c <__multadd>:
 800757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007580:	690d      	ldr	r5, [r1, #16]
 8007582:	4607      	mov	r7, r0
 8007584:	460c      	mov	r4, r1
 8007586:	461e      	mov	r6, r3
 8007588:	f101 0c14 	add.w	ip, r1, #20
 800758c:	2000      	movs	r0, #0
 800758e:	f8dc 3000 	ldr.w	r3, [ip]
 8007592:	b299      	uxth	r1, r3
 8007594:	fb02 6101 	mla	r1, r2, r1, r6
 8007598:	0c1e      	lsrs	r6, r3, #16
 800759a:	0c0b      	lsrs	r3, r1, #16
 800759c:	fb02 3306 	mla	r3, r2, r6, r3
 80075a0:	b289      	uxth	r1, r1
 80075a2:	3001      	adds	r0, #1
 80075a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075a8:	4285      	cmp	r5, r0
 80075aa:	f84c 1b04 	str.w	r1, [ip], #4
 80075ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075b2:	dcec      	bgt.n	800758e <__multadd+0x12>
 80075b4:	b30e      	cbz	r6, 80075fa <__multadd+0x7e>
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	42ab      	cmp	r3, r5
 80075ba:	dc19      	bgt.n	80075f0 <__multadd+0x74>
 80075bc:	6861      	ldr	r1, [r4, #4]
 80075be:	4638      	mov	r0, r7
 80075c0:	3101      	adds	r1, #1
 80075c2:	f7ff ff79 	bl	80074b8 <_Balloc>
 80075c6:	4680      	mov	r8, r0
 80075c8:	b928      	cbnz	r0, 80075d6 <__multadd+0x5a>
 80075ca:	4602      	mov	r2, r0
 80075cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007600 <__multadd+0x84>)
 80075ce:	480d      	ldr	r0, [pc, #52]	@ (8007604 <__multadd+0x88>)
 80075d0:	21ba      	movs	r1, #186	@ 0xba
 80075d2:	f000 fbbd 	bl	8007d50 <__assert_func>
 80075d6:	6922      	ldr	r2, [r4, #16]
 80075d8:	3202      	adds	r2, #2
 80075da:	f104 010c 	add.w	r1, r4, #12
 80075de:	0092      	lsls	r2, r2, #2
 80075e0:	300c      	adds	r0, #12
 80075e2:	f000 fba7 	bl	8007d34 <memcpy>
 80075e6:	4621      	mov	r1, r4
 80075e8:	4638      	mov	r0, r7
 80075ea:	f7ff ffa5 	bl	8007538 <_Bfree>
 80075ee:	4644      	mov	r4, r8
 80075f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075f4:	3501      	adds	r5, #1
 80075f6:	615e      	str	r6, [r3, #20]
 80075f8:	6125      	str	r5, [r4, #16]
 80075fa:	4620      	mov	r0, r4
 80075fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007600:	0800930c 	.word	0x0800930c
 8007604:	0800931d 	.word	0x0800931d

08007608 <__hi0bits>:
 8007608:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800760c:	4603      	mov	r3, r0
 800760e:	bf36      	itet	cc
 8007610:	0403      	lslcc	r3, r0, #16
 8007612:	2000      	movcs	r0, #0
 8007614:	2010      	movcc	r0, #16
 8007616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800761a:	bf3c      	itt	cc
 800761c:	021b      	lslcc	r3, r3, #8
 800761e:	3008      	addcc	r0, #8
 8007620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007624:	bf3c      	itt	cc
 8007626:	011b      	lslcc	r3, r3, #4
 8007628:	3004      	addcc	r0, #4
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762e:	bf3c      	itt	cc
 8007630:	009b      	lslcc	r3, r3, #2
 8007632:	3002      	addcc	r0, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	db05      	blt.n	8007644 <__hi0bits+0x3c>
 8007638:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800763c:	f100 0001 	add.w	r0, r0, #1
 8007640:	bf08      	it	eq
 8007642:	2020      	moveq	r0, #32
 8007644:	4770      	bx	lr

08007646 <__lo0bits>:
 8007646:	6803      	ldr	r3, [r0, #0]
 8007648:	4602      	mov	r2, r0
 800764a:	f013 0007 	ands.w	r0, r3, #7
 800764e:	d00b      	beq.n	8007668 <__lo0bits+0x22>
 8007650:	07d9      	lsls	r1, r3, #31
 8007652:	d421      	bmi.n	8007698 <__lo0bits+0x52>
 8007654:	0798      	lsls	r0, r3, #30
 8007656:	bf49      	itett	mi
 8007658:	085b      	lsrmi	r3, r3, #1
 800765a:	089b      	lsrpl	r3, r3, #2
 800765c:	2001      	movmi	r0, #1
 800765e:	6013      	strmi	r3, [r2, #0]
 8007660:	bf5c      	itt	pl
 8007662:	6013      	strpl	r3, [r2, #0]
 8007664:	2002      	movpl	r0, #2
 8007666:	4770      	bx	lr
 8007668:	b299      	uxth	r1, r3
 800766a:	b909      	cbnz	r1, 8007670 <__lo0bits+0x2a>
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	2010      	movs	r0, #16
 8007670:	b2d9      	uxtb	r1, r3
 8007672:	b909      	cbnz	r1, 8007678 <__lo0bits+0x32>
 8007674:	3008      	adds	r0, #8
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	0719      	lsls	r1, r3, #28
 800767a:	bf04      	itt	eq
 800767c:	091b      	lsreq	r3, r3, #4
 800767e:	3004      	addeq	r0, #4
 8007680:	0799      	lsls	r1, r3, #30
 8007682:	bf04      	itt	eq
 8007684:	089b      	lsreq	r3, r3, #2
 8007686:	3002      	addeq	r0, #2
 8007688:	07d9      	lsls	r1, r3, #31
 800768a:	d403      	bmi.n	8007694 <__lo0bits+0x4e>
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	f100 0001 	add.w	r0, r0, #1
 8007692:	d003      	beq.n	800769c <__lo0bits+0x56>
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	4770      	bx	lr
 8007698:	2000      	movs	r0, #0
 800769a:	4770      	bx	lr
 800769c:	2020      	movs	r0, #32
 800769e:	4770      	bx	lr

080076a0 <__i2b>:
 80076a0:	b510      	push	{r4, lr}
 80076a2:	460c      	mov	r4, r1
 80076a4:	2101      	movs	r1, #1
 80076a6:	f7ff ff07 	bl	80074b8 <_Balloc>
 80076aa:	4602      	mov	r2, r0
 80076ac:	b928      	cbnz	r0, 80076ba <__i2b+0x1a>
 80076ae:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <__i2b+0x24>)
 80076b0:	4805      	ldr	r0, [pc, #20]	@ (80076c8 <__i2b+0x28>)
 80076b2:	f240 1145 	movw	r1, #325	@ 0x145
 80076b6:	f000 fb4b 	bl	8007d50 <__assert_func>
 80076ba:	2301      	movs	r3, #1
 80076bc:	6144      	str	r4, [r0, #20]
 80076be:	6103      	str	r3, [r0, #16]
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	bf00      	nop
 80076c4:	0800930c 	.word	0x0800930c
 80076c8:	0800931d 	.word	0x0800931d

080076cc <__multiply>:
 80076cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	4614      	mov	r4, r2
 80076d2:	690a      	ldr	r2, [r1, #16]
 80076d4:	6923      	ldr	r3, [r4, #16]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	bfa8      	it	ge
 80076da:	4623      	movge	r3, r4
 80076dc:	460f      	mov	r7, r1
 80076de:	bfa4      	itt	ge
 80076e0:	460c      	movge	r4, r1
 80076e2:	461f      	movge	r7, r3
 80076e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80076e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80076ec:	68a3      	ldr	r3, [r4, #8]
 80076ee:	6861      	ldr	r1, [r4, #4]
 80076f0:	eb0a 0609 	add.w	r6, sl, r9
 80076f4:	42b3      	cmp	r3, r6
 80076f6:	b085      	sub	sp, #20
 80076f8:	bfb8      	it	lt
 80076fa:	3101      	addlt	r1, #1
 80076fc:	f7ff fedc 	bl	80074b8 <_Balloc>
 8007700:	b930      	cbnz	r0, 8007710 <__multiply+0x44>
 8007702:	4602      	mov	r2, r0
 8007704:	4b44      	ldr	r3, [pc, #272]	@ (8007818 <__multiply+0x14c>)
 8007706:	4845      	ldr	r0, [pc, #276]	@ (800781c <__multiply+0x150>)
 8007708:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800770c:	f000 fb20 	bl	8007d50 <__assert_func>
 8007710:	f100 0514 	add.w	r5, r0, #20
 8007714:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007718:	462b      	mov	r3, r5
 800771a:	2200      	movs	r2, #0
 800771c:	4543      	cmp	r3, r8
 800771e:	d321      	bcc.n	8007764 <__multiply+0x98>
 8007720:	f107 0114 	add.w	r1, r7, #20
 8007724:	f104 0214 	add.w	r2, r4, #20
 8007728:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800772c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007730:	9302      	str	r3, [sp, #8]
 8007732:	1b13      	subs	r3, r2, r4
 8007734:	3b15      	subs	r3, #21
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	3304      	adds	r3, #4
 800773c:	f104 0715 	add.w	r7, r4, #21
 8007740:	42ba      	cmp	r2, r7
 8007742:	bf38      	it	cc
 8007744:	2304      	movcc	r3, #4
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	9b02      	ldr	r3, [sp, #8]
 800774a:	9103      	str	r1, [sp, #12]
 800774c:	428b      	cmp	r3, r1
 800774e:	d80c      	bhi.n	800776a <__multiply+0x9e>
 8007750:	2e00      	cmp	r6, #0
 8007752:	dd03      	ble.n	800775c <__multiply+0x90>
 8007754:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007758:	2b00      	cmp	r3, #0
 800775a:	d05b      	beq.n	8007814 <__multiply+0x148>
 800775c:	6106      	str	r6, [r0, #16]
 800775e:	b005      	add	sp, #20
 8007760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007764:	f843 2b04 	str.w	r2, [r3], #4
 8007768:	e7d8      	b.n	800771c <__multiply+0x50>
 800776a:	f8b1 a000 	ldrh.w	sl, [r1]
 800776e:	f1ba 0f00 	cmp.w	sl, #0
 8007772:	d024      	beq.n	80077be <__multiply+0xf2>
 8007774:	f104 0e14 	add.w	lr, r4, #20
 8007778:	46a9      	mov	r9, r5
 800777a:	f04f 0c00 	mov.w	ip, #0
 800777e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007782:	f8d9 3000 	ldr.w	r3, [r9]
 8007786:	fa1f fb87 	uxth.w	fp, r7
 800778a:	b29b      	uxth	r3, r3
 800778c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007790:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007794:	f8d9 7000 	ldr.w	r7, [r9]
 8007798:	4463      	add	r3, ip
 800779a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800779e:	fb0a c70b 	mla	r7, sl, fp, ip
 80077a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077ac:	4572      	cmp	r2, lr
 80077ae:	f849 3b04 	str.w	r3, [r9], #4
 80077b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80077b6:	d8e2      	bhi.n	800777e <__multiply+0xb2>
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	f845 c003 	str.w	ip, [r5, r3]
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077c4:	3104      	adds	r1, #4
 80077c6:	f1b9 0f00 	cmp.w	r9, #0
 80077ca:	d021      	beq.n	8007810 <__multiply+0x144>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	f104 0c14 	add.w	ip, r4, #20
 80077d2:	46ae      	mov	lr, r5
 80077d4:	f04f 0a00 	mov.w	sl, #0
 80077d8:	f8bc b000 	ldrh.w	fp, [ip]
 80077dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80077e0:	fb09 770b 	mla	r7, r9, fp, r7
 80077e4:	4457      	add	r7, sl
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077ec:	f84e 3b04 	str.w	r3, [lr], #4
 80077f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077f8:	f8be 3000 	ldrh.w	r3, [lr]
 80077fc:	fb09 330a 	mla	r3, r9, sl, r3
 8007800:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007804:	4562      	cmp	r2, ip
 8007806:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800780a:	d8e5      	bhi.n	80077d8 <__multiply+0x10c>
 800780c:	9f01      	ldr	r7, [sp, #4]
 800780e:	51eb      	str	r3, [r5, r7]
 8007810:	3504      	adds	r5, #4
 8007812:	e799      	b.n	8007748 <__multiply+0x7c>
 8007814:	3e01      	subs	r6, #1
 8007816:	e79b      	b.n	8007750 <__multiply+0x84>
 8007818:	0800930c 	.word	0x0800930c
 800781c:	0800931d 	.word	0x0800931d

08007820 <__pow5mult>:
 8007820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007824:	4615      	mov	r5, r2
 8007826:	f012 0203 	ands.w	r2, r2, #3
 800782a:	4607      	mov	r7, r0
 800782c:	460e      	mov	r6, r1
 800782e:	d007      	beq.n	8007840 <__pow5mult+0x20>
 8007830:	4c25      	ldr	r4, [pc, #148]	@ (80078c8 <__pow5mult+0xa8>)
 8007832:	3a01      	subs	r2, #1
 8007834:	2300      	movs	r3, #0
 8007836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800783a:	f7ff fe9f 	bl	800757c <__multadd>
 800783e:	4606      	mov	r6, r0
 8007840:	10ad      	asrs	r5, r5, #2
 8007842:	d03d      	beq.n	80078c0 <__pow5mult+0xa0>
 8007844:	69fc      	ldr	r4, [r7, #28]
 8007846:	b97c      	cbnz	r4, 8007868 <__pow5mult+0x48>
 8007848:	2010      	movs	r0, #16
 800784a:	f7ff fd7f 	bl	800734c <malloc>
 800784e:	4602      	mov	r2, r0
 8007850:	61f8      	str	r0, [r7, #28]
 8007852:	b928      	cbnz	r0, 8007860 <__pow5mult+0x40>
 8007854:	4b1d      	ldr	r3, [pc, #116]	@ (80078cc <__pow5mult+0xac>)
 8007856:	481e      	ldr	r0, [pc, #120]	@ (80078d0 <__pow5mult+0xb0>)
 8007858:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800785c:	f000 fa78 	bl	8007d50 <__assert_func>
 8007860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007864:	6004      	str	r4, [r0, #0]
 8007866:	60c4      	str	r4, [r0, #12]
 8007868:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800786c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007870:	b94c      	cbnz	r4, 8007886 <__pow5mult+0x66>
 8007872:	f240 2171 	movw	r1, #625	@ 0x271
 8007876:	4638      	mov	r0, r7
 8007878:	f7ff ff12 	bl	80076a0 <__i2b>
 800787c:	2300      	movs	r3, #0
 800787e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007882:	4604      	mov	r4, r0
 8007884:	6003      	str	r3, [r0, #0]
 8007886:	f04f 0900 	mov.w	r9, #0
 800788a:	07eb      	lsls	r3, r5, #31
 800788c:	d50a      	bpl.n	80078a4 <__pow5mult+0x84>
 800788e:	4631      	mov	r1, r6
 8007890:	4622      	mov	r2, r4
 8007892:	4638      	mov	r0, r7
 8007894:	f7ff ff1a 	bl	80076cc <__multiply>
 8007898:	4631      	mov	r1, r6
 800789a:	4680      	mov	r8, r0
 800789c:	4638      	mov	r0, r7
 800789e:	f7ff fe4b 	bl	8007538 <_Bfree>
 80078a2:	4646      	mov	r6, r8
 80078a4:	106d      	asrs	r5, r5, #1
 80078a6:	d00b      	beq.n	80078c0 <__pow5mult+0xa0>
 80078a8:	6820      	ldr	r0, [r4, #0]
 80078aa:	b938      	cbnz	r0, 80078bc <__pow5mult+0x9c>
 80078ac:	4622      	mov	r2, r4
 80078ae:	4621      	mov	r1, r4
 80078b0:	4638      	mov	r0, r7
 80078b2:	f7ff ff0b 	bl	80076cc <__multiply>
 80078b6:	6020      	str	r0, [r4, #0]
 80078b8:	f8c0 9000 	str.w	r9, [r0]
 80078bc:	4604      	mov	r4, r0
 80078be:	e7e4      	b.n	800788a <__pow5mult+0x6a>
 80078c0:	4630      	mov	r0, r6
 80078c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c6:	bf00      	nop
 80078c8:	08009378 	.word	0x08009378
 80078cc:	0800929d 	.word	0x0800929d
 80078d0:	0800931d 	.word	0x0800931d

080078d4 <__lshift>:
 80078d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d8:	460c      	mov	r4, r1
 80078da:	6849      	ldr	r1, [r1, #4]
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078e2:	68a3      	ldr	r3, [r4, #8]
 80078e4:	4607      	mov	r7, r0
 80078e6:	4691      	mov	r9, r2
 80078e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078ec:	f108 0601 	add.w	r6, r8, #1
 80078f0:	42b3      	cmp	r3, r6
 80078f2:	db0b      	blt.n	800790c <__lshift+0x38>
 80078f4:	4638      	mov	r0, r7
 80078f6:	f7ff fddf 	bl	80074b8 <_Balloc>
 80078fa:	4605      	mov	r5, r0
 80078fc:	b948      	cbnz	r0, 8007912 <__lshift+0x3e>
 80078fe:	4602      	mov	r2, r0
 8007900:	4b28      	ldr	r3, [pc, #160]	@ (80079a4 <__lshift+0xd0>)
 8007902:	4829      	ldr	r0, [pc, #164]	@ (80079a8 <__lshift+0xd4>)
 8007904:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007908:	f000 fa22 	bl	8007d50 <__assert_func>
 800790c:	3101      	adds	r1, #1
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	e7ee      	b.n	80078f0 <__lshift+0x1c>
 8007912:	2300      	movs	r3, #0
 8007914:	f100 0114 	add.w	r1, r0, #20
 8007918:	f100 0210 	add.w	r2, r0, #16
 800791c:	4618      	mov	r0, r3
 800791e:	4553      	cmp	r3, sl
 8007920:	db33      	blt.n	800798a <__lshift+0xb6>
 8007922:	6920      	ldr	r0, [r4, #16]
 8007924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007928:	f104 0314 	add.w	r3, r4, #20
 800792c:	f019 091f 	ands.w	r9, r9, #31
 8007930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007934:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007938:	d02b      	beq.n	8007992 <__lshift+0xbe>
 800793a:	f1c9 0e20 	rsb	lr, r9, #32
 800793e:	468a      	mov	sl, r1
 8007940:	2200      	movs	r2, #0
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	fa00 f009 	lsl.w	r0, r0, r9
 8007948:	4310      	orrs	r0, r2
 800794a:	f84a 0b04 	str.w	r0, [sl], #4
 800794e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007952:	459c      	cmp	ip, r3
 8007954:	fa22 f20e 	lsr.w	r2, r2, lr
 8007958:	d8f3      	bhi.n	8007942 <__lshift+0x6e>
 800795a:	ebac 0304 	sub.w	r3, ip, r4
 800795e:	3b15      	subs	r3, #21
 8007960:	f023 0303 	bic.w	r3, r3, #3
 8007964:	3304      	adds	r3, #4
 8007966:	f104 0015 	add.w	r0, r4, #21
 800796a:	4584      	cmp	ip, r0
 800796c:	bf38      	it	cc
 800796e:	2304      	movcc	r3, #4
 8007970:	50ca      	str	r2, [r1, r3]
 8007972:	b10a      	cbz	r2, 8007978 <__lshift+0xa4>
 8007974:	f108 0602 	add.w	r6, r8, #2
 8007978:	3e01      	subs	r6, #1
 800797a:	4638      	mov	r0, r7
 800797c:	612e      	str	r6, [r5, #16]
 800797e:	4621      	mov	r1, r4
 8007980:	f7ff fdda 	bl	8007538 <_Bfree>
 8007984:	4628      	mov	r0, r5
 8007986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798a:	f842 0f04 	str.w	r0, [r2, #4]!
 800798e:	3301      	adds	r3, #1
 8007990:	e7c5      	b.n	800791e <__lshift+0x4a>
 8007992:	3904      	subs	r1, #4
 8007994:	f853 2b04 	ldr.w	r2, [r3], #4
 8007998:	f841 2f04 	str.w	r2, [r1, #4]!
 800799c:	459c      	cmp	ip, r3
 800799e:	d8f9      	bhi.n	8007994 <__lshift+0xc0>
 80079a0:	e7ea      	b.n	8007978 <__lshift+0xa4>
 80079a2:	bf00      	nop
 80079a4:	0800930c 	.word	0x0800930c
 80079a8:	0800931d 	.word	0x0800931d

080079ac <__mcmp>:
 80079ac:	690a      	ldr	r2, [r1, #16]
 80079ae:	4603      	mov	r3, r0
 80079b0:	6900      	ldr	r0, [r0, #16]
 80079b2:	1a80      	subs	r0, r0, r2
 80079b4:	b530      	push	{r4, r5, lr}
 80079b6:	d10e      	bne.n	80079d6 <__mcmp+0x2a>
 80079b8:	3314      	adds	r3, #20
 80079ba:	3114      	adds	r1, #20
 80079bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079cc:	4295      	cmp	r5, r2
 80079ce:	d003      	beq.n	80079d8 <__mcmp+0x2c>
 80079d0:	d205      	bcs.n	80079de <__mcmp+0x32>
 80079d2:	f04f 30ff 	mov.w	r0, #4294967295
 80079d6:	bd30      	pop	{r4, r5, pc}
 80079d8:	42a3      	cmp	r3, r4
 80079da:	d3f3      	bcc.n	80079c4 <__mcmp+0x18>
 80079dc:	e7fb      	b.n	80079d6 <__mcmp+0x2a>
 80079de:	2001      	movs	r0, #1
 80079e0:	e7f9      	b.n	80079d6 <__mcmp+0x2a>
	...

080079e4 <__mdiff>:
 80079e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	4689      	mov	r9, r1
 80079ea:	4606      	mov	r6, r0
 80079ec:	4611      	mov	r1, r2
 80079ee:	4648      	mov	r0, r9
 80079f0:	4614      	mov	r4, r2
 80079f2:	f7ff ffdb 	bl	80079ac <__mcmp>
 80079f6:	1e05      	subs	r5, r0, #0
 80079f8:	d112      	bne.n	8007a20 <__mdiff+0x3c>
 80079fa:	4629      	mov	r1, r5
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7ff fd5b 	bl	80074b8 <_Balloc>
 8007a02:	4602      	mov	r2, r0
 8007a04:	b928      	cbnz	r0, 8007a12 <__mdiff+0x2e>
 8007a06:	4b3f      	ldr	r3, [pc, #252]	@ (8007b04 <__mdiff+0x120>)
 8007a08:	f240 2137 	movw	r1, #567	@ 0x237
 8007a0c:	483e      	ldr	r0, [pc, #248]	@ (8007b08 <__mdiff+0x124>)
 8007a0e:	f000 f99f 	bl	8007d50 <__assert_func>
 8007a12:	2301      	movs	r3, #1
 8007a14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a18:	4610      	mov	r0, r2
 8007a1a:	b003      	add	sp, #12
 8007a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a20:	bfbc      	itt	lt
 8007a22:	464b      	movlt	r3, r9
 8007a24:	46a1      	movlt	r9, r4
 8007a26:	4630      	mov	r0, r6
 8007a28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a2c:	bfba      	itte	lt
 8007a2e:	461c      	movlt	r4, r3
 8007a30:	2501      	movlt	r5, #1
 8007a32:	2500      	movge	r5, #0
 8007a34:	f7ff fd40 	bl	80074b8 <_Balloc>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	b918      	cbnz	r0, 8007a44 <__mdiff+0x60>
 8007a3c:	4b31      	ldr	r3, [pc, #196]	@ (8007b04 <__mdiff+0x120>)
 8007a3e:	f240 2145 	movw	r1, #581	@ 0x245
 8007a42:	e7e3      	b.n	8007a0c <__mdiff+0x28>
 8007a44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a48:	6926      	ldr	r6, [r4, #16]
 8007a4a:	60c5      	str	r5, [r0, #12]
 8007a4c:	f109 0310 	add.w	r3, r9, #16
 8007a50:	f109 0514 	add.w	r5, r9, #20
 8007a54:	f104 0e14 	add.w	lr, r4, #20
 8007a58:	f100 0b14 	add.w	fp, r0, #20
 8007a5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	46d9      	mov	r9, fp
 8007a68:	f04f 0c00 	mov.w	ip, #0
 8007a6c:	9b01      	ldr	r3, [sp, #4]
 8007a6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	fa1f f38a 	uxth.w	r3, sl
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	b283      	uxth	r3, r0
 8007a80:	1acb      	subs	r3, r1, r3
 8007a82:	0c00      	lsrs	r0, r0, #16
 8007a84:	4463      	add	r3, ip
 8007a86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a94:	4576      	cmp	r6, lr
 8007a96:	f849 3b04 	str.w	r3, [r9], #4
 8007a9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a9e:	d8e5      	bhi.n	8007a6c <__mdiff+0x88>
 8007aa0:	1b33      	subs	r3, r6, r4
 8007aa2:	3b15      	subs	r3, #21
 8007aa4:	f023 0303 	bic.w	r3, r3, #3
 8007aa8:	3415      	adds	r4, #21
 8007aaa:	3304      	adds	r3, #4
 8007aac:	42a6      	cmp	r6, r4
 8007aae:	bf38      	it	cc
 8007ab0:	2304      	movcc	r3, #4
 8007ab2:	441d      	add	r5, r3
 8007ab4:	445b      	add	r3, fp
 8007ab6:	461e      	mov	r6, r3
 8007ab8:	462c      	mov	r4, r5
 8007aba:	4544      	cmp	r4, r8
 8007abc:	d30e      	bcc.n	8007adc <__mdiff+0xf8>
 8007abe:	f108 0103 	add.w	r1, r8, #3
 8007ac2:	1b49      	subs	r1, r1, r5
 8007ac4:	f021 0103 	bic.w	r1, r1, #3
 8007ac8:	3d03      	subs	r5, #3
 8007aca:	45a8      	cmp	r8, r5
 8007acc:	bf38      	it	cc
 8007ace:	2100      	movcc	r1, #0
 8007ad0:	440b      	add	r3, r1
 8007ad2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ad6:	b191      	cbz	r1, 8007afe <__mdiff+0x11a>
 8007ad8:	6117      	str	r7, [r2, #16]
 8007ada:	e79d      	b.n	8007a18 <__mdiff+0x34>
 8007adc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ae0:	46e6      	mov	lr, ip
 8007ae2:	0c08      	lsrs	r0, r1, #16
 8007ae4:	fa1c fc81 	uxtah	ip, ip, r1
 8007ae8:	4471      	add	r1, lr
 8007aea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007aee:	b289      	uxth	r1, r1
 8007af0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007af4:	f846 1b04 	str.w	r1, [r6], #4
 8007af8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007afc:	e7dd      	b.n	8007aba <__mdiff+0xd6>
 8007afe:	3f01      	subs	r7, #1
 8007b00:	e7e7      	b.n	8007ad2 <__mdiff+0xee>
 8007b02:	bf00      	nop
 8007b04:	0800930c 	.word	0x0800930c
 8007b08:	0800931d 	.word	0x0800931d

08007b0c <__d2b>:
 8007b0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b10:	460f      	mov	r7, r1
 8007b12:	2101      	movs	r1, #1
 8007b14:	ec59 8b10 	vmov	r8, r9, d0
 8007b18:	4616      	mov	r6, r2
 8007b1a:	f7ff fccd 	bl	80074b8 <_Balloc>
 8007b1e:	4604      	mov	r4, r0
 8007b20:	b930      	cbnz	r0, 8007b30 <__d2b+0x24>
 8007b22:	4602      	mov	r2, r0
 8007b24:	4b23      	ldr	r3, [pc, #140]	@ (8007bb4 <__d2b+0xa8>)
 8007b26:	4824      	ldr	r0, [pc, #144]	@ (8007bb8 <__d2b+0xac>)
 8007b28:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b2c:	f000 f910 	bl	8007d50 <__assert_func>
 8007b30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b38:	b10d      	cbz	r5, 8007b3e <__d2b+0x32>
 8007b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	f1b8 0300 	subs.w	r3, r8, #0
 8007b44:	d023      	beq.n	8007b8e <__d2b+0x82>
 8007b46:	4668      	mov	r0, sp
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	f7ff fd7c 	bl	8007646 <__lo0bits>
 8007b4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b52:	b1d0      	cbz	r0, 8007b8a <__d2b+0x7e>
 8007b54:	f1c0 0320 	rsb	r3, r0, #32
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	40c2      	lsrs	r2, r0
 8007b60:	6163      	str	r3, [r4, #20]
 8007b62:	9201      	str	r2, [sp, #4]
 8007b64:	9b01      	ldr	r3, [sp, #4]
 8007b66:	61a3      	str	r3, [r4, #24]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bf0c      	ite	eq
 8007b6c:	2201      	moveq	r2, #1
 8007b6e:	2202      	movne	r2, #2
 8007b70:	6122      	str	r2, [r4, #16]
 8007b72:	b1a5      	cbz	r5, 8007b9e <__d2b+0x92>
 8007b74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b78:	4405      	add	r5, r0
 8007b7a:	603d      	str	r5, [r7, #0]
 8007b7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b80:	6030      	str	r0, [r6, #0]
 8007b82:	4620      	mov	r0, r4
 8007b84:	b003      	add	sp, #12
 8007b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b8a:	6161      	str	r1, [r4, #20]
 8007b8c:	e7ea      	b.n	8007b64 <__d2b+0x58>
 8007b8e:	a801      	add	r0, sp, #4
 8007b90:	f7ff fd59 	bl	8007646 <__lo0bits>
 8007b94:	9b01      	ldr	r3, [sp, #4]
 8007b96:	6163      	str	r3, [r4, #20]
 8007b98:	3020      	adds	r0, #32
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	e7e8      	b.n	8007b70 <__d2b+0x64>
 8007b9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ba2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ba6:	6038      	str	r0, [r7, #0]
 8007ba8:	6918      	ldr	r0, [r3, #16]
 8007baa:	f7ff fd2d 	bl	8007608 <__hi0bits>
 8007bae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bb2:	e7e5      	b.n	8007b80 <__d2b+0x74>
 8007bb4:	0800930c 	.word	0x0800930c
 8007bb8:	0800931d 	.word	0x0800931d

08007bbc <__sflush_r>:
 8007bbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc4:	0716      	lsls	r6, r2, #28
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	460c      	mov	r4, r1
 8007bca:	d454      	bmi.n	8007c76 <__sflush_r+0xba>
 8007bcc:	684b      	ldr	r3, [r1, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dc02      	bgt.n	8007bd8 <__sflush_r+0x1c>
 8007bd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dd48      	ble.n	8007c6a <__sflush_r+0xae>
 8007bd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	d045      	beq.n	8007c6a <__sflush_r+0xae>
 8007bde:	2300      	movs	r3, #0
 8007be0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007be4:	682f      	ldr	r7, [r5, #0]
 8007be6:	6a21      	ldr	r1, [r4, #32]
 8007be8:	602b      	str	r3, [r5, #0]
 8007bea:	d030      	beq.n	8007c4e <__sflush_r+0x92>
 8007bec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	0759      	lsls	r1, r3, #29
 8007bf2:	d505      	bpl.n	8007c00 <__sflush_r+0x44>
 8007bf4:	6863      	ldr	r3, [r4, #4]
 8007bf6:	1ad2      	subs	r2, r2, r3
 8007bf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bfa:	b10b      	cbz	r3, 8007c00 <__sflush_r+0x44>
 8007bfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	2300      	movs	r3, #0
 8007c02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c04:	6a21      	ldr	r1, [r4, #32]
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b0      	blx	r6
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	d106      	bne.n	8007c1e <__sflush_r+0x62>
 8007c10:	6829      	ldr	r1, [r5, #0]
 8007c12:	291d      	cmp	r1, #29
 8007c14:	d82b      	bhi.n	8007c6e <__sflush_r+0xb2>
 8007c16:	4a2a      	ldr	r2, [pc, #168]	@ (8007cc0 <__sflush_r+0x104>)
 8007c18:	410a      	asrs	r2, r1
 8007c1a:	07d6      	lsls	r6, r2, #31
 8007c1c:	d427      	bmi.n	8007c6e <__sflush_r+0xb2>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	6062      	str	r2, [r4, #4]
 8007c22:	04d9      	lsls	r1, r3, #19
 8007c24:	6922      	ldr	r2, [r4, #16]
 8007c26:	6022      	str	r2, [r4, #0]
 8007c28:	d504      	bpl.n	8007c34 <__sflush_r+0x78>
 8007c2a:	1c42      	adds	r2, r0, #1
 8007c2c:	d101      	bne.n	8007c32 <__sflush_r+0x76>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	b903      	cbnz	r3, 8007c34 <__sflush_r+0x78>
 8007c32:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c36:	602f      	str	r7, [r5, #0]
 8007c38:	b1b9      	cbz	r1, 8007c6a <__sflush_r+0xae>
 8007c3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c3e:	4299      	cmp	r1, r3
 8007c40:	d002      	beq.n	8007c48 <__sflush_r+0x8c>
 8007c42:	4628      	mov	r0, r5
 8007c44:	f7ff fb38 	bl	80072b8 <_free_r>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c4c:	e00d      	b.n	8007c6a <__sflush_r+0xae>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4628      	mov	r0, r5
 8007c52:	47b0      	blx	r6
 8007c54:	4602      	mov	r2, r0
 8007c56:	1c50      	adds	r0, r2, #1
 8007c58:	d1c9      	bne.n	8007bee <__sflush_r+0x32>
 8007c5a:	682b      	ldr	r3, [r5, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0c6      	beq.n	8007bee <__sflush_r+0x32>
 8007c60:	2b1d      	cmp	r3, #29
 8007c62:	d001      	beq.n	8007c68 <__sflush_r+0xac>
 8007c64:	2b16      	cmp	r3, #22
 8007c66:	d11e      	bne.n	8007ca6 <__sflush_r+0xea>
 8007c68:	602f      	str	r7, [r5, #0]
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	e022      	b.n	8007cb4 <__sflush_r+0xf8>
 8007c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c72:	b21b      	sxth	r3, r3
 8007c74:	e01b      	b.n	8007cae <__sflush_r+0xf2>
 8007c76:	690f      	ldr	r7, [r1, #16]
 8007c78:	2f00      	cmp	r7, #0
 8007c7a:	d0f6      	beq.n	8007c6a <__sflush_r+0xae>
 8007c7c:	0793      	lsls	r3, r2, #30
 8007c7e:	680e      	ldr	r6, [r1, #0]
 8007c80:	bf08      	it	eq
 8007c82:	694b      	ldreq	r3, [r1, #20]
 8007c84:	600f      	str	r7, [r1, #0]
 8007c86:	bf18      	it	ne
 8007c88:	2300      	movne	r3, #0
 8007c8a:	eba6 0807 	sub.w	r8, r6, r7
 8007c8e:	608b      	str	r3, [r1, #8]
 8007c90:	f1b8 0f00 	cmp.w	r8, #0
 8007c94:	dde9      	ble.n	8007c6a <__sflush_r+0xae>
 8007c96:	6a21      	ldr	r1, [r4, #32]
 8007c98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c9a:	4643      	mov	r3, r8
 8007c9c:	463a      	mov	r2, r7
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	47b0      	blx	r6
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	dc08      	bgt.n	8007cb8 <__sflush_r+0xfc>
 8007ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	4407      	add	r7, r0
 8007cba:	eba8 0800 	sub.w	r8, r8, r0
 8007cbe:	e7e7      	b.n	8007c90 <__sflush_r+0xd4>
 8007cc0:	dfbffffe 	.word	0xdfbffffe

08007cc4 <_fflush_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	690b      	ldr	r3, [r1, #16]
 8007cc8:	4605      	mov	r5, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	b913      	cbnz	r3, 8007cd4 <_fflush_r+0x10>
 8007cce:	2500      	movs	r5, #0
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	b118      	cbz	r0, 8007cde <_fflush_r+0x1a>
 8007cd6:	6a03      	ldr	r3, [r0, #32]
 8007cd8:	b90b      	cbnz	r3, 8007cde <_fflush_r+0x1a>
 8007cda:	f7fe fba7 	bl	800642c <__sinit>
 8007cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0f3      	beq.n	8007cce <_fflush_r+0xa>
 8007ce6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ce8:	07d0      	lsls	r0, r2, #31
 8007cea:	d404      	bmi.n	8007cf6 <_fflush_r+0x32>
 8007cec:	0599      	lsls	r1, r3, #22
 8007cee:	d402      	bmi.n	8007cf6 <_fflush_r+0x32>
 8007cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cf2:	f7fe fc92 	bl	800661a <__retarget_lock_acquire_recursive>
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	f7ff ff5f 	bl	8007bbc <__sflush_r>
 8007cfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d00:	07da      	lsls	r2, r3, #31
 8007d02:	4605      	mov	r5, r0
 8007d04:	d4e4      	bmi.n	8007cd0 <_fflush_r+0xc>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	059b      	lsls	r3, r3, #22
 8007d0a:	d4e1      	bmi.n	8007cd0 <_fflush_r+0xc>
 8007d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d0e:	f7fe fc85 	bl	800661c <__retarget_lock_release_recursive>
 8007d12:	e7dd      	b.n	8007cd0 <_fflush_r+0xc>

08007d14 <_sbrk_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d06      	ldr	r5, [pc, #24]	@ (8007d30 <_sbrk_r+0x1c>)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	f7fa faf0 	bl	8002304 <_sbrk>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_sbrk_r+0x1a>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_sbrk_r+0x1a>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	20000604 	.word	0x20000604

08007d34 <memcpy>:
 8007d34:	440a      	add	r2, r1
 8007d36:	4291      	cmp	r1, r2
 8007d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d3c:	d100      	bne.n	8007d40 <memcpy+0xc>
 8007d3e:	4770      	bx	lr
 8007d40:	b510      	push	{r4, lr}
 8007d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d4a:	4291      	cmp	r1, r2
 8007d4c:	d1f9      	bne.n	8007d42 <memcpy+0xe>
 8007d4e:	bd10      	pop	{r4, pc}

08007d50 <__assert_func>:
 8007d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d52:	4614      	mov	r4, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	4b09      	ldr	r3, [pc, #36]	@ (8007d7c <__assert_func+0x2c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	68d8      	ldr	r0, [r3, #12]
 8007d5e:	b954      	cbnz	r4, 8007d76 <__assert_func+0x26>
 8007d60:	4b07      	ldr	r3, [pc, #28]	@ (8007d80 <__assert_func+0x30>)
 8007d62:	461c      	mov	r4, r3
 8007d64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d68:	9100      	str	r1, [sp, #0]
 8007d6a:	462b      	mov	r3, r5
 8007d6c:	4905      	ldr	r1, [pc, #20]	@ (8007d84 <__assert_func+0x34>)
 8007d6e:	f000 f841 	bl	8007df4 <fiprintf>
 8007d72:	f000 f851 	bl	8007e18 <abort>
 8007d76:	4b04      	ldr	r3, [pc, #16]	@ (8007d88 <__assert_func+0x38>)
 8007d78:	e7f4      	b.n	8007d64 <__assert_func+0x14>
 8007d7a:	bf00      	nop
 8007d7c:	2000001c 	.word	0x2000001c
 8007d80:	080094bd 	.word	0x080094bd
 8007d84:	0800948f 	.word	0x0800948f
 8007d88:	08009482 	.word	0x08009482

08007d8c <_calloc_r>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	fba1 5402 	umull	r5, r4, r1, r2
 8007d92:	b93c      	cbnz	r4, 8007da4 <_calloc_r+0x18>
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7ff fb03 	bl	80073a0 <_malloc_r>
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	b928      	cbnz	r0, 8007daa <_calloc_r+0x1e>
 8007d9e:	2600      	movs	r6, #0
 8007da0:	4630      	mov	r0, r6
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	220c      	movs	r2, #12
 8007da6:	6002      	str	r2, [r0, #0]
 8007da8:	e7f9      	b.n	8007d9e <_calloc_r+0x12>
 8007daa:	462a      	mov	r2, r5
 8007dac:	4621      	mov	r1, r4
 8007dae:	f7fe fbb6 	bl	800651e <memset>
 8007db2:	e7f5      	b.n	8007da0 <_calloc_r+0x14>

08007db4 <__ascii_mbtowc>:
 8007db4:	b082      	sub	sp, #8
 8007db6:	b901      	cbnz	r1, 8007dba <__ascii_mbtowc+0x6>
 8007db8:	a901      	add	r1, sp, #4
 8007dba:	b142      	cbz	r2, 8007dce <__ascii_mbtowc+0x1a>
 8007dbc:	b14b      	cbz	r3, 8007dd2 <__ascii_mbtowc+0x1e>
 8007dbe:	7813      	ldrb	r3, [r2, #0]
 8007dc0:	600b      	str	r3, [r1, #0]
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	1e10      	subs	r0, r2, #0
 8007dc6:	bf18      	it	ne
 8007dc8:	2001      	movne	r0, #1
 8007dca:	b002      	add	sp, #8
 8007dcc:	4770      	bx	lr
 8007dce:	4610      	mov	r0, r2
 8007dd0:	e7fb      	b.n	8007dca <__ascii_mbtowc+0x16>
 8007dd2:	f06f 0001 	mvn.w	r0, #1
 8007dd6:	e7f8      	b.n	8007dca <__ascii_mbtowc+0x16>

08007dd8 <__ascii_wctomb>:
 8007dd8:	4603      	mov	r3, r0
 8007dda:	4608      	mov	r0, r1
 8007ddc:	b141      	cbz	r1, 8007df0 <__ascii_wctomb+0x18>
 8007dde:	2aff      	cmp	r2, #255	@ 0xff
 8007de0:	d904      	bls.n	8007dec <__ascii_wctomb+0x14>
 8007de2:	228a      	movs	r2, #138	@ 0x8a
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dea:	4770      	bx	lr
 8007dec:	700a      	strb	r2, [r1, #0]
 8007dee:	2001      	movs	r0, #1
 8007df0:	4770      	bx	lr
	...

08007df4 <fiprintf>:
 8007df4:	b40e      	push	{r1, r2, r3}
 8007df6:	b503      	push	{r0, r1, lr}
 8007df8:	4601      	mov	r1, r0
 8007dfa:	ab03      	add	r3, sp, #12
 8007dfc:	4805      	ldr	r0, [pc, #20]	@ (8007e14 <fiprintf+0x20>)
 8007dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e02:	6800      	ldr	r0, [r0, #0]
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	f000 f837 	bl	8007e78 <_vfiprintf_r>
 8007e0a:	b002      	add	sp, #8
 8007e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e10:	b003      	add	sp, #12
 8007e12:	4770      	bx	lr
 8007e14:	2000001c 	.word	0x2000001c

08007e18 <abort>:
 8007e18:	b508      	push	{r3, lr}
 8007e1a:	2006      	movs	r0, #6
 8007e1c:	f000 fa00 	bl	8008220 <raise>
 8007e20:	2001      	movs	r0, #1
 8007e22:	f7fa f9f7 	bl	8002214 <_exit>

08007e26 <__sfputc_r>:
 8007e26:	6893      	ldr	r3, [r2, #8]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	b410      	push	{r4}
 8007e2e:	6093      	str	r3, [r2, #8]
 8007e30:	da08      	bge.n	8007e44 <__sfputc_r+0x1e>
 8007e32:	6994      	ldr	r4, [r2, #24]
 8007e34:	42a3      	cmp	r3, r4
 8007e36:	db01      	blt.n	8007e3c <__sfputc_r+0x16>
 8007e38:	290a      	cmp	r1, #10
 8007e3a:	d103      	bne.n	8007e44 <__sfputc_r+0x1e>
 8007e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e40:	f000 b932 	b.w	80080a8 <__swbuf_r>
 8007e44:	6813      	ldr	r3, [r2, #0]
 8007e46:	1c58      	adds	r0, r3, #1
 8007e48:	6010      	str	r0, [r2, #0]
 8007e4a:	7019      	strb	r1, [r3, #0]
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <__sfputs_r>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	4606      	mov	r6, r0
 8007e58:	460f      	mov	r7, r1
 8007e5a:	4614      	mov	r4, r2
 8007e5c:	18d5      	adds	r5, r2, r3
 8007e5e:	42ac      	cmp	r4, r5
 8007e60:	d101      	bne.n	8007e66 <__sfputs_r+0x12>
 8007e62:	2000      	movs	r0, #0
 8007e64:	e007      	b.n	8007e76 <__sfputs_r+0x22>
 8007e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6a:	463a      	mov	r2, r7
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	f7ff ffda 	bl	8007e26 <__sfputc_r>
 8007e72:	1c43      	adds	r3, r0, #1
 8007e74:	d1f3      	bne.n	8007e5e <__sfputs_r+0xa>
 8007e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e78 <_vfiprintf_r>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	460d      	mov	r5, r1
 8007e7e:	b09d      	sub	sp, #116	@ 0x74
 8007e80:	4614      	mov	r4, r2
 8007e82:	4698      	mov	r8, r3
 8007e84:	4606      	mov	r6, r0
 8007e86:	b118      	cbz	r0, 8007e90 <_vfiprintf_r+0x18>
 8007e88:	6a03      	ldr	r3, [r0, #32]
 8007e8a:	b90b      	cbnz	r3, 8007e90 <_vfiprintf_r+0x18>
 8007e8c:	f7fe face 	bl	800642c <__sinit>
 8007e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e92:	07d9      	lsls	r1, r3, #31
 8007e94:	d405      	bmi.n	8007ea2 <_vfiprintf_r+0x2a>
 8007e96:	89ab      	ldrh	r3, [r5, #12]
 8007e98:	059a      	lsls	r2, r3, #22
 8007e9a:	d402      	bmi.n	8007ea2 <_vfiprintf_r+0x2a>
 8007e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e9e:	f7fe fbbc 	bl	800661a <__retarget_lock_acquire_recursive>
 8007ea2:	89ab      	ldrh	r3, [r5, #12]
 8007ea4:	071b      	lsls	r3, r3, #28
 8007ea6:	d501      	bpl.n	8007eac <_vfiprintf_r+0x34>
 8007ea8:	692b      	ldr	r3, [r5, #16]
 8007eaa:	b99b      	cbnz	r3, 8007ed4 <_vfiprintf_r+0x5c>
 8007eac:	4629      	mov	r1, r5
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f000 f938 	bl	8008124 <__swsetup_r>
 8007eb4:	b170      	cbz	r0, 8007ed4 <_vfiprintf_r+0x5c>
 8007eb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eb8:	07dc      	lsls	r4, r3, #31
 8007eba:	d504      	bpl.n	8007ec6 <_vfiprintf_r+0x4e>
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	b01d      	add	sp, #116	@ 0x74
 8007ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec6:	89ab      	ldrh	r3, [r5, #12]
 8007ec8:	0598      	lsls	r0, r3, #22
 8007eca:	d4f7      	bmi.n	8007ebc <_vfiprintf_r+0x44>
 8007ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ece:	f7fe fba5 	bl	800661c <__retarget_lock_release_recursive>
 8007ed2:	e7f3      	b.n	8007ebc <_vfiprintf_r+0x44>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ed8:	2320      	movs	r3, #32
 8007eda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ee2:	2330      	movs	r3, #48	@ 0x30
 8007ee4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008094 <_vfiprintf_r+0x21c>
 8007ee8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007eec:	f04f 0901 	mov.w	r9, #1
 8007ef0:	4623      	mov	r3, r4
 8007ef2:	469a      	mov	sl, r3
 8007ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ef8:	b10a      	cbz	r2, 8007efe <_vfiprintf_r+0x86>
 8007efa:	2a25      	cmp	r2, #37	@ 0x25
 8007efc:	d1f9      	bne.n	8007ef2 <_vfiprintf_r+0x7a>
 8007efe:	ebba 0b04 	subs.w	fp, sl, r4
 8007f02:	d00b      	beq.n	8007f1c <_vfiprintf_r+0xa4>
 8007f04:	465b      	mov	r3, fp
 8007f06:	4622      	mov	r2, r4
 8007f08:	4629      	mov	r1, r5
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7ff ffa2 	bl	8007e54 <__sfputs_r>
 8007f10:	3001      	adds	r0, #1
 8007f12:	f000 80a7 	beq.w	8008064 <_vfiprintf_r+0x1ec>
 8007f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f18:	445a      	add	r2, fp
 8007f1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 809f 	beq.w	8008064 <_vfiprintf_r+0x1ec>
 8007f26:	2300      	movs	r3, #0
 8007f28:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f30:	f10a 0a01 	add.w	sl, sl, #1
 8007f34:	9304      	str	r3, [sp, #16]
 8007f36:	9307      	str	r3, [sp, #28]
 8007f38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f3e:	4654      	mov	r4, sl
 8007f40:	2205      	movs	r2, #5
 8007f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f46:	4853      	ldr	r0, [pc, #332]	@ (8008094 <_vfiprintf_r+0x21c>)
 8007f48:	f7f8 f94a 	bl	80001e0 <memchr>
 8007f4c:	9a04      	ldr	r2, [sp, #16]
 8007f4e:	b9d8      	cbnz	r0, 8007f88 <_vfiprintf_r+0x110>
 8007f50:	06d1      	lsls	r1, r2, #27
 8007f52:	bf44      	itt	mi
 8007f54:	2320      	movmi	r3, #32
 8007f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f5a:	0713      	lsls	r3, r2, #28
 8007f5c:	bf44      	itt	mi
 8007f5e:	232b      	movmi	r3, #43	@ 0x2b
 8007f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f64:	f89a 3000 	ldrb.w	r3, [sl]
 8007f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f6a:	d015      	beq.n	8007f98 <_vfiprintf_r+0x120>
 8007f6c:	9a07      	ldr	r2, [sp, #28]
 8007f6e:	4654      	mov	r4, sl
 8007f70:	2000      	movs	r0, #0
 8007f72:	f04f 0c0a 	mov.w	ip, #10
 8007f76:	4621      	mov	r1, r4
 8007f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f7c:	3b30      	subs	r3, #48	@ 0x30
 8007f7e:	2b09      	cmp	r3, #9
 8007f80:	d94b      	bls.n	800801a <_vfiprintf_r+0x1a2>
 8007f82:	b1b0      	cbz	r0, 8007fb2 <_vfiprintf_r+0x13a>
 8007f84:	9207      	str	r2, [sp, #28]
 8007f86:	e014      	b.n	8007fb2 <_vfiprintf_r+0x13a>
 8007f88:	eba0 0308 	sub.w	r3, r0, r8
 8007f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f90:	4313      	orrs	r3, r2
 8007f92:	9304      	str	r3, [sp, #16]
 8007f94:	46a2      	mov	sl, r4
 8007f96:	e7d2      	b.n	8007f3e <_vfiprintf_r+0xc6>
 8007f98:	9b03      	ldr	r3, [sp, #12]
 8007f9a:	1d19      	adds	r1, r3, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	9103      	str	r1, [sp, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	bfbb      	ittet	lt
 8007fa4:	425b      	neglt	r3, r3
 8007fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8007faa:	9307      	strge	r3, [sp, #28]
 8007fac:	9307      	strlt	r3, [sp, #28]
 8007fae:	bfb8      	it	lt
 8007fb0:	9204      	strlt	r2, [sp, #16]
 8007fb2:	7823      	ldrb	r3, [r4, #0]
 8007fb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fb6:	d10a      	bne.n	8007fce <_vfiprintf_r+0x156>
 8007fb8:	7863      	ldrb	r3, [r4, #1]
 8007fba:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fbc:	d132      	bne.n	8008024 <_vfiprintf_r+0x1ac>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	1d1a      	adds	r2, r3, #4
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	9203      	str	r2, [sp, #12]
 8007fc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fca:	3402      	adds	r4, #2
 8007fcc:	9305      	str	r3, [sp, #20]
 8007fce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080a4 <_vfiprintf_r+0x22c>
 8007fd2:	7821      	ldrb	r1, [r4, #0]
 8007fd4:	2203      	movs	r2, #3
 8007fd6:	4650      	mov	r0, sl
 8007fd8:	f7f8 f902 	bl	80001e0 <memchr>
 8007fdc:	b138      	cbz	r0, 8007fee <_vfiprintf_r+0x176>
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	eba0 000a 	sub.w	r0, r0, sl
 8007fe4:	2240      	movs	r2, #64	@ 0x40
 8007fe6:	4082      	lsls	r2, r0
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	3401      	adds	r4, #1
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff2:	4829      	ldr	r0, [pc, #164]	@ (8008098 <_vfiprintf_r+0x220>)
 8007ff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ff8:	2206      	movs	r2, #6
 8007ffa:	f7f8 f8f1 	bl	80001e0 <memchr>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d03f      	beq.n	8008082 <_vfiprintf_r+0x20a>
 8008002:	4b26      	ldr	r3, [pc, #152]	@ (800809c <_vfiprintf_r+0x224>)
 8008004:	bb1b      	cbnz	r3, 800804e <_vfiprintf_r+0x1d6>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	3307      	adds	r3, #7
 800800a:	f023 0307 	bic.w	r3, r3, #7
 800800e:	3308      	adds	r3, #8
 8008010:	9303      	str	r3, [sp, #12]
 8008012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008014:	443b      	add	r3, r7
 8008016:	9309      	str	r3, [sp, #36]	@ 0x24
 8008018:	e76a      	b.n	8007ef0 <_vfiprintf_r+0x78>
 800801a:	fb0c 3202 	mla	r2, ip, r2, r3
 800801e:	460c      	mov	r4, r1
 8008020:	2001      	movs	r0, #1
 8008022:	e7a8      	b.n	8007f76 <_vfiprintf_r+0xfe>
 8008024:	2300      	movs	r3, #0
 8008026:	3401      	adds	r4, #1
 8008028:	9305      	str	r3, [sp, #20]
 800802a:	4619      	mov	r1, r3
 800802c:	f04f 0c0a 	mov.w	ip, #10
 8008030:	4620      	mov	r0, r4
 8008032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008036:	3a30      	subs	r2, #48	@ 0x30
 8008038:	2a09      	cmp	r2, #9
 800803a:	d903      	bls.n	8008044 <_vfiprintf_r+0x1cc>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0c6      	beq.n	8007fce <_vfiprintf_r+0x156>
 8008040:	9105      	str	r1, [sp, #20]
 8008042:	e7c4      	b.n	8007fce <_vfiprintf_r+0x156>
 8008044:	fb0c 2101 	mla	r1, ip, r1, r2
 8008048:	4604      	mov	r4, r0
 800804a:	2301      	movs	r3, #1
 800804c:	e7f0      	b.n	8008030 <_vfiprintf_r+0x1b8>
 800804e:	ab03      	add	r3, sp, #12
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	462a      	mov	r2, r5
 8008054:	4b12      	ldr	r3, [pc, #72]	@ (80080a0 <_vfiprintf_r+0x228>)
 8008056:	a904      	add	r1, sp, #16
 8008058:	4630      	mov	r0, r6
 800805a:	f7fd fda3 	bl	8005ba4 <_printf_float>
 800805e:	4607      	mov	r7, r0
 8008060:	1c78      	adds	r0, r7, #1
 8008062:	d1d6      	bne.n	8008012 <_vfiprintf_r+0x19a>
 8008064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008066:	07d9      	lsls	r1, r3, #31
 8008068:	d405      	bmi.n	8008076 <_vfiprintf_r+0x1fe>
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	059a      	lsls	r2, r3, #22
 800806e:	d402      	bmi.n	8008076 <_vfiprintf_r+0x1fe>
 8008070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008072:	f7fe fad3 	bl	800661c <__retarget_lock_release_recursive>
 8008076:	89ab      	ldrh	r3, [r5, #12]
 8008078:	065b      	lsls	r3, r3, #25
 800807a:	f53f af1f 	bmi.w	8007ebc <_vfiprintf_r+0x44>
 800807e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008080:	e71e      	b.n	8007ec0 <_vfiprintf_r+0x48>
 8008082:	ab03      	add	r3, sp, #12
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	462a      	mov	r2, r5
 8008088:	4b05      	ldr	r3, [pc, #20]	@ (80080a0 <_vfiprintf_r+0x228>)
 800808a:	a904      	add	r1, sp, #16
 800808c:	4630      	mov	r0, r6
 800808e:	f7fe f821 	bl	80060d4 <_printf_i>
 8008092:	e7e4      	b.n	800805e <_vfiprintf_r+0x1e6>
 8008094:	080095bf 	.word	0x080095bf
 8008098:	080095c9 	.word	0x080095c9
 800809c:	08005ba5 	.word	0x08005ba5
 80080a0:	08007e55 	.word	0x08007e55
 80080a4:	080095c5 	.word	0x080095c5

080080a8 <__swbuf_r>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	460e      	mov	r6, r1
 80080ac:	4614      	mov	r4, r2
 80080ae:	4605      	mov	r5, r0
 80080b0:	b118      	cbz	r0, 80080ba <__swbuf_r+0x12>
 80080b2:	6a03      	ldr	r3, [r0, #32]
 80080b4:	b90b      	cbnz	r3, 80080ba <__swbuf_r+0x12>
 80080b6:	f7fe f9b9 	bl	800642c <__sinit>
 80080ba:	69a3      	ldr	r3, [r4, #24]
 80080bc:	60a3      	str	r3, [r4, #8]
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	071a      	lsls	r2, r3, #28
 80080c2:	d501      	bpl.n	80080c8 <__swbuf_r+0x20>
 80080c4:	6923      	ldr	r3, [r4, #16]
 80080c6:	b943      	cbnz	r3, 80080da <__swbuf_r+0x32>
 80080c8:	4621      	mov	r1, r4
 80080ca:	4628      	mov	r0, r5
 80080cc:	f000 f82a 	bl	8008124 <__swsetup_r>
 80080d0:	b118      	cbz	r0, 80080da <__swbuf_r+0x32>
 80080d2:	f04f 37ff 	mov.w	r7, #4294967295
 80080d6:	4638      	mov	r0, r7
 80080d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	6922      	ldr	r2, [r4, #16]
 80080de:	1a98      	subs	r0, r3, r2
 80080e0:	6963      	ldr	r3, [r4, #20]
 80080e2:	b2f6      	uxtb	r6, r6
 80080e4:	4283      	cmp	r3, r0
 80080e6:	4637      	mov	r7, r6
 80080e8:	dc05      	bgt.n	80080f6 <__swbuf_r+0x4e>
 80080ea:	4621      	mov	r1, r4
 80080ec:	4628      	mov	r0, r5
 80080ee:	f7ff fde9 	bl	8007cc4 <_fflush_r>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d1ed      	bne.n	80080d2 <__swbuf_r+0x2a>
 80080f6:	68a3      	ldr	r3, [r4, #8]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	60a3      	str	r3, [r4, #8]
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	6022      	str	r2, [r4, #0]
 8008102:	701e      	strb	r6, [r3, #0]
 8008104:	6962      	ldr	r2, [r4, #20]
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	429a      	cmp	r2, r3
 800810a:	d004      	beq.n	8008116 <__swbuf_r+0x6e>
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	07db      	lsls	r3, r3, #31
 8008110:	d5e1      	bpl.n	80080d6 <__swbuf_r+0x2e>
 8008112:	2e0a      	cmp	r6, #10
 8008114:	d1df      	bne.n	80080d6 <__swbuf_r+0x2e>
 8008116:	4621      	mov	r1, r4
 8008118:	4628      	mov	r0, r5
 800811a:	f7ff fdd3 	bl	8007cc4 <_fflush_r>
 800811e:	2800      	cmp	r0, #0
 8008120:	d0d9      	beq.n	80080d6 <__swbuf_r+0x2e>
 8008122:	e7d6      	b.n	80080d2 <__swbuf_r+0x2a>

08008124 <__swsetup_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4b29      	ldr	r3, [pc, #164]	@ (80081cc <__swsetup_r+0xa8>)
 8008128:	4605      	mov	r5, r0
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	460c      	mov	r4, r1
 800812e:	b118      	cbz	r0, 8008138 <__swsetup_r+0x14>
 8008130:	6a03      	ldr	r3, [r0, #32]
 8008132:	b90b      	cbnz	r3, 8008138 <__swsetup_r+0x14>
 8008134:	f7fe f97a 	bl	800642c <__sinit>
 8008138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800813c:	0719      	lsls	r1, r3, #28
 800813e:	d422      	bmi.n	8008186 <__swsetup_r+0x62>
 8008140:	06da      	lsls	r2, r3, #27
 8008142:	d407      	bmi.n	8008154 <__swsetup_r+0x30>
 8008144:	2209      	movs	r2, #9
 8008146:	602a      	str	r2, [r5, #0]
 8008148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800814c:	81a3      	strh	r3, [r4, #12]
 800814e:	f04f 30ff 	mov.w	r0, #4294967295
 8008152:	e033      	b.n	80081bc <__swsetup_r+0x98>
 8008154:	0758      	lsls	r0, r3, #29
 8008156:	d512      	bpl.n	800817e <__swsetup_r+0x5a>
 8008158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800815a:	b141      	cbz	r1, 800816e <__swsetup_r+0x4a>
 800815c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008160:	4299      	cmp	r1, r3
 8008162:	d002      	beq.n	800816a <__swsetup_r+0x46>
 8008164:	4628      	mov	r0, r5
 8008166:	f7ff f8a7 	bl	80072b8 <_free_r>
 800816a:	2300      	movs	r3, #0
 800816c:	6363      	str	r3, [r4, #52]	@ 0x34
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008174:	81a3      	strh	r3, [r4, #12]
 8008176:	2300      	movs	r3, #0
 8008178:	6063      	str	r3, [r4, #4]
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	f043 0308 	orr.w	r3, r3, #8
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	6923      	ldr	r3, [r4, #16]
 8008188:	b94b      	cbnz	r3, 800819e <__swsetup_r+0x7a>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008194:	d003      	beq.n	800819e <__swsetup_r+0x7a>
 8008196:	4621      	mov	r1, r4
 8008198:	4628      	mov	r0, r5
 800819a:	f000 f883 	bl	80082a4 <__smakebuf_r>
 800819e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a2:	f013 0201 	ands.w	r2, r3, #1
 80081a6:	d00a      	beq.n	80081be <__swsetup_r+0x9a>
 80081a8:	2200      	movs	r2, #0
 80081aa:	60a2      	str	r2, [r4, #8]
 80081ac:	6962      	ldr	r2, [r4, #20]
 80081ae:	4252      	negs	r2, r2
 80081b0:	61a2      	str	r2, [r4, #24]
 80081b2:	6922      	ldr	r2, [r4, #16]
 80081b4:	b942      	cbnz	r2, 80081c8 <__swsetup_r+0xa4>
 80081b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081ba:	d1c5      	bne.n	8008148 <__swsetup_r+0x24>
 80081bc:	bd38      	pop	{r3, r4, r5, pc}
 80081be:	0799      	lsls	r1, r3, #30
 80081c0:	bf58      	it	pl
 80081c2:	6962      	ldrpl	r2, [r4, #20]
 80081c4:	60a2      	str	r2, [r4, #8]
 80081c6:	e7f4      	b.n	80081b2 <__swsetup_r+0x8e>
 80081c8:	2000      	movs	r0, #0
 80081ca:	e7f7      	b.n	80081bc <__swsetup_r+0x98>
 80081cc:	2000001c 	.word	0x2000001c

080081d0 <_raise_r>:
 80081d0:	291f      	cmp	r1, #31
 80081d2:	b538      	push	{r3, r4, r5, lr}
 80081d4:	4605      	mov	r5, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	d904      	bls.n	80081e4 <_raise_r+0x14>
 80081da:	2316      	movs	r3, #22
 80081dc:	6003      	str	r3, [r0, #0]
 80081de:	f04f 30ff 	mov.w	r0, #4294967295
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80081e6:	b112      	cbz	r2, 80081ee <_raise_r+0x1e>
 80081e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081ec:	b94b      	cbnz	r3, 8008202 <_raise_r+0x32>
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 f830 	bl	8008254 <_getpid_r>
 80081f4:	4622      	mov	r2, r4
 80081f6:	4601      	mov	r1, r0
 80081f8:	4628      	mov	r0, r5
 80081fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081fe:	f000 b817 	b.w	8008230 <_kill_r>
 8008202:	2b01      	cmp	r3, #1
 8008204:	d00a      	beq.n	800821c <_raise_r+0x4c>
 8008206:	1c59      	adds	r1, r3, #1
 8008208:	d103      	bne.n	8008212 <_raise_r+0x42>
 800820a:	2316      	movs	r3, #22
 800820c:	6003      	str	r3, [r0, #0]
 800820e:	2001      	movs	r0, #1
 8008210:	e7e7      	b.n	80081e2 <_raise_r+0x12>
 8008212:	2100      	movs	r1, #0
 8008214:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008218:	4620      	mov	r0, r4
 800821a:	4798      	blx	r3
 800821c:	2000      	movs	r0, #0
 800821e:	e7e0      	b.n	80081e2 <_raise_r+0x12>

08008220 <raise>:
 8008220:	4b02      	ldr	r3, [pc, #8]	@ (800822c <raise+0xc>)
 8008222:	4601      	mov	r1, r0
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	f7ff bfd3 	b.w	80081d0 <_raise_r>
 800822a:	bf00      	nop
 800822c:	2000001c 	.word	0x2000001c

08008230 <_kill_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4d07      	ldr	r5, [pc, #28]	@ (8008250 <_kill_r+0x20>)
 8008234:	2300      	movs	r3, #0
 8008236:	4604      	mov	r4, r0
 8008238:	4608      	mov	r0, r1
 800823a:	4611      	mov	r1, r2
 800823c:	602b      	str	r3, [r5, #0]
 800823e:	f7f9 ffd9 	bl	80021f4 <_kill>
 8008242:	1c43      	adds	r3, r0, #1
 8008244:	d102      	bne.n	800824c <_kill_r+0x1c>
 8008246:	682b      	ldr	r3, [r5, #0]
 8008248:	b103      	cbz	r3, 800824c <_kill_r+0x1c>
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	bd38      	pop	{r3, r4, r5, pc}
 800824e:	bf00      	nop
 8008250:	20000604 	.word	0x20000604

08008254 <_getpid_r>:
 8008254:	f7f9 bfc6 	b.w	80021e4 <_getpid>

08008258 <__swhatbuf_r>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	460c      	mov	r4, r1
 800825c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008260:	2900      	cmp	r1, #0
 8008262:	b096      	sub	sp, #88	@ 0x58
 8008264:	4615      	mov	r5, r2
 8008266:	461e      	mov	r6, r3
 8008268:	da0d      	bge.n	8008286 <__swhatbuf_r+0x2e>
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008270:	f04f 0100 	mov.w	r1, #0
 8008274:	bf14      	ite	ne
 8008276:	2340      	movne	r3, #64	@ 0x40
 8008278:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800827c:	2000      	movs	r0, #0
 800827e:	6031      	str	r1, [r6, #0]
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	b016      	add	sp, #88	@ 0x58
 8008284:	bd70      	pop	{r4, r5, r6, pc}
 8008286:	466a      	mov	r2, sp
 8008288:	f000 f848 	bl	800831c <_fstat_r>
 800828c:	2800      	cmp	r0, #0
 800828e:	dbec      	blt.n	800826a <__swhatbuf_r+0x12>
 8008290:	9901      	ldr	r1, [sp, #4]
 8008292:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008296:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800829a:	4259      	negs	r1, r3
 800829c:	4159      	adcs	r1, r3
 800829e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082a2:	e7eb      	b.n	800827c <__swhatbuf_r+0x24>

080082a4 <__smakebuf_r>:
 80082a4:	898b      	ldrh	r3, [r1, #12]
 80082a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082a8:	079d      	lsls	r5, r3, #30
 80082aa:	4606      	mov	r6, r0
 80082ac:	460c      	mov	r4, r1
 80082ae:	d507      	bpl.n	80082c0 <__smakebuf_r+0x1c>
 80082b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	6123      	str	r3, [r4, #16]
 80082b8:	2301      	movs	r3, #1
 80082ba:	6163      	str	r3, [r4, #20]
 80082bc:	b003      	add	sp, #12
 80082be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c0:	ab01      	add	r3, sp, #4
 80082c2:	466a      	mov	r2, sp
 80082c4:	f7ff ffc8 	bl	8008258 <__swhatbuf_r>
 80082c8:	9f00      	ldr	r7, [sp, #0]
 80082ca:	4605      	mov	r5, r0
 80082cc:	4639      	mov	r1, r7
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff f866 	bl	80073a0 <_malloc_r>
 80082d4:	b948      	cbnz	r0, 80082ea <__smakebuf_r+0x46>
 80082d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082da:	059a      	lsls	r2, r3, #22
 80082dc:	d4ee      	bmi.n	80082bc <__smakebuf_r+0x18>
 80082de:	f023 0303 	bic.w	r3, r3, #3
 80082e2:	f043 0302 	orr.w	r3, r3, #2
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	e7e2      	b.n	80082b0 <__smakebuf_r+0xc>
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	6020      	str	r0, [r4, #0]
 80082ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	9b01      	ldr	r3, [sp, #4]
 80082f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082fa:	b15b      	cbz	r3, 8008314 <__smakebuf_r+0x70>
 80082fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008300:	4630      	mov	r0, r6
 8008302:	f000 f81d 	bl	8008340 <_isatty_r>
 8008306:	b128      	cbz	r0, 8008314 <__smakebuf_r+0x70>
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	f023 0303 	bic.w	r3, r3, #3
 800830e:	f043 0301 	orr.w	r3, r3, #1
 8008312:	81a3      	strh	r3, [r4, #12]
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	431d      	orrs	r5, r3
 8008318:	81a5      	strh	r5, [r4, #12]
 800831a:	e7cf      	b.n	80082bc <__smakebuf_r+0x18>

0800831c <_fstat_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d07      	ldr	r5, [pc, #28]	@ (800833c <_fstat_r+0x20>)
 8008320:	2300      	movs	r3, #0
 8008322:	4604      	mov	r4, r0
 8008324:	4608      	mov	r0, r1
 8008326:	4611      	mov	r1, r2
 8008328:	602b      	str	r3, [r5, #0]
 800832a:	f7f9 ffc3 	bl	80022b4 <_fstat>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d102      	bne.n	8008338 <_fstat_r+0x1c>
 8008332:	682b      	ldr	r3, [r5, #0]
 8008334:	b103      	cbz	r3, 8008338 <_fstat_r+0x1c>
 8008336:	6023      	str	r3, [r4, #0]
 8008338:	bd38      	pop	{r3, r4, r5, pc}
 800833a:	bf00      	nop
 800833c:	20000604 	.word	0x20000604

08008340 <_isatty_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4d06      	ldr	r5, [pc, #24]	@ (800835c <_isatty_r+0x1c>)
 8008344:	2300      	movs	r3, #0
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7f9 ffc2 	bl	80022d4 <_isatty>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_isatty_r+0x1a>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_isatty_r+0x1a>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20000604 	.word	0x20000604

08008360 <pow>:
 8008360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008362:	ed2d 8b02 	vpush	{d8}
 8008366:	eeb0 8a40 	vmov.f32	s16, s0
 800836a:	eef0 8a60 	vmov.f32	s17, s1
 800836e:	ec55 4b11 	vmov	r4, r5, d1
 8008372:	f000 f871 	bl	8008458 <__ieee754_pow>
 8008376:	4622      	mov	r2, r4
 8008378:	462b      	mov	r3, r5
 800837a:	4620      	mov	r0, r4
 800837c:	4629      	mov	r1, r5
 800837e:	ec57 6b10 	vmov	r6, r7, d0
 8008382:	f7f8 fbdb 	bl	8000b3c <__aeabi_dcmpun>
 8008386:	2800      	cmp	r0, #0
 8008388:	d13b      	bne.n	8008402 <pow+0xa2>
 800838a:	ec51 0b18 	vmov	r0, r1, d8
 800838e:	2200      	movs	r2, #0
 8008390:	2300      	movs	r3, #0
 8008392:	f7f8 fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008396:	b1b8      	cbz	r0, 80083c8 <pow+0x68>
 8008398:	2200      	movs	r2, #0
 800839a:	2300      	movs	r3, #0
 800839c:	4620      	mov	r0, r4
 800839e:	4629      	mov	r1, r5
 80083a0:	f7f8 fb9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d146      	bne.n	8008436 <pow+0xd6>
 80083a8:	ec45 4b10 	vmov	d0, r4, r5
 80083ac:	f000 f848 	bl	8008440 <finite>
 80083b0:	b338      	cbz	r0, 8008402 <pow+0xa2>
 80083b2:	2200      	movs	r2, #0
 80083b4:	2300      	movs	r3, #0
 80083b6:	4620      	mov	r0, r4
 80083b8:	4629      	mov	r1, r5
 80083ba:	f7f8 fb97 	bl	8000aec <__aeabi_dcmplt>
 80083be:	b300      	cbz	r0, 8008402 <pow+0xa2>
 80083c0:	f7fe f900 	bl	80065c4 <__errno>
 80083c4:	2322      	movs	r3, #34	@ 0x22
 80083c6:	e01b      	b.n	8008400 <pow+0xa0>
 80083c8:	ec47 6b10 	vmov	d0, r6, r7
 80083cc:	f000 f838 	bl	8008440 <finite>
 80083d0:	b9e0      	cbnz	r0, 800840c <pow+0xac>
 80083d2:	eeb0 0a48 	vmov.f32	s0, s16
 80083d6:	eef0 0a68 	vmov.f32	s1, s17
 80083da:	f000 f831 	bl	8008440 <finite>
 80083de:	b1a8      	cbz	r0, 800840c <pow+0xac>
 80083e0:	ec45 4b10 	vmov	d0, r4, r5
 80083e4:	f000 f82c 	bl	8008440 <finite>
 80083e8:	b180      	cbz	r0, 800840c <pow+0xac>
 80083ea:	4632      	mov	r2, r6
 80083ec:	463b      	mov	r3, r7
 80083ee:	4630      	mov	r0, r6
 80083f0:	4639      	mov	r1, r7
 80083f2:	f7f8 fba3 	bl	8000b3c <__aeabi_dcmpun>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d0e2      	beq.n	80083c0 <pow+0x60>
 80083fa:	f7fe f8e3 	bl	80065c4 <__errno>
 80083fe:	2321      	movs	r3, #33	@ 0x21
 8008400:	6003      	str	r3, [r0, #0]
 8008402:	ecbd 8b02 	vpop	{d8}
 8008406:	ec47 6b10 	vmov	d0, r6, r7
 800840a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800840c:	2200      	movs	r2, #0
 800840e:	2300      	movs	r3, #0
 8008410:	4630      	mov	r0, r6
 8008412:	4639      	mov	r1, r7
 8008414:	f7f8 fb60 	bl	8000ad8 <__aeabi_dcmpeq>
 8008418:	2800      	cmp	r0, #0
 800841a:	d0f2      	beq.n	8008402 <pow+0xa2>
 800841c:	eeb0 0a48 	vmov.f32	s0, s16
 8008420:	eef0 0a68 	vmov.f32	s1, s17
 8008424:	f000 f80c 	bl	8008440 <finite>
 8008428:	2800      	cmp	r0, #0
 800842a:	d0ea      	beq.n	8008402 <pow+0xa2>
 800842c:	ec45 4b10 	vmov	d0, r4, r5
 8008430:	f000 f806 	bl	8008440 <finite>
 8008434:	e7c3      	b.n	80083be <pow+0x5e>
 8008436:	4f01      	ldr	r7, [pc, #4]	@ (800843c <pow+0xdc>)
 8008438:	2600      	movs	r6, #0
 800843a:	e7e2      	b.n	8008402 <pow+0xa2>
 800843c:	3ff00000 	.word	0x3ff00000

08008440 <finite>:
 8008440:	b082      	sub	sp, #8
 8008442:	ed8d 0b00 	vstr	d0, [sp]
 8008446:	9801      	ldr	r0, [sp, #4]
 8008448:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800844c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008450:	0fc0      	lsrs	r0, r0, #31
 8008452:	b002      	add	sp, #8
 8008454:	4770      	bx	lr
	...

08008458 <__ieee754_pow>:
 8008458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	b091      	sub	sp, #68	@ 0x44
 800845e:	ed8d 1b00 	vstr	d1, [sp]
 8008462:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008466:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800846a:	ea5a 0001 	orrs.w	r0, sl, r1
 800846e:	ec57 6b10 	vmov	r6, r7, d0
 8008472:	d113      	bne.n	800849c <__ieee754_pow+0x44>
 8008474:	19b3      	adds	r3, r6, r6
 8008476:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800847a:	4152      	adcs	r2, r2
 800847c:	4298      	cmp	r0, r3
 800847e:	4b98      	ldr	r3, [pc, #608]	@ (80086e0 <__ieee754_pow+0x288>)
 8008480:	4193      	sbcs	r3, r2
 8008482:	f080 84ea 	bcs.w	8008e5a <__ieee754_pow+0xa02>
 8008486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800848a:	4630      	mov	r0, r6
 800848c:	4639      	mov	r1, r7
 800848e:	f7f7 ff05 	bl	800029c <__adddf3>
 8008492:	ec41 0b10 	vmov	d0, r0, r1
 8008496:	b011      	add	sp, #68	@ 0x44
 8008498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849c:	4a91      	ldr	r2, [pc, #580]	@ (80086e4 <__ieee754_pow+0x28c>)
 800849e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80084a2:	4590      	cmp	r8, r2
 80084a4:	463d      	mov	r5, r7
 80084a6:	4633      	mov	r3, r6
 80084a8:	d806      	bhi.n	80084b8 <__ieee754_pow+0x60>
 80084aa:	d101      	bne.n	80084b0 <__ieee754_pow+0x58>
 80084ac:	2e00      	cmp	r6, #0
 80084ae:	d1ea      	bne.n	8008486 <__ieee754_pow+0x2e>
 80084b0:	4592      	cmp	sl, r2
 80084b2:	d801      	bhi.n	80084b8 <__ieee754_pow+0x60>
 80084b4:	d10e      	bne.n	80084d4 <__ieee754_pow+0x7c>
 80084b6:	b169      	cbz	r1, 80084d4 <__ieee754_pow+0x7c>
 80084b8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80084bc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80084c0:	431d      	orrs	r5, r3
 80084c2:	d1e0      	bne.n	8008486 <__ieee754_pow+0x2e>
 80084c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084c8:	18db      	adds	r3, r3, r3
 80084ca:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80084ce:	4152      	adcs	r2, r2
 80084d0:	429d      	cmp	r5, r3
 80084d2:	e7d4      	b.n	800847e <__ieee754_pow+0x26>
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	46c3      	mov	fp, r8
 80084d8:	da3a      	bge.n	8008550 <__ieee754_pow+0xf8>
 80084da:	4a83      	ldr	r2, [pc, #524]	@ (80086e8 <__ieee754_pow+0x290>)
 80084dc:	4592      	cmp	sl, r2
 80084de:	d84d      	bhi.n	800857c <__ieee754_pow+0x124>
 80084e0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80084e4:	4592      	cmp	sl, r2
 80084e6:	f240 84c7 	bls.w	8008e78 <__ieee754_pow+0xa20>
 80084ea:	ea4f 522a 	mov.w	r2, sl, asr #20
 80084ee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80084f2:	2a14      	cmp	r2, #20
 80084f4:	dd0f      	ble.n	8008516 <__ieee754_pow+0xbe>
 80084f6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80084fa:	fa21 f402 	lsr.w	r4, r1, r2
 80084fe:	fa04 f202 	lsl.w	r2, r4, r2
 8008502:	428a      	cmp	r2, r1
 8008504:	f040 84b8 	bne.w	8008e78 <__ieee754_pow+0xa20>
 8008508:	f004 0401 	and.w	r4, r4, #1
 800850c:	f1c4 0402 	rsb	r4, r4, #2
 8008510:	2900      	cmp	r1, #0
 8008512:	d158      	bne.n	80085c6 <__ieee754_pow+0x16e>
 8008514:	e00e      	b.n	8008534 <__ieee754_pow+0xdc>
 8008516:	2900      	cmp	r1, #0
 8008518:	d154      	bne.n	80085c4 <__ieee754_pow+0x16c>
 800851a:	f1c2 0214 	rsb	r2, r2, #20
 800851e:	fa4a f402 	asr.w	r4, sl, r2
 8008522:	fa04 f202 	lsl.w	r2, r4, r2
 8008526:	4552      	cmp	r2, sl
 8008528:	f040 84a3 	bne.w	8008e72 <__ieee754_pow+0xa1a>
 800852c:	f004 0401 	and.w	r4, r4, #1
 8008530:	f1c4 0402 	rsb	r4, r4, #2
 8008534:	4a6d      	ldr	r2, [pc, #436]	@ (80086ec <__ieee754_pow+0x294>)
 8008536:	4592      	cmp	sl, r2
 8008538:	d12e      	bne.n	8008598 <__ieee754_pow+0x140>
 800853a:	f1b9 0f00 	cmp.w	r9, #0
 800853e:	f280 8494 	bge.w	8008e6a <__ieee754_pow+0xa12>
 8008542:	496a      	ldr	r1, [pc, #424]	@ (80086ec <__ieee754_pow+0x294>)
 8008544:	4632      	mov	r2, r6
 8008546:	463b      	mov	r3, r7
 8008548:	2000      	movs	r0, #0
 800854a:	f7f8 f987 	bl	800085c <__aeabi_ddiv>
 800854e:	e7a0      	b.n	8008492 <__ieee754_pow+0x3a>
 8008550:	2400      	movs	r4, #0
 8008552:	bbc1      	cbnz	r1, 80085c6 <__ieee754_pow+0x16e>
 8008554:	4a63      	ldr	r2, [pc, #396]	@ (80086e4 <__ieee754_pow+0x28c>)
 8008556:	4592      	cmp	sl, r2
 8008558:	d1ec      	bne.n	8008534 <__ieee754_pow+0xdc>
 800855a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800855e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008562:	431a      	orrs	r2, r3
 8008564:	f000 8479 	beq.w	8008e5a <__ieee754_pow+0xa02>
 8008568:	4b61      	ldr	r3, [pc, #388]	@ (80086f0 <__ieee754_pow+0x298>)
 800856a:	4598      	cmp	r8, r3
 800856c:	d908      	bls.n	8008580 <__ieee754_pow+0x128>
 800856e:	f1b9 0f00 	cmp.w	r9, #0
 8008572:	f2c0 8476 	blt.w	8008e62 <__ieee754_pow+0xa0a>
 8008576:	e9dd 0100 	ldrd	r0, r1, [sp]
 800857a:	e78a      	b.n	8008492 <__ieee754_pow+0x3a>
 800857c:	2402      	movs	r4, #2
 800857e:	e7e8      	b.n	8008552 <__ieee754_pow+0xfa>
 8008580:	f1b9 0f00 	cmp.w	r9, #0
 8008584:	f04f 0000 	mov.w	r0, #0
 8008588:	f04f 0100 	mov.w	r1, #0
 800858c:	da81      	bge.n	8008492 <__ieee754_pow+0x3a>
 800858e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008592:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008596:	e77c      	b.n	8008492 <__ieee754_pow+0x3a>
 8008598:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800859c:	d106      	bne.n	80085ac <__ieee754_pow+0x154>
 800859e:	4632      	mov	r2, r6
 80085a0:	463b      	mov	r3, r7
 80085a2:	4630      	mov	r0, r6
 80085a4:	4639      	mov	r1, r7
 80085a6:	f7f8 f82f 	bl	8000608 <__aeabi_dmul>
 80085aa:	e772      	b.n	8008492 <__ieee754_pow+0x3a>
 80085ac:	4a51      	ldr	r2, [pc, #324]	@ (80086f4 <__ieee754_pow+0x29c>)
 80085ae:	4591      	cmp	r9, r2
 80085b0:	d109      	bne.n	80085c6 <__ieee754_pow+0x16e>
 80085b2:	2d00      	cmp	r5, #0
 80085b4:	db07      	blt.n	80085c6 <__ieee754_pow+0x16e>
 80085b6:	ec47 6b10 	vmov	d0, r6, r7
 80085ba:	b011      	add	sp, #68	@ 0x44
 80085bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	f000 bd52 	b.w	8009068 <__ieee754_sqrt>
 80085c4:	2400      	movs	r4, #0
 80085c6:	ec47 6b10 	vmov	d0, r6, r7
 80085ca:	9302      	str	r3, [sp, #8]
 80085cc:	f000 fc88 	bl	8008ee0 <fabs>
 80085d0:	9b02      	ldr	r3, [sp, #8]
 80085d2:	ec51 0b10 	vmov	r0, r1, d0
 80085d6:	bb53      	cbnz	r3, 800862e <__ieee754_pow+0x1d6>
 80085d8:	4b44      	ldr	r3, [pc, #272]	@ (80086ec <__ieee754_pow+0x294>)
 80085da:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80085de:	429a      	cmp	r2, r3
 80085e0:	d002      	beq.n	80085e8 <__ieee754_pow+0x190>
 80085e2:	f1b8 0f00 	cmp.w	r8, #0
 80085e6:	d122      	bne.n	800862e <__ieee754_pow+0x1d6>
 80085e8:	f1b9 0f00 	cmp.w	r9, #0
 80085ec:	da05      	bge.n	80085fa <__ieee754_pow+0x1a2>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	2000      	movs	r0, #0
 80085f4:	493d      	ldr	r1, [pc, #244]	@ (80086ec <__ieee754_pow+0x294>)
 80085f6:	f7f8 f931 	bl	800085c <__aeabi_ddiv>
 80085fa:	2d00      	cmp	r5, #0
 80085fc:	f6bf af49 	bge.w	8008492 <__ieee754_pow+0x3a>
 8008600:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008604:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008608:	ea58 0804 	orrs.w	r8, r8, r4
 800860c:	d108      	bne.n	8008620 <__ieee754_pow+0x1c8>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4610      	mov	r0, r2
 8008614:	4619      	mov	r1, r3
 8008616:	f7f7 fe3f 	bl	8000298 <__aeabi_dsub>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	e794      	b.n	800854a <__ieee754_pow+0xf2>
 8008620:	2c01      	cmp	r4, #1
 8008622:	f47f af36 	bne.w	8008492 <__ieee754_pow+0x3a>
 8008626:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800862a:	4619      	mov	r1, r3
 800862c:	e731      	b.n	8008492 <__ieee754_pow+0x3a>
 800862e:	0feb      	lsrs	r3, r5, #31
 8008630:	3b01      	subs	r3, #1
 8008632:	ea53 0204 	orrs.w	r2, r3, r4
 8008636:	d102      	bne.n	800863e <__ieee754_pow+0x1e6>
 8008638:	4632      	mov	r2, r6
 800863a:	463b      	mov	r3, r7
 800863c:	e7e9      	b.n	8008612 <__ieee754_pow+0x1ba>
 800863e:	3c01      	subs	r4, #1
 8008640:	431c      	orrs	r4, r3
 8008642:	d016      	beq.n	8008672 <__ieee754_pow+0x21a>
 8008644:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80086d0 <__ieee754_pow+0x278>
 8008648:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800864c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008650:	f240 8112 	bls.w	8008878 <__ieee754_pow+0x420>
 8008654:	4b28      	ldr	r3, [pc, #160]	@ (80086f8 <__ieee754_pow+0x2a0>)
 8008656:	459a      	cmp	sl, r3
 8008658:	4b25      	ldr	r3, [pc, #148]	@ (80086f0 <__ieee754_pow+0x298>)
 800865a:	d916      	bls.n	800868a <__ieee754_pow+0x232>
 800865c:	4598      	cmp	r8, r3
 800865e:	d80b      	bhi.n	8008678 <__ieee754_pow+0x220>
 8008660:	f1b9 0f00 	cmp.w	r9, #0
 8008664:	da0b      	bge.n	800867e <__ieee754_pow+0x226>
 8008666:	2000      	movs	r0, #0
 8008668:	b011      	add	sp, #68	@ 0x44
 800866a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866e:	f000 bcf3 	b.w	8009058 <__math_oflow>
 8008672:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80086d8 <__ieee754_pow+0x280>
 8008676:	e7e7      	b.n	8008648 <__ieee754_pow+0x1f0>
 8008678:	f1b9 0f00 	cmp.w	r9, #0
 800867c:	dcf3      	bgt.n	8008666 <__ieee754_pow+0x20e>
 800867e:	2000      	movs	r0, #0
 8008680:	b011      	add	sp, #68	@ 0x44
 8008682:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008686:	f000 bcdf 	b.w	8009048 <__math_uflow>
 800868a:	4598      	cmp	r8, r3
 800868c:	d20c      	bcs.n	80086a8 <__ieee754_pow+0x250>
 800868e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008692:	2200      	movs	r2, #0
 8008694:	2300      	movs	r3, #0
 8008696:	f7f8 fa29 	bl	8000aec <__aeabi_dcmplt>
 800869a:	3800      	subs	r0, #0
 800869c:	bf18      	it	ne
 800869e:	2001      	movne	r0, #1
 80086a0:	f1b9 0f00 	cmp.w	r9, #0
 80086a4:	daec      	bge.n	8008680 <__ieee754_pow+0x228>
 80086a6:	e7df      	b.n	8008668 <__ieee754_pow+0x210>
 80086a8:	4b10      	ldr	r3, [pc, #64]	@ (80086ec <__ieee754_pow+0x294>)
 80086aa:	4598      	cmp	r8, r3
 80086ac:	f04f 0200 	mov.w	r2, #0
 80086b0:	d924      	bls.n	80086fc <__ieee754_pow+0x2a4>
 80086b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086b6:	2300      	movs	r3, #0
 80086b8:	f7f8 fa18 	bl	8000aec <__aeabi_dcmplt>
 80086bc:	3800      	subs	r0, #0
 80086be:	bf18      	it	ne
 80086c0:	2001      	movne	r0, #1
 80086c2:	f1b9 0f00 	cmp.w	r9, #0
 80086c6:	dccf      	bgt.n	8008668 <__ieee754_pow+0x210>
 80086c8:	e7da      	b.n	8008680 <__ieee754_pow+0x228>
 80086ca:	bf00      	nop
 80086cc:	f3af 8000 	nop.w
 80086d0:	00000000 	.word	0x00000000
 80086d4:	3ff00000 	.word	0x3ff00000
 80086d8:	00000000 	.word	0x00000000
 80086dc:	bff00000 	.word	0xbff00000
 80086e0:	fff00000 	.word	0xfff00000
 80086e4:	7ff00000 	.word	0x7ff00000
 80086e8:	433fffff 	.word	0x433fffff
 80086ec:	3ff00000 	.word	0x3ff00000
 80086f0:	3fefffff 	.word	0x3fefffff
 80086f4:	3fe00000 	.word	0x3fe00000
 80086f8:	43f00000 	.word	0x43f00000
 80086fc:	4b5a      	ldr	r3, [pc, #360]	@ (8008868 <__ieee754_pow+0x410>)
 80086fe:	f7f7 fdcb 	bl	8000298 <__aeabi_dsub>
 8008702:	a351      	add	r3, pc, #324	@ (adr r3, 8008848 <__ieee754_pow+0x3f0>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	4604      	mov	r4, r0
 800870a:	460d      	mov	r5, r1
 800870c:	f7f7 ff7c 	bl	8000608 <__aeabi_dmul>
 8008710:	a34f      	add	r3, pc, #316	@ (adr r3, 8008850 <__ieee754_pow+0x3f8>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	4606      	mov	r6, r0
 8008718:	460f      	mov	r7, r1
 800871a:	4620      	mov	r0, r4
 800871c:	4629      	mov	r1, r5
 800871e:	f7f7 ff73 	bl	8000608 <__aeabi_dmul>
 8008722:	4b52      	ldr	r3, [pc, #328]	@ (800886c <__ieee754_pow+0x414>)
 8008724:	4682      	mov	sl, r0
 8008726:	468b      	mov	fp, r1
 8008728:	2200      	movs	r2, #0
 800872a:	4620      	mov	r0, r4
 800872c:	4629      	mov	r1, r5
 800872e:	f7f7 ff6b 	bl	8000608 <__aeabi_dmul>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	a148      	add	r1, pc, #288	@ (adr r1, 8008858 <__ieee754_pow+0x400>)
 8008738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800873c:	f7f7 fdac 	bl	8000298 <__aeabi_dsub>
 8008740:	4622      	mov	r2, r4
 8008742:	462b      	mov	r3, r5
 8008744:	f7f7 ff60 	bl	8000608 <__aeabi_dmul>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	2000      	movs	r0, #0
 800874e:	4948      	ldr	r1, [pc, #288]	@ (8008870 <__ieee754_pow+0x418>)
 8008750:	f7f7 fda2 	bl	8000298 <__aeabi_dsub>
 8008754:	4622      	mov	r2, r4
 8008756:	4680      	mov	r8, r0
 8008758:	4689      	mov	r9, r1
 800875a:	462b      	mov	r3, r5
 800875c:	4620      	mov	r0, r4
 800875e:	4629      	mov	r1, r5
 8008760:	f7f7 ff52 	bl	8000608 <__aeabi_dmul>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4640      	mov	r0, r8
 800876a:	4649      	mov	r1, r9
 800876c:	f7f7 ff4c 	bl	8000608 <__aeabi_dmul>
 8008770:	a33b      	add	r3, pc, #236	@ (adr r3, 8008860 <__ieee754_pow+0x408>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f7 ff47 	bl	8000608 <__aeabi_dmul>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4650      	mov	r0, sl
 8008780:	4659      	mov	r1, fp
 8008782:	f7f7 fd89 	bl	8000298 <__aeabi_dsub>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4680      	mov	r8, r0
 800878c:	4689      	mov	r9, r1
 800878e:	4630      	mov	r0, r6
 8008790:	4639      	mov	r1, r7
 8008792:	f7f7 fd83 	bl	800029c <__adddf3>
 8008796:	2400      	movs	r4, #0
 8008798:	4632      	mov	r2, r6
 800879a:	463b      	mov	r3, r7
 800879c:	4620      	mov	r0, r4
 800879e:	460d      	mov	r5, r1
 80087a0:	f7f7 fd7a 	bl	8000298 <__aeabi_dsub>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	4640      	mov	r0, r8
 80087aa:	4649      	mov	r1, r9
 80087ac:	f7f7 fd74 	bl	8000298 <__aeabi_dsub>
 80087b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087b8:	2300      	movs	r3, #0
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80087c0:	4606      	mov	r6, r0
 80087c2:	460f      	mov	r7, r1
 80087c4:	4652      	mov	r2, sl
 80087c6:	465b      	mov	r3, fp
 80087c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087cc:	f7f7 fd64 	bl	8000298 <__aeabi_dsub>
 80087d0:	4622      	mov	r2, r4
 80087d2:	462b      	mov	r3, r5
 80087d4:	f7f7 ff18 	bl	8000608 <__aeabi_dmul>
 80087d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087dc:	4680      	mov	r8, r0
 80087de:	4689      	mov	r9, r1
 80087e0:	4630      	mov	r0, r6
 80087e2:	4639      	mov	r1, r7
 80087e4:	f7f7 ff10 	bl	8000608 <__aeabi_dmul>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4640      	mov	r0, r8
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f7 fd54 	bl	800029c <__adddf3>
 80087f4:	4652      	mov	r2, sl
 80087f6:	465b      	mov	r3, fp
 80087f8:	4606      	mov	r6, r0
 80087fa:	460f      	mov	r7, r1
 80087fc:	4620      	mov	r0, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	f7f7 ff02 	bl	8000608 <__aeabi_dmul>
 8008804:	460b      	mov	r3, r1
 8008806:	4602      	mov	r2, r0
 8008808:	4680      	mov	r8, r0
 800880a:	4689      	mov	r9, r1
 800880c:	4630      	mov	r0, r6
 800880e:	4639      	mov	r1, r7
 8008810:	f7f7 fd44 	bl	800029c <__adddf3>
 8008814:	4b17      	ldr	r3, [pc, #92]	@ (8008874 <__ieee754_pow+0x41c>)
 8008816:	4299      	cmp	r1, r3
 8008818:	4604      	mov	r4, r0
 800881a:	460d      	mov	r5, r1
 800881c:	468a      	mov	sl, r1
 800881e:	468b      	mov	fp, r1
 8008820:	f340 82ef 	ble.w	8008e02 <__ieee754_pow+0x9aa>
 8008824:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008828:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800882c:	4303      	orrs	r3, r0
 800882e:	f000 81e8 	beq.w	8008c02 <__ieee754_pow+0x7aa>
 8008832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008836:	2200      	movs	r2, #0
 8008838:	2300      	movs	r3, #0
 800883a:	f7f8 f957 	bl	8000aec <__aeabi_dcmplt>
 800883e:	3800      	subs	r0, #0
 8008840:	bf18      	it	ne
 8008842:	2001      	movne	r0, #1
 8008844:	e710      	b.n	8008668 <__ieee754_pow+0x210>
 8008846:	bf00      	nop
 8008848:	60000000 	.word	0x60000000
 800884c:	3ff71547 	.word	0x3ff71547
 8008850:	f85ddf44 	.word	0xf85ddf44
 8008854:	3e54ae0b 	.word	0x3e54ae0b
 8008858:	55555555 	.word	0x55555555
 800885c:	3fd55555 	.word	0x3fd55555
 8008860:	652b82fe 	.word	0x652b82fe
 8008864:	3ff71547 	.word	0x3ff71547
 8008868:	3ff00000 	.word	0x3ff00000
 800886c:	3fd00000 	.word	0x3fd00000
 8008870:	3fe00000 	.word	0x3fe00000
 8008874:	408fffff 	.word	0x408fffff
 8008878:	4bd5      	ldr	r3, [pc, #852]	@ (8008bd0 <__ieee754_pow+0x778>)
 800887a:	402b      	ands	r3, r5
 800887c:	2200      	movs	r2, #0
 800887e:	b92b      	cbnz	r3, 800888c <__ieee754_pow+0x434>
 8008880:	4bd4      	ldr	r3, [pc, #848]	@ (8008bd4 <__ieee754_pow+0x77c>)
 8008882:	f7f7 fec1 	bl	8000608 <__aeabi_dmul>
 8008886:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800888a:	468b      	mov	fp, r1
 800888c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008890:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008894:	4413      	add	r3, r2
 8008896:	930a      	str	r3, [sp, #40]	@ 0x28
 8008898:	4bcf      	ldr	r3, [pc, #828]	@ (8008bd8 <__ieee754_pow+0x780>)
 800889a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800889e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80088a2:	459b      	cmp	fp, r3
 80088a4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80088a8:	dd08      	ble.n	80088bc <__ieee754_pow+0x464>
 80088aa:	4bcc      	ldr	r3, [pc, #816]	@ (8008bdc <__ieee754_pow+0x784>)
 80088ac:	459b      	cmp	fp, r3
 80088ae:	f340 81a5 	ble.w	8008bfc <__ieee754_pow+0x7a4>
 80088b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088b4:	3301      	adds	r3, #1
 80088b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80088b8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80088bc:	f04f 0a00 	mov.w	sl, #0
 80088c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80088c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088c6:	4bc6      	ldr	r3, [pc, #792]	@ (8008be0 <__ieee754_pow+0x788>)
 80088c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088cc:	ed93 7b00 	vldr	d7, [r3]
 80088d0:	4629      	mov	r1, r5
 80088d2:	ec53 2b17 	vmov	r2, r3, d7
 80088d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80088de:	f7f7 fcdb 	bl	8000298 <__aeabi_dsub>
 80088e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088e6:	4606      	mov	r6, r0
 80088e8:	460f      	mov	r7, r1
 80088ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088ee:	f7f7 fcd5 	bl	800029c <__adddf3>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	2000      	movs	r0, #0
 80088f8:	49ba      	ldr	r1, [pc, #744]	@ (8008be4 <__ieee754_pow+0x78c>)
 80088fa:	f7f7 ffaf 	bl	800085c <__aeabi_ddiv>
 80088fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4630      	mov	r0, r6
 8008908:	4639      	mov	r1, r7
 800890a:	f7f7 fe7d 	bl	8000608 <__aeabi_dmul>
 800890e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008912:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008916:	106d      	asrs	r5, r5, #1
 8008918:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800891c:	f04f 0b00 	mov.w	fp, #0
 8008920:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008924:	4661      	mov	r1, ip
 8008926:	2200      	movs	r2, #0
 8008928:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800892c:	4658      	mov	r0, fp
 800892e:	46e1      	mov	r9, ip
 8008930:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008934:	4614      	mov	r4, r2
 8008936:	461d      	mov	r5, r3
 8008938:	f7f7 fe66 	bl	8000608 <__aeabi_dmul>
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f7 fca8 	bl	8000298 <__aeabi_dsub>
 8008948:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800894c:	4606      	mov	r6, r0
 800894e:	460f      	mov	r7, r1
 8008950:	4620      	mov	r0, r4
 8008952:	4629      	mov	r1, r5
 8008954:	f7f7 fca0 	bl	8000298 <__aeabi_dsub>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008960:	f7f7 fc9a 	bl	8000298 <__aeabi_dsub>
 8008964:	465a      	mov	r2, fp
 8008966:	464b      	mov	r3, r9
 8008968:	f7f7 fe4e 	bl	8000608 <__aeabi_dmul>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4630      	mov	r0, r6
 8008972:	4639      	mov	r1, r7
 8008974:	f7f7 fc90 	bl	8000298 <__aeabi_dsub>
 8008978:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800897c:	f7f7 fe44 	bl	8000608 <__aeabi_dmul>
 8008980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008984:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008988:	4610      	mov	r0, r2
 800898a:	4619      	mov	r1, r3
 800898c:	f7f7 fe3c 	bl	8000608 <__aeabi_dmul>
 8008990:	a37d      	add	r3, pc, #500	@ (adr r3, 8008b88 <__ieee754_pow+0x730>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	4604      	mov	r4, r0
 8008998:	460d      	mov	r5, r1
 800899a:	f7f7 fe35 	bl	8000608 <__aeabi_dmul>
 800899e:	a37c      	add	r3, pc, #496	@ (adr r3, 8008b90 <__ieee754_pow+0x738>)
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	f7f7 fc7a 	bl	800029c <__adddf3>
 80089a8:	4622      	mov	r2, r4
 80089aa:	462b      	mov	r3, r5
 80089ac:	f7f7 fe2c 	bl	8000608 <__aeabi_dmul>
 80089b0:	a379      	add	r3, pc, #484	@ (adr r3, 8008b98 <__ieee754_pow+0x740>)
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	f7f7 fc71 	bl	800029c <__adddf3>
 80089ba:	4622      	mov	r2, r4
 80089bc:	462b      	mov	r3, r5
 80089be:	f7f7 fe23 	bl	8000608 <__aeabi_dmul>
 80089c2:	a377      	add	r3, pc, #476	@ (adr r3, 8008ba0 <__ieee754_pow+0x748>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	f7f7 fc68 	bl	800029c <__adddf3>
 80089cc:	4622      	mov	r2, r4
 80089ce:	462b      	mov	r3, r5
 80089d0:	f7f7 fe1a 	bl	8000608 <__aeabi_dmul>
 80089d4:	a374      	add	r3, pc, #464	@ (adr r3, 8008ba8 <__ieee754_pow+0x750>)
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f7f7 fc5f 	bl	800029c <__adddf3>
 80089de:	4622      	mov	r2, r4
 80089e0:	462b      	mov	r3, r5
 80089e2:	f7f7 fe11 	bl	8000608 <__aeabi_dmul>
 80089e6:	a372      	add	r3, pc, #456	@ (adr r3, 8008bb0 <__ieee754_pow+0x758>)
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	f7f7 fc56 	bl	800029c <__adddf3>
 80089f0:	4622      	mov	r2, r4
 80089f2:	4606      	mov	r6, r0
 80089f4:	460f      	mov	r7, r1
 80089f6:	462b      	mov	r3, r5
 80089f8:	4620      	mov	r0, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	f7f7 fe04 	bl	8000608 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4630      	mov	r0, r6
 8008a06:	4639      	mov	r1, r7
 8008a08:	f7f7 fdfe 	bl	8000608 <__aeabi_dmul>
 8008a0c:	465a      	mov	r2, fp
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	464b      	mov	r3, r9
 8008a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a18:	f7f7 fc40 	bl	800029c <__adddf3>
 8008a1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a20:	f7f7 fdf2 	bl	8000608 <__aeabi_dmul>
 8008a24:	4622      	mov	r2, r4
 8008a26:	462b      	mov	r3, r5
 8008a28:	f7f7 fc38 	bl	800029c <__adddf3>
 8008a2c:	465a      	mov	r2, fp
 8008a2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a32:	464b      	mov	r3, r9
 8008a34:	4658      	mov	r0, fp
 8008a36:	4649      	mov	r1, r9
 8008a38:	f7f7 fde6 	bl	8000608 <__aeabi_dmul>
 8008a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8008be8 <__ieee754_pow+0x790>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	4606      	mov	r6, r0
 8008a42:	460f      	mov	r7, r1
 8008a44:	f7f7 fc2a 	bl	800029c <__adddf3>
 8008a48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a4c:	f7f7 fc26 	bl	800029c <__adddf3>
 8008a50:	46d8      	mov	r8, fp
 8008a52:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008a56:	460d      	mov	r5, r1
 8008a58:	465a      	mov	r2, fp
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4640      	mov	r0, r8
 8008a5e:	4649      	mov	r1, r9
 8008a60:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008a64:	f7f7 fdd0 	bl	8000608 <__aeabi_dmul>
 8008a68:	465c      	mov	r4, fp
 8008a6a:	4680      	mov	r8, r0
 8008a6c:	4689      	mov	r9, r1
 8008a6e:	4b5e      	ldr	r3, [pc, #376]	@ (8008be8 <__ieee754_pow+0x790>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	4620      	mov	r0, r4
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7f7 fc0f 	bl	8000298 <__aeabi_dsub>
 8008a7a:	4632      	mov	r2, r6
 8008a7c:	463b      	mov	r3, r7
 8008a7e:	f7f7 fc0b 	bl	8000298 <__aeabi_dsub>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a8a:	f7f7 fc05 	bl	8000298 <__aeabi_dsub>
 8008a8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a92:	f7f7 fdb9 	bl	8000608 <__aeabi_dmul>
 8008a96:	4622      	mov	r2, r4
 8008a98:	4606      	mov	r6, r0
 8008a9a:	460f      	mov	r7, r1
 8008a9c:	462b      	mov	r3, r5
 8008a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008aa2:	f7f7 fdb1 	bl	8000608 <__aeabi_dmul>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4630      	mov	r0, r6
 8008aac:	4639      	mov	r1, r7
 8008aae:	f7f7 fbf5 	bl	800029c <__adddf3>
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4640      	mov	r0, r8
 8008abc:	4649      	mov	r1, r9
 8008abe:	f7f7 fbed 	bl	800029c <__adddf3>
 8008ac2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008ac6:	a33c      	add	r3, pc, #240	@ (adr r3, 8008bb8 <__ieee754_pow+0x760>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	4658      	mov	r0, fp
 8008ace:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	f7f7 fd98 	bl	8000608 <__aeabi_dmul>
 8008ad8:	465c      	mov	r4, fp
 8008ada:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ade:	4642      	mov	r2, r8
 8008ae0:	464b      	mov	r3, r9
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	f7f7 fbd7 	bl	8000298 <__aeabi_dsub>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4630      	mov	r0, r6
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7f7 fbd1 	bl	8000298 <__aeabi_dsub>
 8008af6:	a332      	add	r3, pc, #200	@ (adr r3, 8008bc0 <__ieee754_pow+0x768>)
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f7f7 fd84 	bl	8000608 <__aeabi_dmul>
 8008b00:	a331      	add	r3, pc, #196	@ (adr r3, 8008bc8 <__ieee754_pow+0x770>)
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	4606      	mov	r6, r0
 8008b08:	460f      	mov	r7, r1
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f7f7 fd7b 	bl	8000608 <__aeabi_dmul>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4630      	mov	r0, r6
 8008b18:	4639      	mov	r1, r7
 8008b1a:	f7f7 fbbf 	bl	800029c <__adddf3>
 8008b1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008b20:	4b32      	ldr	r3, [pc, #200]	@ (8008bec <__ieee754_pow+0x794>)
 8008b22:	4413      	add	r3, r2
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f7f7 fbb8 	bl	800029c <__adddf3>
 8008b2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b32:	f7f7 fcff 	bl	8000534 <__aeabi_i2d>
 8008b36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008b38:	4b2d      	ldr	r3, [pc, #180]	@ (8008bf0 <__ieee754_pow+0x798>)
 8008b3a:	4413      	add	r3, r2
 8008b3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b40:	4606      	mov	r6, r0
 8008b42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b46:	460f      	mov	r7, r1
 8008b48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b4c:	f7f7 fba6 	bl	800029c <__adddf3>
 8008b50:	4642      	mov	r2, r8
 8008b52:	464b      	mov	r3, r9
 8008b54:	f7f7 fba2 	bl	800029c <__adddf3>
 8008b58:	4632      	mov	r2, r6
 8008b5a:	463b      	mov	r3, r7
 8008b5c:	f7f7 fb9e 	bl	800029c <__adddf3>
 8008b60:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008b64:	4632      	mov	r2, r6
 8008b66:	463b      	mov	r3, r7
 8008b68:	4658      	mov	r0, fp
 8008b6a:	460d      	mov	r5, r1
 8008b6c:	f7f7 fb94 	bl	8000298 <__aeabi_dsub>
 8008b70:	4642      	mov	r2, r8
 8008b72:	464b      	mov	r3, r9
 8008b74:	f7f7 fb90 	bl	8000298 <__aeabi_dsub>
 8008b78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b7c:	f7f7 fb8c 	bl	8000298 <__aeabi_dsub>
 8008b80:	465c      	mov	r4, fp
 8008b82:	4602      	mov	r2, r0
 8008b84:	e036      	b.n	8008bf4 <__ieee754_pow+0x79c>
 8008b86:	bf00      	nop
 8008b88:	4a454eef 	.word	0x4a454eef
 8008b8c:	3fca7e28 	.word	0x3fca7e28
 8008b90:	93c9db65 	.word	0x93c9db65
 8008b94:	3fcd864a 	.word	0x3fcd864a
 8008b98:	a91d4101 	.word	0xa91d4101
 8008b9c:	3fd17460 	.word	0x3fd17460
 8008ba0:	518f264d 	.word	0x518f264d
 8008ba4:	3fd55555 	.word	0x3fd55555
 8008ba8:	db6fabff 	.word	0xdb6fabff
 8008bac:	3fdb6db6 	.word	0x3fdb6db6
 8008bb0:	33333303 	.word	0x33333303
 8008bb4:	3fe33333 	.word	0x3fe33333
 8008bb8:	e0000000 	.word	0xe0000000
 8008bbc:	3feec709 	.word	0x3feec709
 8008bc0:	dc3a03fd 	.word	0xdc3a03fd
 8008bc4:	3feec709 	.word	0x3feec709
 8008bc8:	145b01f5 	.word	0x145b01f5
 8008bcc:	be3e2fe0 	.word	0xbe3e2fe0
 8008bd0:	7ff00000 	.word	0x7ff00000
 8008bd4:	43400000 	.word	0x43400000
 8008bd8:	0003988e 	.word	0x0003988e
 8008bdc:	000bb679 	.word	0x000bb679
 8008be0:	080095f0 	.word	0x080095f0
 8008be4:	3ff00000 	.word	0x3ff00000
 8008be8:	40080000 	.word	0x40080000
 8008bec:	080095d0 	.word	0x080095d0
 8008bf0:	080095e0 	.word	0x080095e0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bfa:	e5d7      	b.n	80087ac <__ieee754_pow+0x354>
 8008bfc:	f04f 0a01 	mov.w	sl, #1
 8008c00:	e65e      	b.n	80088c0 <__ieee754_pow+0x468>
 8008c02:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008ed4 <__ieee754_pow+0xa7c>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	4630      	mov	r0, r6
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	f7f7 fb46 	bl	800029c <__adddf3>
 8008c10:	4642      	mov	r2, r8
 8008c12:	e9cd 0100 	strd	r0, r1, [sp]
 8008c16:	464b      	mov	r3, r9
 8008c18:	4620      	mov	r0, r4
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	f7f7 fb3c 	bl	8000298 <__aeabi_dsub>
 8008c20:	4602      	mov	r2, r0
 8008c22:	460b      	mov	r3, r1
 8008c24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c28:	f7f7 ff7e 	bl	8000b28 <__aeabi_dcmpgt>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	f47f ae00 	bne.w	8008832 <__ieee754_pow+0x3da>
 8008c32:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008c36:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008c3a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008c3e:	fa43 fa0a 	asr.w	sl, r3, sl
 8008c42:	44da      	add	sl, fp
 8008c44:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008c48:	489d      	ldr	r0, [pc, #628]	@ (8008ec0 <__ieee754_pow+0xa68>)
 8008c4a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008c4e:	4108      	asrs	r0, r1
 8008c50:	ea00 030a 	and.w	r3, r0, sl
 8008c54:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008c58:	f1c1 0114 	rsb	r1, r1, #20
 8008c5c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008c60:	fa4a fa01 	asr.w	sl, sl, r1
 8008c64:	f1bb 0f00 	cmp.w	fp, #0
 8008c68:	4640      	mov	r0, r8
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	f04f 0200 	mov.w	r2, #0
 8008c70:	bfb8      	it	lt
 8008c72:	f1ca 0a00 	rsblt	sl, sl, #0
 8008c76:	f7f7 fb0f 	bl	8000298 <__aeabi_dsub>
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	4689      	mov	r9, r1
 8008c7e:	4632      	mov	r2, r6
 8008c80:	463b      	mov	r3, r7
 8008c82:	4640      	mov	r0, r8
 8008c84:	4649      	mov	r1, r9
 8008c86:	f7f7 fb09 	bl	800029c <__adddf3>
 8008c8a:	2400      	movs	r4, #0
 8008c8c:	a37c      	add	r3, pc, #496	@ (adr r3, 8008e80 <__ieee754_pow+0xa28>)
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	4620      	mov	r0, r4
 8008c94:	460d      	mov	r5, r1
 8008c96:	f7f7 fcb7 	bl	8000608 <__aeabi_dmul>
 8008c9a:	4642      	mov	r2, r8
 8008c9c:	e9cd 0100 	strd	r0, r1, [sp]
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	f7f7 faf7 	bl	8000298 <__aeabi_dsub>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 faf1 	bl	8000298 <__aeabi_dsub>
 8008cb6:	a374      	add	r3, pc, #464	@ (adr r3, 8008e88 <__ieee754_pow+0xa30>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	f7f7 fca4 	bl	8000608 <__aeabi_dmul>
 8008cc0:	a373      	add	r3, pc, #460	@ (adr r3, 8008e90 <__ieee754_pow+0xa38>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	4689      	mov	r9, r1
 8008cca:	4620      	mov	r0, r4
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7f7 fc9b 	bl	8000608 <__aeabi_dmul>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	4649      	mov	r1, r9
 8008cda:	f7f7 fadf 	bl	800029c <__adddf3>
 8008cde:	4604      	mov	r4, r0
 8008ce0:	460d      	mov	r5, r1
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cea:	f7f7 fad7 	bl	800029c <__adddf3>
 8008cee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cf2:	4680      	mov	r8, r0
 8008cf4:	4689      	mov	r9, r1
 8008cf6:	f7f7 facf 	bl	8000298 <__aeabi_dsub>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7f7 fac9 	bl	8000298 <__aeabi_dsub>
 8008d06:	4642      	mov	r2, r8
 8008d08:	4606      	mov	r6, r0
 8008d0a:	460f      	mov	r7, r1
 8008d0c:	464b      	mov	r3, r9
 8008d0e:	4640      	mov	r0, r8
 8008d10:	4649      	mov	r1, r9
 8008d12:	f7f7 fc79 	bl	8000608 <__aeabi_dmul>
 8008d16:	a360      	add	r3, pc, #384	@ (adr r3, 8008e98 <__ieee754_pow+0xa40>)
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	460d      	mov	r5, r1
 8008d20:	f7f7 fc72 	bl	8000608 <__aeabi_dmul>
 8008d24:	a35e      	add	r3, pc, #376	@ (adr r3, 8008ea0 <__ieee754_pow+0xa48>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f7f7 fab5 	bl	8000298 <__aeabi_dsub>
 8008d2e:	4622      	mov	r2, r4
 8008d30:	462b      	mov	r3, r5
 8008d32:	f7f7 fc69 	bl	8000608 <__aeabi_dmul>
 8008d36:	a35c      	add	r3, pc, #368	@ (adr r3, 8008ea8 <__ieee754_pow+0xa50>)
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	f7f7 faae 	bl	800029c <__adddf3>
 8008d40:	4622      	mov	r2, r4
 8008d42:	462b      	mov	r3, r5
 8008d44:	f7f7 fc60 	bl	8000608 <__aeabi_dmul>
 8008d48:	a359      	add	r3, pc, #356	@ (adr r3, 8008eb0 <__ieee754_pow+0xa58>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 faa3 	bl	8000298 <__aeabi_dsub>
 8008d52:	4622      	mov	r2, r4
 8008d54:	462b      	mov	r3, r5
 8008d56:	f7f7 fc57 	bl	8000608 <__aeabi_dmul>
 8008d5a:	a357      	add	r3, pc, #348	@ (adr r3, 8008eb8 <__ieee754_pow+0xa60>)
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	f7f7 fa9c 	bl	800029c <__adddf3>
 8008d64:	4622      	mov	r2, r4
 8008d66:	462b      	mov	r3, r5
 8008d68:	f7f7 fc4e 	bl	8000608 <__aeabi_dmul>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4640      	mov	r0, r8
 8008d72:	4649      	mov	r1, r9
 8008d74:	f7f7 fa90 	bl	8000298 <__aeabi_dsub>
 8008d78:	4604      	mov	r4, r0
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4640      	mov	r0, r8
 8008d82:	4649      	mov	r1, r9
 8008d84:	f7f7 fc40 	bl	8000608 <__aeabi_dmul>
 8008d88:	2200      	movs	r2, #0
 8008d8a:	e9cd 0100 	strd	r0, r1, [sp]
 8008d8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d92:	4620      	mov	r0, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	f7f7 fa7f 	bl	8000298 <__aeabi_dsub>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008da2:	f7f7 fd5b 	bl	800085c <__aeabi_ddiv>
 8008da6:	4632      	mov	r2, r6
 8008da8:	4604      	mov	r4, r0
 8008daa:	460d      	mov	r5, r1
 8008dac:	463b      	mov	r3, r7
 8008dae:	4640      	mov	r0, r8
 8008db0:	4649      	mov	r1, r9
 8008db2:	f7f7 fc29 	bl	8000608 <__aeabi_dmul>
 8008db6:	4632      	mov	r2, r6
 8008db8:	463b      	mov	r3, r7
 8008dba:	f7f7 fa6f 	bl	800029c <__adddf3>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f7f7 fa67 	bl	8000298 <__aeabi_dsub>
 8008dca:	4642      	mov	r2, r8
 8008dcc:	464b      	mov	r3, r9
 8008dce:	f7f7 fa63 	bl	8000298 <__aeabi_dsub>
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	493b      	ldr	r1, [pc, #236]	@ (8008ec4 <__ieee754_pow+0xa6c>)
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f7f7 fa5d 	bl	8000298 <__aeabi_dsub>
 8008dde:	ec41 0b10 	vmov	d0, r0, r1
 8008de2:	ee10 3a90 	vmov	r3, s1
 8008de6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dee:	da30      	bge.n	8008e52 <__ieee754_pow+0x9fa>
 8008df0:	4650      	mov	r0, sl
 8008df2:	f000 f87d 	bl	8008ef0 <scalbn>
 8008df6:	ec51 0b10 	vmov	r0, r1, d0
 8008dfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dfe:	f7ff bbd2 	b.w	80085a6 <__ieee754_pow+0x14e>
 8008e02:	4c31      	ldr	r4, [pc, #196]	@ (8008ec8 <__ieee754_pow+0xa70>)
 8008e04:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d91a      	bls.n	8008e42 <__ieee754_pow+0x9ea>
 8008e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8008ecc <__ieee754_pow+0xa74>)
 8008e0e:	440b      	add	r3, r1
 8008e10:	4303      	orrs	r3, r0
 8008e12:	d009      	beq.n	8008e28 <__ieee754_pow+0x9d0>
 8008e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f7f7 fe66 	bl	8000aec <__aeabi_dcmplt>
 8008e20:	3800      	subs	r0, #0
 8008e22:	bf18      	it	ne
 8008e24:	2001      	movne	r0, #1
 8008e26:	e42b      	b.n	8008680 <__ieee754_pow+0x228>
 8008e28:	4642      	mov	r2, r8
 8008e2a:	464b      	mov	r3, r9
 8008e2c:	f7f7 fa34 	bl	8000298 <__aeabi_dsub>
 8008e30:	4632      	mov	r2, r6
 8008e32:	463b      	mov	r3, r7
 8008e34:	f7f7 fe6e 	bl	8000b14 <__aeabi_dcmpge>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d1eb      	bne.n	8008e14 <__ieee754_pow+0x9bc>
 8008e3c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008edc <__ieee754_pow+0xa84>
 8008e40:	e6f7      	b.n	8008c32 <__ieee754_pow+0x7da>
 8008e42:	469a      	mov	sl, r3
 8008e44:	4b22      	ldr	r3, [pc, #136]	@ (8008ed0 <__ieee754_pow+0xa78>)
 8008e46:	459a      	cmp	sl, r3
 8008e48:	f63f aef3 	bhi.w	8008c32 <__ieee754_pow+0x7da>
 8008e4c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008e50:	e715      	b.n	8008c7e <__ieee754_pow+0x826>
 8008e52:	ec51 0b10 	vmov	r0, r1, d0
 8008e56:	4619      	mov	r1, r3
 8008e58:	e7cf      	b.n	8008dfa <__ieee754_pow+0x9a2>
 8008e5a:	491a      	ldr	r1, [pc, #104]	@ (8008ec4 <__ieee754_pow+0xa6c>)
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	f7ff bb18 	b.w	8008492 <__ieee754_pow+0x3a>
 8008e62:	2000      	movs	r0, #0
 8008e64:	2100      	movs	r1, #0
 8008e66:	f7ff bb14 	b.w	8008492 <__ieee754_pow+0x3a>
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	4639      	mov	r1, r7
 8008e6e:	f7ff bb10 	b.w	8008492 <__ieee754_pow+0x3a>
 8008e72:	460c      	mov	r4, r1
 8008e74:	f7ff bb5e 	b.w	8008534 <__ieee754_pow+0xdc>
 8008e78:	2400      	movs	r4, #0
 8008e7a:	f7ff bb49 	b.w	8008510 <__ieee754_pow+0xb8>
 8008e7e:	bf00      	nop
 8008e80:	00000000 	.word	0x00000000
 8008e84:	3fe62e43 	.word	0x3fe62e43
 8008e88:	fefa39ef 	.word	0xfefa39ef
 8008e8c:	3fe62e42 	.word	0x3fe62e42
 8008e90:	0ca86c39 	.word	0x0ca86c39
 8008e94:	be205c61 	.word	0xbe205c61
 8008e98:	72bea4d0 	.word	0x72bea4d0
 8008e9c:	3e663769 	.word	0x3e663769
 8008ea0:	c5d26bf1 	.word	0xc5d26bf1
 8008ea4:	3ebbbd41 	.word	0x3ebbbd41
 8008ea8:	af25de2c 	.word	0xaf25de2c
 8008eac:	3f11566a 	.word	0x3f11566a
 8008eb0:	16bebd93 	.word	0x16bebd93
 8008eb4:	3f66c16c 	.word	0x3f66c16c
 8008eb8:	5555553e 	.word	0x5555553e
 8008ebc:	3fc55555 	.word	0x3fc55555
 8008ec0:	fff00000 	.word	0xfff00000
 8008ec4:	3ff00000 	.word	0x3ff00000
 8008ec8:	4090cbff 	.word	0x4090cbff
 8008ecc:	3f6f3400 	.word	0x3f6f3400
 8008ed0:	3fe00000 	.word	0x3fe00000
 8008ed4:	652b82fe 	.word	0x652b82fe
 8008ed8:	3c971547 	.word	0x3c971547
 8008edc:	4090cc00 	.word	0x4090cc00

08008ee0 <fabs>:
 8008ee0:	ec51 0b10 	vmov	r0, r1, d0
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008eea:	ec43 2b10 	vmov	d0, r2, r3
 8008eee:	4770      	bx	lr

08008ef0 <scalbn>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	ec55 4b10 	vmov	r4, r5, d0
 8008ef6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008efa:	4606      	mov	r6, r0
 8008efc:	462b      	mov	r3, r5
 8008efe:	b991      	cbnz	r1, 8008f26 <scalbn+0x36>
 8008f00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008f04:	4323      	orrs	r3, r4
 8008f06:	d03d      	beq.n	8008f84 <scalbn+0x94>
 8008f08:	4b35      	ldr	r3, [pc, #212]	@ (8008fe0 <scalbn+0xf0>)
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f7f7 fb7a 	bl	8000608 <__aeabi_dmul>
 8008f14:	4b33      	ldr	r3, [pc, #204]	@ (8008fe4 <scalbn+0xf4>)
 8008f16:	429e      	cmp	r6, r3
 8008f18:	4604      	mov	r4, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	da0f      	bge.n	8008f3e <scalbn+0x4e>
 8008f1e:	a328      	add	r3, pc, #160	@ (adr r3, 8008fc0 <scalbn+0xd0>)
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	e01e      	b.n	8008f64 <scalbn+0x74>
 8008f26:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008f2a:	4291      	cmp	r1, r2
 8008f2c:	d10b      	bne.n	8008f46 <scalbn+0x56>
 8008f2e:	4622      	mov	r2, r4
 8008f30:	4620      	mov	r0, r4
 8008f32:	4629      	mov	r1, r5
 8008f34:	f7f7 f9b2 	bl	800029c <__adddf3>
 8008f38:	4604      	mov	r4, r0
 8008f3a:	460d      	mov	r5, r1
 8008f3c:	e022      	b.n	8008f84 <scalbn+0x94>
 8008f3e:	460b      	mov	r3, r1
 8008f40:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008f44:	3936      	subs	r1, #54	@ 0x36
 8008f46:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008f4a:	4296      	cmp	r6, r2
 8008f4c:	dd0d      	ble.n	8008f6a <scalbn+0x7a>
 8008f4e:	2d00      	cmp	r5, #0
 8008f50:	a11d      	add	r1, pc, #116	@ (adr r1, 8008fc8 <scalbn+0xd8>)
 8008f52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f56:	da02      	bge.n	8008f5e <scalbn+0x6e>
 8008f58:	a11d      	add	r1, pc, #116	@ (adr r1, 8008fd0 <scalbn+0xe0>)
 8008f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f5e:	a31a      	add	r3, pc, #104	@ (adr r3, 8008fc8 <scalbn+0xd8>)
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	f7f7 fb50 	bl	8000608 <__aeabi_dmul>
 8008f68:	e7e6      	b.n	8008f38 <scalbn+0x48>
 8008f6a:	1872      	adds	r2, r6, r1
 8008f6c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008f70:	428a      	cmp	r2, r1
 8008f72:	dcec      	bgt.n	8008f4e <scalbn+0x5e>
 8008f74:	2a00      	cmp	r2, #0
 8008f76:	dd08      	ble.n	8008f8a <scalbn+0x9a>
 8008f78:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008f7c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008f80:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f84:	ec45 4b10 	vmov	d0, r4, r5
 8008f88:	bd70      	pop	{r4, r5, r6, pc}
 8008f8a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008f8e:	da08      	bge.n	8008fa2 <scalbn+0xb2>
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	a10b      	add	r1, pc, #44	@ (adr r1, 8008fc0 <scalbn+0xd0>)
 8008f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f98:	dac1      	bge.n	8008f1e <scalbn+0x2e>
 8008f9a:	a10f      	add	r1, pc, #60	@ (adr r1, 8008fd8 <scalbn+0xe8>)
 8008f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa0:	e7bd      	b.n	8008f1e <scalbn+0x2e>
 8008fa2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008fa6:	3236      	adds	r2, #54	@ 0x36
 8008fa8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008fac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe8 <scalbn+0xf8>)
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	e7d4      	b.n	8008f64 <scalbn+0x74>
 8008fba:	bf00      	nop
 8008fbc:	f3af 8000 	nop.w
 8008fc0:	c2f8f359 	.word	0xc2f8f359
 8008fc4:	01a56e1f 	.word	0x01a56e1f
 8008fc8:	8800759c 	.word	0x8800759c
 8008fcc:	7e37e43c 	.word	0x7e37e43c
 8008fd0:	8800759c 	.word	0x8800759c
 8008fd4:	fe37e43c 	.word	0xfe37e43c
 8008fd8:	c2f8f359 	.word	0xc2f8f359
 8008fdc:	81a56e1f 	.word	0x81a56e1f
 8008fe0:	43500000 	.word	0x43500000
 8008fe4:	ffff3cb0 	.word	0xffff3cb0
 8008fe8:	3c900000 	.word	0x3c900000

08008fec <with_errno>:
 8008fec:	b510      	push	{r4, lr}
 8008fee:	ed2d 8b02 	vpush	{d8}
 8008ff2:	eeb0 8a40 	vmov.f32	s16, s0
 8008ff6:	eef0 8a60 	vmov.f32	s17, s1
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	f7fd fae2 	bl	80065c4 <__errno>
 8009000:	eeb0 0a48 	vmov.f32	s0, s16
 8009004:	eef0 0a68 	vmov.f32	s1, s17
 8009008:	ecbd 8b02 	vpop	{d8}
 800900c:	6004      	str	r4, [r0, #0]
 800900e:	bd10      	pop	{r4, pc}

08009010 <xflow>:
 8009010:	4603      	mov	r3, r0
 8009012:	b507      	push	{r0, r1, r2, lr}
 8009014:	ec51 0b10 	vmov	r0, r1, d0
 8009018:	b183      	cbz	r3, 800903c <xflow+0x2c>
 800901a:	4602      	mov	r2, r0
 800901c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009020:	e9cd 2300 	strd	r2, r3, [sp]
 8009024:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009028:	f7f7 faee 	bl	8000608 <__aeabi_dmul>
 800902c:	ec41 0b10 	vmov	d0, r0, r1
 8009030:	2022      	movs	r0, #34	@ 0x22
 8009032:	b003      	add	sp, #12
 8009034:	f85d eb04 	ldr.w	lr, [sp], #4
 8009038:	f7ff bfd8 	b.w	8008fec <with_errno>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	e7ee      	b.n	8009020 <xflow+0x10>
 8009042:	0000      	movs	r0, r0
 8009044:	0000      	movs	r0, r0
	...

08009048 <__math_uflow>:
 8009048:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009050 <__math_uflow+0x8>
 800904c:	f7ff bfe0 	b.w	8009010 <xflow>
 8009050:	00000000 	.word	0x00000000
 8009054:	10000000 	.word	0x10000000

08009058 <__math_oflow>:
 8009058:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009060 <__math_oflow+0x8>
 800905c:	f7ff bfd8 	b.w	8009010 <xflow>
 8009060:	00000000 	.word	0x00000000
 8009064:	70000000 	.word	0x70000000

08009068 <__ieee754_sqrt>:
 8009068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	4a68      	ldr	r2, [pc, #416]	@ (8009210 <__ieee754_sqrt+0x1a8>)
 800906e:	ec55 4b10 	vmov	r4, r5, d0
 8009072:	43aa      	bics	r2, r5
 8009074:	462b      	mov	r3, r5
 8009076:	4621      	mov	r1, r4
 8009078:	d110      	bne.n	800909c <__ieee754_sqrt+0x34>
 800907a:	4622      	mov	r2, r4
 800907c:	4620      	mov	r0, r4
 800907e:	4629      	mov	r1, r5
 8009080:	f7f7 fac2 	bl	8000608 <__aeabi_dmul>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	4620      	mov	r0, r4
 800908a:	4629      	mov	r1, r5
 800908c:	f7f7 f906 	bl	800029c <__adddf3>
 8009090:	4604      	mov	r4, r0
 8009092:	460d      	mov	r5, r1
 8009094:	ec45 4b10 	vmov	d0, r4, r5
 8009098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909c:	2d00      	cmp	r5, #0
 800909e:	dc0e      	bgt.n	80090be <__ieee754_sqrt+0x56>
 80090a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80090a4:	4322      	orrs	r2, r4
 80090a6:	d0f5      	beq.n	8009094 <__ieee754_sqrt+0x2c>
 80090a8:	b19d      	cbz	r5, 80090d2 <__ieee754_sqrt+0x6a>
 80090aa:	4622      	mov	r2, r4
 80090ac:	4620      	mov	r0, r4
 80090ae:	4629      	mov	r1, r5
 80090b0:	f7f7 f8f2 	bl	8000298 <__aeabi_dsub>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	f7f7 fbd0 	bl	800085c <__aeabi_ddiv>
 80090bc:	e7e8      	b.n	8009090 <__ieee754_sqrt+0x28>
 80090be:	152a      	asrs	r2, r5, #20
 80090c0:	d115      	bne.n	80090ee <__ieee754_sqrt+0x86>
 80090c2:	2000      	movs	r0, #0
 80090c4:	e009      	b.n	80090da <__ieee754_sqrt+0x72>
 80090c6:	0acb      	lsrs	r3, r1, #11
 80090c8:	3a15      	subs	r2, #21
 80090ca:	0549      	lsls	r1, r1, #21
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0fa      	beq.n	80090c6 <__ieee754_sqrt+0x5e>
 80090d0:	e7f7      	b.n	80090c2 <__ieee754_sqrt+0x5a>
 80090d2:	462a      	mov	r2, r5
 80090d4:	e7fa      	b.n	80090cc <__ieee754_sqrt+0x64>
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	3001      	adds	r0, #1
 80090da:	02dc      	lsls	r4, r3, #11
 80090dc:	d5fb      	bpl.n	80090d6 <__ieee754_sqrt+0x6e>
 80090de:	1e44      	subs	r4, r0, #1
 80090e0:	1b12      	subs	r2, r2, r4
 80090e2:	f1c0 0420 	rsb	r4, r0, #32
 80090e6:	fa21 f404 	lsr.w	r4, r1, r4
 80090ea:	4323      	orrs	r3, r4
 80090ec:	4081      	lsls	r1, r0
 80090ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80090f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090fa:	07d2      	lsls	r2, r2, #31
 80090fc:	bf5c      	itt	pl
 80090fe:	005b      	lslpl	r3, r3, #1
 8009100:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009104:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009108:	bf58      	it	pl
 800910a:	0049      	lslpl	r1, r1, #1
 800910c:	2600      	movs	r6, #0
 800910e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009112:	106d      	asrs	r5, r5, #1
 8009114:	0049      	lsls	r1, r1, #1
 8009116:	2016      	movs	r0, #22
 8009118:	4632      	mov	r2, r6
 800911a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800911e:	1917      	adds	r7, r2, r4
 8009120:	429f      	cmp	r7, r3
 8009122:	bfde      	ittt	le
 8009124:	193a      	addle	r2, r7, r4
 8009126:	1bdb      	suble	r3, r3, r7
 8009128:	1936      	addle	r6, r6, r4
 800912a:	0fcf      	lsrs	r7, r1, #31
 800912c:	3801      	subs	r0, #1
 800912e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009132:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009136:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800913a:	d1f0      	bne.n	800911e <__ieee754_sqrt+0xb6>
 800913c:	4604      	mov	r4, r0
 800913e:	2720      	movs	r7, #32
 8009140:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009144:	429a      	cmp	r2, r3
 8009146:	eb00 0e0c 	add.w	lr, r0, ip
 800914a:	db02      	blt.n	8009152 <__ieee754_sqrt+0xea>
 800914c:	d113      	bne.n	8009176 <__ieee754_sqrt+0x10e>
 800914e:	458e      	cmp	lr, r1
 8009150:	d811      	bhi.n	8009176 <__ieee754_sqrt+0x10e>
 8009152:	f1be 0f00 	cmp.w	lr, #0
 8009156:	eb0e 000c 	add.w	r0, lr, ip
 800915a:	da42      	bge.n	80091e2 <__ieee754_sqrt+0x17a>
 800915c:	2800      	cmp	r0, #0
 800915e:	db40      	blt.n	80091e2 <__ieee754_sqrt+0x17a>
 8009160:	f102 0801 	add.w	r8, r2, #1
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	458e      	cmp	lr, r1
 8009168:	bf88      	it	hi
 800916a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800916e:	eba1 010e 	sub.w	r1, r1, lr
 8009172:	4464      	add	r4, ip
 8009174:	4642      	mov	r2, r8
 8009176:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800917a:	3f01      	subs	r7, #1
 800917c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009180:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009184:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009188:	d1dc      	bne.n	8009144 <__ieee754_sqrt+0xdc>
 800918a:	4319      	orrs	r1, r3
 800918c:	d01b      	beq.n	80091c6 <__ieee754_sqrt+0x15e>
 800918e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009214 <__ieee754_sqrt+0x1ac>
 8009192:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009218 <__ieee754_sqrt+0x1b0>
 8009196:	e9da 0100 	ldrd	r0, r1, [sl]
 800919a:	e9db 2300 	ldrd	r2, r3, [fp]
 800919e:	f7f7 f87b 	bl	8000298 <__aeabi_dsub>
 80091a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	4640      	mov	r0, r8
 80091ac:	4649      	mov	r1, r9
 80091ae:	f7f7 fca7 	bl	8000b00 <__aeabi_dcmple>
 80091b2:	b140      	cbz	r0, 80091c6 <__ieee754_sqrt+0x15e>
 80091b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80091b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80091bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80091c0:	d111      	bne.n	80091e6 <__ieee754_sqrt+0x17e>
 80091c2:	3601      	adds	r6, #1
 80091c4:	463c      	mov	r4, r7
 80091c6:	1072      	asrs	r2, r6, #1
 80091c8:	0863      	lsrs	r3, r4, #1
 80091ca:	07f1      	lsls	r1, r6, #31
 80091cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80091d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80091d4:	bf48      	it	mi
 80091d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80091da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80091de:	4618      	mov	r0, r3
 80091e0:	e756      	b.n	8009090 <__ieee754_sqrt+0x28>
 80091e2:	4690      	mov	r8, r2
 80091e4:	e7be      	b.n	8009164 <__ieee754_sqrt+0xfc>
 80091e6:	f7f7 f859 	bl	800029c <__adddf3>
 80091ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4640      	mov	r0, r8
 80091f4:	4649      	mov	r1, r9
 80091f6:	f7f7 fc79 	bl	8000aec <__aeabi_dcmplt>
 80091fa:	b120      	cbz	r0, 8009206 <__ieee754_sqrt+0x19e>
 80091fc:	1ca0      	adds	r0, r4, #2
 80091fe:	bf08      	it	eq
 8009200:	3601      	addeq	r6, #1
 8009202:	3402      	adds	r4, #2
 8009204:	e7df      	b.n	80091c6 <__ieee754_sqrt+0x15e>
 8009206:	1c63      	adds	r3, r4, #1
 8009208:	f023 0401 	bic.w	r4, r3, #1
 800920c:	e7db      	b.n	80091c6 <__ieee754_sqrt+0x15e>
 800920e:	bf00      	nop
 8009210:	7ff00000 	.word	0x7ff00000
 8009214:	200001e0 	.word	0x200001e0
 8009218:	200001d8 	.word	0x200001d8

0800921c <_init>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	bf00      	nop
 8009220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009222:	bc08      	pop	{r3}
 8009224:	469e      	mov	lr, r3
 8009226:	4770      	bx	lr

08009228 <_fini>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	bf00      	nop
 800922c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922e:	bc08      	pop	{r3}
 8009230:	469e      	mov	lr, r3
 8009232:	4770      	bx	lr
