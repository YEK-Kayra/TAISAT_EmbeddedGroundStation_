
TAISAT_EmbeddedGroundStation_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08009750  08009750  0000a750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b28  08009b28  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009b28  08009b28  0000ab28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b30  08009b30  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b30  08009b30  0000ab30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b34  08009b34  0000ab34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009b38  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  200001e8  08009d20  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08009d20  0000b618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4dd  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002401  00000000  00000000  000196f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0001baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008cf  00000000  00000000  0001c658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179c6  00000000  00000000  0001cf27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001084b  00000000  00000000  000348ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b51d  00000000  00000000  00045138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004260  00000000  00000000  000d0698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000d48f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009734 	.word	0x08009734

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009734 	.word	0x08009734

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MS5611_Init>:


/******************************************************************************
         			#### MS5611 FUNCTIONS ####
******************************************************************************/
MS5611_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *dev){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	 MS5611_Reset(dev);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 f86f 	bl	8001034 <MS5611_Reset>

	 if(HAL_I2C_IsDeviceReady(dev->i2c, dev->I2C_ADDRESS, 1, 1000) != HAL_OK){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	8899      	ldrh	r1, [r3, #4]
 8000f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f62:	2201      	movs	r2, #1
 8000f64:	f002 fc4a 	bl	80037fc <HAL_I2C_IsDeviceReady>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d000      	beq.n	8000f70 <MS5611_Init+0x28>

			__NOP();
 8000f6e:	bf00      	nop

	 }

	MS5611_Get_CalibCoeff(dev);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f879 	bl	8001068 <MS5611_Get_CalibCoeff>

	/**
	 * It is calculated average vertical altitude for set to zero our actual altitude
	 */
	if(dev->Ref_Alt_Sel == 'm'){
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8000f7c:	2b6d      	cmp	r3, #109	@ 0x6d
 8000f7e:	d10c      	bne.n	8000f9a <MS5611_Init+0x52>

		dev->FixedAltitude = 0.0; //We set zero at the first time because gets the real place altitude value
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	661a      	str	r2, [r3, #96]	@ 0x60

		dev->FixedAltitude = MS5611_Calc_TemporaryAltitude(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f819 	bl	8000fc0 <MS5611_Calc_TemporaryAltitude>
 8000f8e:	eef0 7a40 	vmov.f32	s15, s0
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 8000f98:	e008      	b.n	8000fac <MS5611_Init+0x64>

		 }
		 else if(dev->Ref_Alt_Sel == 'M'){
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8000fa0:	2b4d      	cmp	r3, #77	@ 0x4d
 8000fa2:	d103      	bne.n	8000fac <MS5611_Init+0x64>

			 dev->FixedAltitude = 0.0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	661a      	str	r2, [r3, #96]	@ 0x60

		 }
	/**
	 * In the beginning, variables that record the amounts of change are reset for security measures
	 */
	MS5611_ResetRef_DeltaVal(dev);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 fcd9 	bl	8001964 <MS5611_ResetRef_DeltaVal>

	return MS5611_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <MS5611_Calc_TemporaryAltitude>:

float MS5611_Calc_TemporaryAltitude(MS5611_HandleTypeDef *dev){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

	 float tempAltitude = 0;
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]

	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	e01d      	b.n	8001010 <MS5611_Calc_TemporaryAltitude+0x50>

		 MS5611_Read_ActVal(dev);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fc5b 	bl	8001890 <MS5611_Read_ActVal>
		 tempAltitude = (float)(tempAltitude + (float)(MS5611_Altitude * 0.05));
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <MS5611_Calc_TemporaryAltitude+0x70>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff faba 	bl	8000558 <__aeabi_f2d>
 8000fe4:	a310      	add	r3, pc, #64	@ (adr r3, 8001028 <MS5611_Calc_TemporaryAltitude+0x68>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	f7ff fb0d 	bl	8000608 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff fddf 	bl	8000bb8 <__aeabi_d2f>
 8000ffa:	ee07 0a10 	vmov	s14, r0
 8000ffe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001006:	edc7 7a03 	vstr	s15, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	3301      	adds	r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b13      	cmp	r3, #19
 8001014:	ddde      	ble.n	8000fd4 <MS5611_Calc_TemporaryAltitude+0x14>

	  }

	 return tempAltitude;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	ee07 3a90 	vmov	s15, r3

}
 800101c:	eeb0 0a67 	vmov.f32	s0, s15
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	9999999a 	.word	0x9999999a
 800102c:	3fa99999 	.word	0x3fa99999
 8001030:	20000360 	.word	0x20000360

08001034 <MS5611_Reset>:
void MS5611_Reset(MS5611_HandleTypeDef *dev){
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
 800103a:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Write(dev->i2c, dev->I2C_ADDRESS, dev->I2C_ADDRESS, 1, &ResetCom, 1, 1000);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	8899      	ldrh	r1, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	889a      	ldrh	r2, [r3, #4]
 8001048:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <MS5611_Reset+0x30>)
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	f002 fad6 	bl	8003608 <HAL_I2C_Mem_Write>

}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000002 	.word	0x20000002

08001068 <MS5611_Get_CalibCoeff>:


void MS5611_Get_CalibCoeff(MS5611_HandleTypeDef *dev){
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	@ 0x38
 800106c:	af02      	add	r7, sp, #8
 800106e:	6078      	str	r0, [r7, #4]

	uint8_t CalibCoefAddrss[7] = {0xA2, //C1
 8001070:	4a8c      	ldr	r2, [pc, #560]	@ (80012a4 <MS5611_Get_CalibCoeff+0x23c>)
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107a:	6018      	str	r0, [r3, #0]
 800107c:	3304      	adds	r3, #4
 800107e:	8019      	strh	r1, [r3, #0]
 8001080:	3302      	adds	r3, #2
 8001082:	0c0a      	lsrs	r2, r1, #16
 8001084:	701a      	strb	r2, [r3, #0]
								  0xA8, //C4
								  0xAA, //C5
								  0xAC, //C6
								  0xAE}; /*! The last address is for CRC*/

	uint8_t TempryCalibCoefVal[2] = {0};	/*! Temporary buffer that gets two complement of each calibration coefficient*/
 8001086:	2300      	movs	r3, #0
 8001088:	83bb      	strh	r3, [r7, #28]
	uint8_t CalibCoefVal[14] = {0};			/*! Stable buffer that collects all complements of calibration coefficients*/
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	811a      	strh	r2, [r3, #8]
	uint8_t cnt = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f



	for(cnt = 0; cnt <= 6 ; cnt++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80010a6:	e03b      	b.n	8001120 <MS5611_Get_CalibCoeff+0xb8>

		HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &CalibCoefAddrss[cnt], 1, 1000);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	8899      	ldrh	r1, [r3, #4]
 80010b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010b4:	f107 0220 	add.w	r2, r7, #32
 80010b8:	441a      	add	r2, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	f001 ff71 	bl	8002fa8 <HAL_I2C_Master_Transmit>


				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010ca:	e010      	b.n	80010ee <MS5611_Get_CalibCoeff+0x86>

					HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &TempryCalibCoefVal[cnt_2], 2, 1000);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	8899      	ldrh	r1, [r3, #4]
 80010d4:	f107 021c 	add.w	r2, r7, #28
 80010d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010da:	441a      	add	r2, r3
 80010dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2302      	movs	r3, #2
 80010e4:	f002 f85e 	bl	80031a4 <HAL_I2C_Master_Receive>
				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 80010e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ea:	3301      	adds	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	ddeb      	ble.n	80010cc <MS5611_Get_CalibCoeff+0x64>

				}

		CalibCoefVal[(cnt*2)]   = TempryCalibCoefVal[0];
 80010f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	7f3a      	ldrb	r2, [r7, #28]
 80010fc:	3330      	adds	r3, #48	@ 0x30
 80010fe:	443b      	add	r3, r7
 8001100:	f803 2c24 	strb.w	r2, [r3, #-36]
		CalibCoefVal[(cnt*2+1)] = TempryCalibCoefVal[1];
 8001104:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	3301      	adds	r3, #1
 800110c:	7f7a      	ldrb	r2, [r7, #29]
 800110e:	3330      	adds	r3, #48	@ 0x30
 8001110:	443b      	add	r3, r7
 8001112:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(cnt = 0; cnt <= 6 ; cnt++){
 8001116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800111a:	3301      	adds	r3, #1
 800111c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001124:	2b06      	cmp	r3, #6
 8001126:	d9bf      	bls.n	80010a8 <MS5611_Get_CalibCoeff+0x40>

	}

	cnt = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	/*! Complements of each calibration coefficient consists MSB and LSB bits*/
	dev->Clb_Cf.C1  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2; // uint16_t <== |MSB_C1|LSB_C1|
 800112e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001132:	3330      	adds	r3, #48	@ 0x30
 8001134:	443b      	add	r3, r7
 8001136:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001142:	3301      	adds	r3, #1
 8001144:	3330      	adds	r3, #48	@ 0x30
 8001146:	443b      	add	r3, r7
 8001148:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b21b      	sxth	r3, r3
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	80da      	strh	r2, [r3, #6]
 8001158:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800115c:	3302      	adds	r3, #2
 800115e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C2  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001162:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001166:	3330      	adds	r3, #48	@ 0x30
 8001168:	443b      	add	r3, r7
 800116a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001176:	3301      	adds	r3, #1
 8001178:	3330      	adds	r3, #48	@ 0x30
 800117a:	443b      	add	r3, r7
 800117c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21b      	sxth	r3, r3
 8001186:	b29a      	uxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	811a      	strh	r2, [r3, #8]
 800118c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001190:	3302      	adds	r3, #2
 8001192:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C3  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001196:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800119a:	3330      	adds	r3, #48	@ 0x30
 800119c:	443b      	add	r3, r7
 800119e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011aa:	3301      	adds	r3, #1
 80011ac:	3330      	adds	r3, #48	@ 0x30
 80011ae:	443b      	add	r3, r7
 80011b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	815a      	strh	r2, [r3, #10]
 80011c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011c4:	3302      	adds	r3, #2
 80011c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C4  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80011ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ce:	3330      	adds	r3, #48	@ 0x30
 80011d0:	443b      	add	r3, r7
 80011d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21a      	sxth	r2, r3
 80011da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011de:	3301      	adds	r3, #1
 80011e0:	3330      	adds	r3, #48	@ 0x30
 80011e2:	443b      	add	r3, r7
 80011e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	819a      	strh	r2, [r3, #12]
 80011f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011f8:	3302      	adds	r3, #2
 80011fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C5  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80011fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001202:	3330      	adds	r3, #48	@ 0x30
 8001204:	443b      	add	r3, r7
 8001206:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001212:	3301      	adds	r3, #1
 8001214:	3330      	adds	r3, #48	@ 0x30
 8001216:	443b      	add	r3, r7
 8001218:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21b      	sxth	r3, r3
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	81da      	strh	r2, [r3, #14]
 8001228:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800122c:	3302      	adds	r3, #2
 800122e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C6  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001232:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001236:	3330      	adds	r3, #48	@ 0x30
 8001238:	443b      	add	r3, r7
 800123a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001246:	3301      	adds	r3, #1
 8001248:	3330      	adds	r3, #48	@ 0x30
 800124a:	443b      	add	r3, r7
 800124c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001250:	b21b      	sxth	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b21b      	sxth	r3, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	821a      	strh	r2, [r3, #16]
 800125c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001260:	3302      	adds	r3, #2
 8001262:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001266:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800126a:	3330      	adds	r3, #48	@ 0x30
 800126c:	443b      	add	r3, r7
 800126e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21a      	sxth	r2, r3
 8001276:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800127a:	3301      	adds	r3, #1
 800127c:	3330      	adds	r3, #48	@ 0x30
 800127e:	443b      	add	r3, r7
 8001280:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21b      	sxth	r3, r3
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	825a      	strh	r2, [r3, #18]
 8001290:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001294:	3302      	adds	r3, #2
 8001296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

}
 800129a:	bf00      	nop
 800129c:	3730      	adds	r7, #48	@ 0x30
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08009750 	.word	0x08009750

080012a8 <MS5611_ReadRaw_Press_Temp>:


void MS5611_ReadRaw_Press_Temp(MS5611_HandleTypeDef *dev){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]

	uint8_t RawDataD1[3]  = {0}; /*! D1 = Raw pressure value that will be compensated at other functions*/
 80012b0:	4b38      	ldr	r3, [pc, #224]	@ (8001394 <MS5611_ReadRaw_Press_Temp+0xec>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	81bb      	strh	r3, [r7, #12]
 80012b6:	2300      	movs	r3, #0
 80012b8:	73bb      	strb	r3, [r7, #14]
	uint8_t RawDataD2[3]  = {0}; /*! D2 = Raw temperature value that will be compensated at other functions*/
 80012ba:	4b36      	ldr	r3, [pc, #216]	@ (8001394 <MS5611_ReadRaw_Press_Temp+0xec>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	813b      	strh	r3, [r7, #8]
 80012c0:	2300      	movs	r3, #0
 80012c2:	72bb      	strb	r3, [r7, #10]
	 *
	 * @Attention! you must wait minimum 15 milisecond after each i2c command because of clock line and calculation times.
	 */

	/*! Gets D1(Raw Pressure)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D1, 1, 1000); //(1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	8899      	ldrh	r1, [r3, #4]
 80012cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	4a30      	ldr	r2, [pc, #192]	@ (8001398 <MS5611_ReadRaw_Press_Temp+0xf0>)
 80012d6:	f001 fe67 	bl	8002fa8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80012da:	2014      	movs	r0, #20
 80012dc:	f001 f9ba 	bl	8002654 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);	 //(2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	8899      	ldrh	r1, [r3, #4]
 80012e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	4a2a      	ldr	r2, [pc, #168]	@ (800139c <MS5611_ReadRaw_Press_Temp+0xf4>)
 80012f2:	f001 fe59 	bl	8002fa8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80012f6:	2014      	movs	r0, #20
 80012f8:	f001 f9ac 	bl	8002654 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD1[0], 3, 10000);	 //(3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	8899      	ldrh	r1, [r3, #4]
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	f242 7310 	movw	r3, #10000	@ 0x2710
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2303      	movs	r3, #3
 8001310:	f001 ff48 	bl	80031a4 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D1 = (uint32_t)((RawDataD1[0]<<16) | (RawDataD1[1]<<8) | (RawDataD1[2]<<0)); // MSB|LSB|XLSB
 8001314:	7b3b      	ldrb	r3, [r7, #12]
 8001316:	041a      	lsls	r2, r3, #16
 8001318:	7b7b      	ldrb	r3, [r7, #13]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	4313      	orrs	r3, r2
 800131e:	7bba      	ldrb	r2, [r7, #14]
 8001320:	4313      	orrs	r3, r2
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	615a      	str	r2, [r3, #20]

	/*! Gets D2(Raw Temperature)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D2, 1, 1000); //(1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	8899      	ldrh	r1, [r3, #4]
 8001330:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <MS5611_ReadRaw_Press_Temp+0xf8>)
 800133a:	f001 fe35 	bl	8002fa8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800133e:	2014      	movs	r0, #20
 8001340:	f001 f988 	bl	8002654 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);  	 //(2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	8899      	ldrh	r1, [r3, #4]
 800134c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	4a11      	ldr	r2, [pc, #68]	@ (800139c <MS5611_ReadRaw_Press_Temp+0xf4>)
 8001356:	f001 fe27 	bl	8002fa8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800135a:	2014      	movs	r0, #20
 800135c:	f001 f97a 	bl	8002654 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD2[0], 3, 1000);  //(3)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	8899      	ldrh	r1, [r3, #4]
 8001368:	f107 0208 	add.w	r2, r7, #8
 800136c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2303      	movs	r3, #3
 8001374:	f001 ff16 	bl	80031a4 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D2 = (uint32_t)((RawDataD2[0]<<16) | (RawDataD2[1]<<8) | (RawDataD2[2]<<0)); // MSB|LSB|XLSB
 8001378:	7a3b      	ldrb	r3, [r7, #8]
 800137a:	041a      	lsls	r2, r3, #16
 800137c:	7a7b      	ldrb	r3, [r7, #9]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4313      	orrs	r3, r2
 8001382:	7aba      	ldrb	r2, [r7, #10]
 8001384:	4313      	orrs	r3, r2
 8001386:	461a      	mov	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	08009758 	.word	0x08009758
 8001398:	20000000 	.word	0x20000000
 800139c:	20000204 	.word	0x20000204
 80013a0:	20000001 	.word	0x20000001

080013a4 <MS5611_FirstCalculateDatas>:


void MS5611_FirstCalculateDatas(MS5611_HandleTypeDef *dev){
 80013a4:	b5b0      	push	{r4, r5, r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	dev->ClcPrms.dT   = dev->ClcPrms.D2 - dev->Clb_Cf.C5 * pow(2,8);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8af 	bl	8000514 <__aeabi_ui2d>
 80013b6:	4604      	mov	r4, r0
 80013b8:	460d      	mov	r5, r1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	89db      	ldrh	r3, [r3, #14]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8b8 	bl	8000534 <__aeabi_i2d>
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b69      	ldr	r3, [pc, #420]	@ (8001570 <MS5611_FirstCalculateDatas+0x1cc>)
 80013ca:	f7ff f91d 	bl	8000608 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7fe ff5f 	bl	8000298 <__aeabi_dsub>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff fbe9 	bl	8000bb8 <__aeabi_d2f>
 80013e6:	4602      	mov	r2, r0
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	61da      	str	r2, [r3, #28]
	dev->ClcPrms.OFF  = dev->Clb_Cf.C2 * pow(2,17) + (dev->Clb_Cf.C4 * dev->ClcPrms.dT) / pow(2,6);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	891b      	ldrh	r3, [r3, #8]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f89f 	bl	8000534 <__aeabi_i2d>
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80013fe:	f7ff f903 	bl	8000608 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4614      	mov	r4, r2
 8001408:	461d      	mov	r5, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	899b      	ldrh	r3, [r3, #12]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	edd3 7a07 	vldr	s15, [r3, #28]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	ee17 0a90 	vmov	r0, s15
 8001424:	f7ff f898 	bl	8000558 <__aeabi_f2d>
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b51      	ldr	r3, [pc, #324]	@ (8001574 <MS5611_FirstCalculateDatas+0x1d0>)
 800142e:	f7ff fa15 	bl	800085c <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7fe ff2f 	bl	800029c <__adddf3>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fbb7 	bl	8000bb8 <__aeabi_d2f>
 800144a:	4602      	mov	r2, r0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
	dev->ClcPrms.SENS = dev->Clb_Cf.C1 * pow(2,16) + (dev->Clb_Cf.C3 * dev->ClcPrms.dT) / pow(2,7);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	88db      	ldrh	r3, [r3, #6]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f86d 	bl	8000534 <__aeabi_i2d>
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b46      	ldr	r3, [pc, #280]	@ (8001578 <MS5611_FirstCalculateDatas+0x1d4>)
 8001460:	f7ff f8d2 	bl	8000608 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4614      	mov	r4, r2
 800146a:	461d      	mov	r5, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	895b      	ldrh	r3, [r3, #10]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	edd3 7a07 	vldr	s15, [r3, #28]
 800147e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001482:	ee17 0a90 	vmov	r0, s15
 8001486:	f7ff f867 	bl	8000558 <__aeabi_f2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b3b      	ldr	r3, [pc, #236]	@ (800157c <MS5611_FirstCalculateDatas+0x1d8>)
 8001490:	f7ff f9e4 	bl	800085c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4620      	mov	r0, r4
 800149a:	4629      	mov	r1, r5
 800149c:	f7fe fefe 	bl	800029c <__adddf3>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fb86 	bl	8000bb8 <__aeabi_d2f>
 80014ac:	4602      	mov	r2, r0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	62da      	str	r2, [r3, #44]	@ 0x2c

	dev->ClcPrms.TEMP = 2000 + dev->ClcPrms.dT * dev->Clb_Cf.C6 / pow(2,23);								//Actual temperature data
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	8a1b      	ldrh	r3, [r3, #16]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	ee17 0a90 	vmov	r0, s15
 80014cc:	f7ff f844 	bl	8000558 <__aeabi_f2d>
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <MS5611_FirstCalculateDatas+0x1dc>)
 80014d6:	f7ff f9c1 	bl	800085c <__aeabi_ddiv>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <MS5611_FirstCalculateDatas+0x1e0>)
 80014e8:	f7fe fed8 	bl	800029c <__adddf3>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fb60 	bl	8000bb8 <__aeabi_d2f>
 80014f8:	4602      	mov	r2, r0
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	621a      	str	r2, [r3, #32]
	dev->ClcPrms.P	  = ((dev->ClcPrms.D1 * dev->ClcPrms.SENS / pow(2,21) - dev->ClcPrms.OFF))/pow(2,15);	//Actual pressure data
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001514:	ee17 0a90 	vmov	r0, s15
 8001518:	f7ff f81e 	bl	8000558 <__aeabi_f2d>
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <MS5611_FirstCalculateDatas+0x1e4>)
 8001522:	f7ff f99b 	bl	800085c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4614      	mov	r4, r2
 800152c:	461d      	mov	r5, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f810 	bl	8000558 <__aeabi_f2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4620      	mov	r0, r4
 800153e:	4629      	mov	r1, r5
 8001540:	f7fe feaa 	bl	8000298 <__aeabi_dsub>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MS5611_FirstCalculateDatas+0x1e8>)
 8001552:	f7ff f983 	bl	800085c <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fb2b 	bl	8000bb8 <__aeabi_d2f>
 8001562:	4602      	mov	r2, r0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bdb0      	pop	{r4, r5, r7, pc}
 8001570:	40700000 	.word	0x40700000
 8001574:	40500000 	.word	0x40500000
 8001578:	40f00000 	.word	0x40f00000
 800157c:	40600000 	.word	0x40600000
 8001580:	41600000 	.word	0x41600000
 8001584:	409f4000 	.word	0x409f4000
 8001588:	41400000 	.word	0x41400000
 800158c:	40e00000 	.word	0x40e00000

08001590 <MS5611_SecondCalculateDatas>:


void MS5611_SecondCalculateDatas(MS5611_HandleTypeDef *dev){
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

	if(dev->ClcPrms.TEMP < 2000){
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	edd3 7a08 	vldr	s15, [r3, #32]
 800159e:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80017d8 <MS5611_SecondCalculateDatas+0x248>
 80015a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	f140 80e3 	bpl.w	8001774 <MS5611_SecondCalculateDatas+0x1e4>

			/*! Low Temperature */
			dev->ClcPrms.TEMP2 = (dev->ClcPrms.dT * dev->ClcPrms.dT) / pow(2,31);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a07 	vldr	s14, [r3, #28]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80015ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015be:	eddf 6a87 	vldr	s13, [pc, #540]	@ 80017dc <MS5611_SecondCalculateDatas+0x24c>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,1);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80015d2:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80017d8 <MS5611_SecondCalculateDatas+0x248>
 80015d6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80015e0:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 80017d8 <MS5611_SecondCalculateDatas+0x248>
 80015e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80015f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015f4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80015f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,2);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	edd3 7a08 	vldr	s15, [r3, #32]
 8001608:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80017d8 <MS5611_SecondCalculateDatas+0x248>
 800160c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	edd3 7a08 	vldr	s15, [r3, #32]
 8001616:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80017d8 <MS5611_SecondCalculateDatas+0x248>
 800161a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800161e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001622:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001626:	ee27 7a87 	vmul.f32	s14, s15, s14
 800162a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800162e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

					if(dev->ClcPrms.TEMP < -1500){
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	edd3 7a08 	vldr	s15, [r3, #32]
 800163e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80017e0 <MS5611_SecondCalculateDatas+0x250>
 8001642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d571      	bpl.n	8001730 <MS5611_SecondCalculateDatas+0x1a0>
						/*! Very Low Temperature */
						dev->ClcPrms.OFF2  = dev->ClcPrms.OFF2 + 7 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	edd3 7a08 	vldr	s15, [r3, #32]
 8001658:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80017e4 <MS5611_SecondCalculateDatas+0x254>
 800165c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	edd3 7a08 	vldr	s15, [r3, #32]
 8001666:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 80017e4 <MS5611_SecondCalculateDatas+0x254>
 800166a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800166e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001672:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
 8001676:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800167a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
						dev->ClcPrms.SENS2 = dev->ClcPrms.SENS2 + 11 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500)) / pow(2,1);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff65 	bl	8000558 <__aeabi_f2d>
 800168e:	4604      	mov	r4, r0
 8001690:	460d      	mov	r5, r1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	edd3 7a08 	vldr	s15, [r3, #32]
 8001698:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80017e4 <MS5611_SecondCalculateDatas+0x254>
 800169c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80016a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80017e4 <MS5611_SecondCalculateDatas+0x254>
 80016aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b2:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80016b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ba:	ee17 0a90 	vmov	r0, s15
 80016be:	f7fe ff4b 	bl	8000558 <__aeabi_f2d>
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016ca:	f7ff f8c7 	bl	800085c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4620      	mov	r0, r4
 80016d4:	4629      	mov	r1, r5
 80016d6:	f7fe fde1 	bl	800029c <__adddf3>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7ff fa69 	bl	8000bb8 <__aeabi_d2f>
 80016e6:	4602      	mov	r2, r0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34

						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	ed93 7a08 	vldr	s14, [r3, #32]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80016f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800170e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;

		}
}
 800172e:	e04e      	b.n	80017ce <MS5611_SecondCalculateDatas+0x23e>
						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	ed93 7a08 	vldr	s14, [r3, #32]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800173c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8001772:	e02c      	b.n	80017ce <MS5611_SecondCalculateDatas+0x23e>
			dev->ClcPrms.TEMP2 = 0;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	639a      	str	r2, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 0;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	635a      	str	r2, [r3, #52]	@ 0x34
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	edc3 7a08 	vstr	s15, [r3, #32]
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80017ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80017c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bdb0      	pop	{r4, r5, r7, pc}
 80017d6:	bf00      	nop
 80017d8:	44fa0000 	.word	0x44fa0000
 80017dc:	4f000000 	.word	0x4f000000
 80017e0:	c4bb8000 	.word	0xc4bb8000
 80017e4:	44bb8000 	.word	0x44bb8000

080017e8 <MS5611_Calc_Altitude>:


float MS5611_Calc_Altitude(MS5611_HandleTypeDef *dev){
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

	return  ((SeaLevelTemp  / GradientTemp)
			* (1 - pow(((dev->ClcPrms.P/2) / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel)))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80017f6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80017fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fe:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001888 <MS5611_Calc_Altitude+0xa0>
 8001802:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001806:	ee16 0a90 	vmov	r0, s13
 800180a:	f7fe fea5 	bl	8000558 <__aeabi_f2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8001878 <MS5611_Calc_Altitude+0x90>
 8001816:	ec43 2b10 	vmov	d0, r2, r3
 800181a:	f007 f82d 	bl	8008878 <pow>
 800181e:	ec53 2b10 	vmov	r2, r3, d0
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	4919      	ldr	r1, [pc, #100]	@ (800188c <MS5611_Calc_Altitude+0xa4>)
 8001828:	f7fe fd36 	bl	8000298 <__aeabi_dsub>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	a312      	add	r3, pc, #72	@ (adr r3, 8001880 <MS5611_Calc_Altitude+0x98>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fee5 	bl	8000608 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4614      	mov	r4, r2
 8001844:	461d      	mov	r5, r3
			- dev->FixedAltitude) ;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe84 	bl	8000558 <__aeabi_f2d>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe fd1e 	bl	8000298 <__aeabi_dsub>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f7ff f9a8 	bl	8000bb8 <__aeabi_d2f>
 8001868:	4603      	mov	r3, r0
 800186a:	ee07 3a90 	vmov	s15, r3

}
 800186e:	eeb0 0a67 	vmov.f32	s0, s15
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bdb0      	pop	{r4, r5, r7, pc}
 8001878:	fd017917 	.word	0xfd017917
 800187c:	3fc85ace 	.word	0x3fc85ace
 8001880:	9d89d89d 	.word	0x9d89d89d
 8001884:	40e5a558 	.word	0x40e5a558
 8001888:	47c5e680 	.word	0x47c5e680
 800188c:	3ff00000 	.word	0x3ff00000

08001890 <MS5611_Read_ActVal>:


void MS5611_Read_ActVal(MS5611_HandleTypeDef *dev){
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

	/*! Read raw pressure and temperature MSB | LSB | XLSB values from the sensor*/
	MS5611_ReadRaw_Press_Temp(dev);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fd05 	bl	80012a8 <MS5611_ReadRaw_Press_Temp>

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	MS5611_FirstCalculateDatas(dev);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fd80 	bl	80013a4 <MS5611_FirstCalculateDatas>

	/*! If it's needed, Calculate 2st order temperature and pressure  according to MS5611 2st order algorithm */
	MS5611_SecondCalculateDatas(dev);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fe73 	bl	8001590 <MS5611_SecondCalculateDatas>

	/*! Vertical Altitude is calculated by using pressure and some coefficients */
	MS5611_Altitude = MS5611_Calc_Altitude(dev);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff9c 	bl	80017e8 <MS5611_Calc_Altitude>
 80018b0:	eef0 7a40 	vmov.f32	s15, s0
 80018b4:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <MS5611_Read_ActVal+0xb8>)
 80018b6:	edc3 7a00 	vstr	s15, [r3]

	/*! Vertical Speed is calculated by using differential of locations */
	MS5611_Calc_VertSpd(dev, MS5611_Altitude, &MS5611_VertSpeed);
 80018ba:	4b23      	ldr	r3, [pc, #140]	@ (8001948 <MS5611_Read_ActVal+0xb8>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	4922      	ldr	r1, [pc, #136]	@ (800194c <MS5611_Read_ActVal+0xbc>)
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f87a 	bl	80019c0 <MS5611_Calc_VertSpd>

	/*! Vertical acceleration is calculated by using differential of speed */
	MS5611_Calc_VertAcc(dev, MS5611_VertSpeed, &MS5611_VertAcc);
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <MS5611_Read_ActVal+0xbc>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	491f      	ldr	r1, [pc, #124]	@ (8001950 <MS5611_Read_ActVal+0xc0>)
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f890 	bl	80019fe <MS5611_Calc_VertAcc>

	/*! It's applied force on to the object that is given mass from the user */
	MS5611_Calc_gForce(dev, &MS5611_gForce, SatCar_Mass, MS5611_VertAcc);
 80018de:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <MS5611_Read_ActVal+0xc4>)
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <MS5611_Read_ActVal+0xc0>)
 80018e6:	ed93 7a00 	vldr	s14, [r3]
 80018ea:	eef0 0a47 	vmov.f32	s1, s14
 80018ee:	eeb0 0a67 	vmov.f32	s0, s15
 80018f2:	4919      	ldr	r1, [pc, #100]	@ (8001958 <MS5611_Read_ActVal+0xc8>)
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f8a3 	bl	8001a40 <MS5611_Calc_gForce>

	/*! Pressure unit is mBar and Temperature unit is celcius degress*/
	MS5611_Press = dev->ClcPrms.P/2 ;			//@e.g :
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001900:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <MS5611_Read_ActVal+0xcc>)
 800190a:	edc3 7a00 	vstr	s15, [r3]
	MS5611_Temp  = dev->ClcPrms.TEMP * 0.01; 		//@e.g : 25.57 CelciusDegress
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe20 	bl	8000558 <__aeabi_f2d>
 8001918:	a309      	add	r3, pc, #36	@ (adr r3, 8001940 <MS5611_Read_ActVal+0xb0>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe fe73 	bl	8000608 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f945 	bl	8000bb8 <__aeabi_d2f>
 800192e:	4603      	mov	r3, r0
 8001930:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <MS5611_Read_ActVal+0xd0>)
 8001932:	6013      	str	r3, [r2, #0]

}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	f3af 8000 	nop.w
 8001940:	47ae147b 	.word	0x47ae147b
 8001944:	3f847ae1 	.word	0x3f847ae1
 8001948:	20000360 	.word	0x20000360
 800194c:	20000364 	.word	0x20000364
 8001950:	20000368 	.word	0x20000368
 8001954:	20000370 	.word	0x20000370
 8001958:	2000036c 	.word	0x2000036c
 800195c:	20000358 	.word	0x20000358
 8001960:	2000035c 	.word	0x2000035c

08001964 <MS5611_ResetRef_DeltaVal>:

void MS5611_ResetRef_DeltaVal(MS5611_HandleTypeDef *dev){
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

	//At the beginning, reset the altitude values for the first and second conditions.
	dev->DeltaData.alt0 = 0.0;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	63da      	str	r2, [r3, #60]	@ 0x3c
	dev->DeltaData.alt1 = 0.0;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->DeltaData.holdAlt = 0.0;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	645a      	str	r2, [r3, #68]	@ 0x44

	//At the beginning, reset the speed values for the first and second conditions.
	dev->DeltaData.spd0 = 0.0;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	655a      	str	r2, [r3, #84]	@ 0x54
	dev->DeltaData.spd1 = 0.0;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	659a      	str	r2, [r3, #88]	@ 0x58
	dev->DeltaData.holdSpd = 0.0;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	65da      	str	r2, [r3, #92]	@ 0x5c

	//At the beginning, reset the acceleration values for the first and second conditions.
	dev->DeltaData.acc0 = 0.0;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->DeltaData.acc1 = 0.0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->DeltaData.holdAcc = 0.0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	651a      	str	r2, [r3, #80]	@ 0x50

}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <MS5611_Calc_VertSpd>:


/*!Vertical Speed is calculated by using differential of locations "V = (X1 - X0) /1 second" */
void MS5611_Calc_VertSpd(MS5611_HandleTypeDef *dev, float MS5611_Altitude, float *MS5611_VertSpeed){
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80019cc:	6079      	str	r1, [r7, #4]

	dev->DeltaData.alt1 = (MS5611_Altitude);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	641a      	str	r2, [r3, #64]	@ 0x40
	(*MS5611_VertSpeed) = (dev->DeltaData.alt1 - dev->DeltaData.alt0);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80019e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.alt0 = dev->DeltaData.alt1;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <MS5611_Calc_VertAcc>:

/*! Vertical acceleration is calculated by using differential of speed "a = (V1 - V0) / 1 second"  */
void MS5611_Calc_VertAcc(MS5611_HandleTypeDef *dev, float MS5611_VertSpeed,float *MS5611_VertAcc){
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a0a:	6079      	str	r1, [r7, #4]

	dev->DeltaData.spd1 = (MS5611_VertSpeed);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	659a      	str	r2, [r3, #88]	@ 0x58
	(*MS5611_VertAcc)	= (dev->DeltaData.spd1 - dev->DeltaData.spd0);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.spd0 = dev->DeltaData.spd1;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	655a      	str	r2, [r3, #84]	@ 0x54

}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	0000      	movs	r0, r0
	...

08001a40 <MS5611_Calc_gForce>:

/*! It's applied force on to the object that is given mass from the user. =" gForce = ObjectMass * (VerticalAcceleration / 9.80) " */
void MS5611_Calc_gForce(MS5611_HandleTypeDef *dev, float *MS5611_gForce, float SatCar_Mass, float MS5611_VertAcc){
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a4e:	edc7 0a00 	vstr	s1, [r7]

	(*MS5611_gForce) = (((MS5611_VertAcc)/GravityAccel)*(SatCar_Mass));
 8001a52:	6838      	ldr	r0, [r7, #0]
 8001a54:	f7fe fd80 	bl	8000558 <__aeabi_f2d>
 8001a58:	a30f      	add	r3, pc, #60	@ (adr r3, 8001a98 <MS5611_Calc_gForce+0x58>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fefd 	bl	800085c <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4614      	mov	r4, r2
 8001a68:	461d      	mov	r5, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fd74 	bl	8000558 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4620      	mov	r0, r4
 8001a76:	4629      	mov	r1, r5
 8001a78:	f7fe fdc6 	bl	8000608 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff f898 	bl	8000bb8 <__aeabi_d2f>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	601a      	str	r2, [r3, #0]

}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bdb0      	pop	{r4, r5, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	3f141206 	.word	0x3f141206
 8001a9c:	40239cc6 	.word	0x40239cc6

08001aa0 <HAL_UART_RxCpltCallback>:
	 *
	 */
extern	  	char								  UsbTTL2EmbeddedGS[9];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

	/*!
	 * The data coming from USART2 are the complete telemetry packets
	 * sent by the payload to the ground station.
	 */
	if(huart->Instance == USART2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a33      	ldr	r2, [pc, #204]	@ (8001b7c <HAL_UART_RxCpltCallback+0xdc>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d104      	bne.n	8001abc <HAL_UART_RxCpltCallback+0x1c>
	{
		SubSys_WirelessCom_Telemetry_Receive_From_To(Sat_Payload, GroundStation, &dev_WirelessComApp);
 8001ab2:	4a33      	ldr	r2, [pc, #204]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f000 f982 	bl	8001dc0 <SubSys_WirelessCom_Telemetry_Receive_From_To>
	/*!
	 * The data coming from USART1 are for the telecommand packets and
	 * the full telemetry packet that we need to receive&send to the ground station.
	 */

	if(huart->Instance == USART1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a30      	ldr	r2, [pc, #192]	@ (8001b84 <HAL_UART_RxCpltCallback+0xe4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d156      	bne.n	8001b74 <HAL_UART_RxCpltCallback+0xd4>
	{

		/*! Ground Station PC want a telemetry packet from embedded station*/
		if(UsbTTL2EmbeddedGS[0] == '*')
 8001ac6:	4b30      	ldr	r3, [pc, #192]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8001acc:	d106      	bne.n	8001adc <HAL_UART_RxCpltCallback+0x3c>
		{
			HAL_UART_Transmit(&huart1, dev_WirelessComApp.Buffer.Rx, 200, 2000);
 8001ace:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001ad2:	22c8      	movs	r2, #200	@ 0xc8
 8001ad4:	492d      	ldr	r1, [pc, #180]	@ (8001b8c <HAL_UART_RxCpltCallback+0xec>)
 8001ad6:	482e      	ldr	r0, [pc, #184]	@ (8001b90 <HAL_UART_RxCpltCallback+0xf0>)
 8001ad8:	f003 f882 	bl	8004be0 <HAL_UART_Transmit>
		}



		/*! Ground Station PC send a RHRH packet for color filtering*/
		if((UsbTTL2EmbeddedGS[3] !='?') && (UsbTTL2EmbeddedGS[4] !='?') && (UsbTTL2EmbeddedGS[5] !='?') && (UsbTTL2EmbeddedGS[5] !='?'))
 8001adc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001ade:	78db      	ldrb	r3, [r3, #3]
 8001ae0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ae2:	d020      	beq.n	8001b26 <HAL_UART_RxCpltCallback+0x86>
 8001ae4:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aea:	d01c      	beq.n	8001b26 <HAL_UART_RxCpltCallback+0x86>
 8001aec:	4b26      	ldr	r3, [pc, #152]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001aee:	795b      	ldrb	r3, [r3, #5]
 8001af0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001af2:	d018      	beq.n	8001b26 <HAL_UART_RxCpltCallback+0x86>
 8001af4:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001af6:	795b      	ldrb	r3, [r3, #5]
 8001af8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001afa:	d014      	beq.n	8001b26 <HAL_UART_RxCpltCallback+0x86>
		{
			dev_WirelessComApp.Variable.PAY_dataRHRH[0] = UsbTTL2EmbeddedGS[3];
 8001afc:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001afe:	78da      	ldrb	r2, [r3, #3]
 8001b00:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b02:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
			dev_WirelessComApp.Variable.PAY_dataRHRH[1] = UsbTTL2EmbeddedGS[4];
 8001b06:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001b08:	791a      	ldrb	r2, [r3, #4]
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b0c:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
			dev_WirelessComApp.Variable.PAY_dataRHRH[2] = UsbTTL2EmbeddedGS[5];
 8001b10:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001b12:	795a      	ldrb	r2, [r3, #5]
 8001b14:	4b1a      	ldr	r3, [pc, #104]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b16:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
			dev_WirelessComApp.Variable.PAY_dataRHRH[3] = UsbTTL2EmbeddedGS[6];
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001b1c:	799a      	ldrb	r2, [r3, #6]
 8001b1e:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b20:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
 8001b24:	e00f      	b.n	8001b46 <HAL_UART_RxCpltCallback+0xa6>
		}
		else
		{
			dev_WirelessComApp.Variable.PAY_dataRHRH[0] = '?';
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b28:	223f      	movs	r2, #63	@ 0x3f
 8001b2a:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
			dev_WirelessComApp.Variable.PAY_dataRHRH[1] = '?';
 8001b2e:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b30:	223f      	movs	r2, #63	@ 0x3f
 8001b32:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
			dev_WirelessComApp.Variable.PAY_dataRHRH[2] = '?';
 8001b36:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b38:	223f      	movs	r2, #63	@ 0x3f
 8001b3a:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
			dev_WirelessComApp.Variable.PAY_dataRHRH[3] = '?';
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b40:	223f      	movs	r2, #63	@ 0x3f
 8001b42:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
		}



		/*! Ground Station PC send a separation command*/
		if(UsbTTL2EmbeddedGS[6] =='+')
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001b48:	799b      	ldrb	r3, [r3, #6]
 8001b4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8001b4c:	d104      	bne.n	8001b58 <HAL_UART_RxCpltCallback+0xb8>
		{
			dev_WirelessComApp.Variable.PAY_SeparationCommand = '+';
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b50:	222b      	movs	r2, #43	@ 0x2b
 8001b52:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
 8001b56:	e003      	b.n	8001b60 <HAL_UART_RxCpltCallback+0xc0>
		}
		else
		{
			dev_WirelessComApp.Variable.PAY_SeparationCommand = '-';
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b5a:	222d      	movs	r2, #45	@ 0x2d
 8001b5c:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
		}


		/*! We need to send this packet to the Payload from Embedded ground station to Payload of Satellite */
		SubSys_WirelessCom_Telemetry_Transfer_From_To(GroundStationMcu, Sat_Payload, &dev_WirelessComApp);
 8001b60:	4a07      	ldr	r2, [pc, #28]	@ (8001b80 <HAL_UART_RxCpltCallback+0xe0>)
 8001b62:	2102      	movs	r1, #2
 8001b64:	2004      	movs	r0, #4
 8001b66:	f000 f871 	bl	8001c4c <SubSys_WirelessCom_Telemetry_Transfer_From_To>

		/*! Start listening to the ground station again on the UART1 channel,
		 * 	and trigger an interrupt if data is received.
		 */
		HAL_UART_Receive_IT(&huart1, UsbTTL2EmbeddedGS, sizeof(UsbTTL2EmbeddedGS));
 8001b6a:	2209      	movs	r2, #9
 8001b6c:	4906      	ldr	r1, [pc, #24]	@ (8001b88 <HAL_UART_RxCpltCallback+0xe8>)
 8001b6e:	4808      	ldr	r0, [pc, #32]	@ (8001b90 <HAL_UART_RxCpltCallback+0xf0>)
 8001b70:	f003 f8c1 	bl	8004cf6 <HAL_UART_Receive_IT>


	}


}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40004400 	.word	0x40004400
 8001b80:	20000398 	.word	0x20000398
 8001b84:	40011000 	.word	0x40011000
 8001b88:	200004b8 	.word	0x200004b8
 8001b8c:	200003d4 	.word	0x200003d4
 8001b90:	20000260 	.word	0x20000260

08001b94 <SubSys_WirelessCom_Config_WORK_MODE>:
	}

}


void SubSys_WirelessCom_Config_WORK_MODE(SubSys_WirelesscomConfig_HandleTypeDef    *dev){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

	switch(dev->Mode_SW){
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7ddb      	ldrb	r3, [r3, #23]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d84f      	bhi.n	8001c44 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>
 8001ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bac <SubSys_WirelessCom_Config_WORK_MODE+0x18>)
 8001ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001baa:	bf00      	nop
 8001bac:	08001bbd 	.word	0x08001bbd
 8001bb0:	08001bdf 	.word	0x08001bdf
 8001bb4:	08001c01 	.word	0x08001c01
 8001bb8:	08001c23 	.word	0x08001c23

		case NormalMode :	/*! UART and wireless channel are open, transparent transmission is on*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6858      	ldr	r0, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8b5b      	ldrh	r3, [r3, #26]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f001 f890 	bl	8002cec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6858      	ldr	r0, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	8b1b      	ldrh	r3, [r3, #24]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f001 f888 	bl	8002cec <HAL_GPIO_WritePin>
		break;
 8001bdc:	e032      	b.n	8001c44 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORsending :	/*! WOR Transmitter (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6858      	ldr	r0, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	8b5b      	ldrh	r3, [r3, #26]
 8001be6:	2200      	movs	r2, #0
 8001be8:	4619      	mov	r1, r3
 8001bea:	f001 f87f 	bl	8002cec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6858      	ldr	r0, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	8b1b      	ldrh	r3, [r3, #24]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f001 f877 	bl	8002cec <HAL_GPIO_WritePin>
		break;
 8001bfe:	e021      	b.n	8001c44 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORreceiving :	/*! WOR Receiver (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6858      	ldr	r0, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	8b5b      	ldrh	r3, [r3, #26]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f001 f86e 	bl	8002cec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6858      	ldr	r0, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	8b1b      	ldrh	r3, [r3, #24]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f001 f866 	bl	8002cec <HAL_GPIO_WritePin>
		break;
 8001c20:	e010      	b.n	8001c44 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case DeepSleep :	/*! Module goes to sleep so provides you to configure settings*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6858      	ldr	r0, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	8b5b      	ldrh	r3, [r3, #26]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f001 f85d 	bl	8002cec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6858      	ldr	r0, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	8b1b      	ldrh	r3, [r3, #24]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f001 f855 	bl	8002cec <HAL_GPIO_WritePin>
		break;
 8001c42:	bf00      	nop

	}

}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <SubSys_WirelessCom_Telemetry_Transfer_From_To>:
  * 																 	  @arg 1 : Sat_Payload
  * 																  	  @arg 2 : Ground_Sation
  * @param SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
  * @retval NONE
  */
void SubSys_WirelessCom_Telemetry_Transfer_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8001c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c50:	b08d      	sub	sp, #52	@ 0x34
 8001c52:	af06      	add	r7, sp, #24
 8001c54:	4603      	mov	r3, r0
 8001c56:	60ba      	str	r2, [r7, #8]
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	73bb      	strb	r3, [r7, #14]


	SubSys_WirelessCom_Telemetry_Create_Packet_For(GroundStationMcu, dev_WirelessComApp);
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	2004      	movs	r0, #4
 8001c62:	f000 f86f 	bl	8001d44 <SubSys_WirelessCom_Telemetry_Create_Packet_For>

			/*! We continue create a telemetry packet for transmitting to payload*/
			Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f103 041e 	add.w	r4, r3, #30
																	"G<%c%c%c%c%c><%.2f>",
																					   dev_WirelessComApp->Variable.PAY_dataRHRH[0],
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
			Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8001c72:	4698      	mov	r8, r3
																					   dev_WirelessComApp->Variable.PAY_dataRHRH[1],
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
			Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8001c7a:	4699      	mov	r9, r3
																					   dev_WirelessComApp->Variable.PAY_dataRHRH[2],
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
			Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8001c82:	461d      	mov	r5, r3
																					   dev_WirelessComApp->Variable.PAY_dataRHRH[3],
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
			Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8001c8a:	461e      	mov	r6, r3
																					   dev_WirelessComApp->Variable.PAY_SeparationCommand,
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
			Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8001c92:	607b      	str	r3, [r7, #4]
																					   dev_WirelessComApp->Variable.PAY_IOT_Temperature);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
			Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc5c 	bl	8000558 <__aeabi_f2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	9601      	str	r6, [sp, #4]
 8001cae:	9500      	str	r5, [sp, #0]
 8001cb0:	464b      	mov	r3, r9
 8001cb2:	4642      	mov	r2, r8
 8001cb4:	4920      	ldr	r1, [pc, #128]	@ (8001d38 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xec>)
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f004 fcb2 	bl	8006620 <siprintf>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xf0>)
 8001cc2:	801a      	strh	r2, [r3, #0]

			/*! Fill Embedded ground station command and ambiance temperature info */
			for(cnt = 0 ; cnt < Written_Bytes ; cnt++)
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xf4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e010      	b.n	8001cee <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xa2>
			{

				dev_WirelessComApp->Buffer.Tx[cnt+3] = dev_WirelessComApp->Buffer.Temp[cnt]; /*End of the array has \n character*/
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xf4>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xf4>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	3303      	adds	r3, #3
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	440a      	add	r2, r1
 8001cdc:	7f91      	ldrb	r1, [r2, #30]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	54d1      	strb	r1, [r2, r3]
			for(cnt = 0 ; cnt < Written_Bytes ; cnt++)
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xf4>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xf4>)
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xf4>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xf0>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3e7      	bcc.n	8001ccc <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x80>

			}

			/*! Fill gaps with character '*', So we create a 30bytes buffer */
			for(uint8_t j=(cnt+3) ; j < SizeOf_Wireless_TX_Buff_PAYLOAD ; j++)
 8001cfc:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xf4>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	3303      	adds	r3, #3
 8001d02:	75fb      	strb	r3, [r7, #23]
 8001d04:	e006      	b.n	8001d14 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xc8>
			{

				dev_WirelessComApp->Buffer.Tx[j] = '*';
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	212a      	movs	r1, #42	@ 0x2a
 8001d0c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t j=(cnt+3) ; j < SizeOf_Wireless_TX_Buff_PAYLOAD ; j++)
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	3301      	adds	r3, #1
 8001d12:	75fb      	strb	r3, [r7, #23]
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	2b1d      	cmp	r3, #29
 8001d18:	d9f5      	bls.n	8001d06 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xba>
			}

			/*! Transmit all Tx buffer(uint8_t) to the Payload of Satellite
			 * Total Size 30byte
			 */
			HAL_UART_Transmit(dev_WirelessComApp->huartX, dev_WirelessComApp->Buffer.Tx , SizeOf_Wireless_TX_Buff_PAYLOAD, 1000);
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d26:	221e      	movs	r2, #30
 8001d28:	f002 ff5a 	bl	8004be0 <HAL_UART_Transmit>
			//HAL_UART_Transmit(dev_WirelessComApp->huartX, (uint8_t *)dev_WirelessComApp->Buffer.Tx , SizeOf_Wireless_TX_Buff_PAYLOAD, 1000);
}
 8001d2c:	bf00      	nop
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d36:	bf00      	nop
 8001d38:	0800975c 	.word	0x0800975c
 8001d3c:	20000206 	.word	0x20000206
 8001d40:	20000208 	.word	0x20000208

08001d44 <SubSys_WirelessCom_Telemetry_Create_Packet_For>:
 * 																	   @arg 1 : Sat_Payload
 * 																	   @arg 2 : Ground_Sation
 * @param  : SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
 * @retval NONE
 */
void SubSys_WirelessCom_Telemetry_Create_Packet_For(MissionUnit x,SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]

	/*-------------TARGET DEVICE ADDRESS AND CHANNEL INFO----------------*/
				/*! Target device will be Satellite's Payload*/
				dev_WirelessComApp->Buffer.Tx[0] = dev_WirelessComApp->Target_ADDH;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	701a      	strb	r2, [r3, #0]
				dev_WirelessComApp->Buffer.Tx[1] = dev_WirelessComApp->Target_ADDL;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f893 211d 	ldrb.w	r2, [r3, #285]	@ 0x11d
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	705a      	strb	r2, [r3, #1]
				dev_WirelessComApp->Buffer.Tx[2] = dev_WirelessComApp->Target_Ch;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f893 211e 	ldrb.w	r2, [r3, #286]	@ 0x11e
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	709a      	strb	r2, [r3, #2]

				/*-------------YOUR DEVICE VARIABLE THAT YOU WİLL SEND----------------*/
				/*! We need to get temperature IOT data from the Embedded ground station and save into the variable */

				dev_WirelessComApp->Variable.PAY_IOT_Temperature = MS5611_Temp;
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x74>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

				dev_WirelessComApp->Variable.PAY_dataRHRH[0]	   =  UsbTTL2EmbeddedGS[3];
 8001d78:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x78>)
 8001d7a:	78da      	ldrb	r2, [r3, #3]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
				dev_WirelessComApp->Variable.PAY_dataRHRH[1] 	   =  UsbTTL2EmbeddedGS[4];
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x78>)
 8001d84:	791a      	ldrb	r2, [r3, #4]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
				dev_WirelessComApp->Variable.PAY_dataRHRH[2] 	   =  UsbTTL2EmbeddedGS[5];
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x78>)
 8001d8e:	795a      	ldrb	r2, [r3, #5]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
				dev_WirelessComApp->Variable.PAY_dataRHRH[3] 	   =  UsbTTL2EmbeddedGS[6];
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x78>)
 8001d98:	799a      	ldrb	r2, [r3, #6]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
				dev_WirelessComApp->Variable.PAY_SeparationCommand =  UsbTTL2EmbeddedGS[7];
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x78>)
 8001da2:	79da      	ldrb	r2, [r3, #7]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c



}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	2000035c 	.word	0x2000035c
 8001dbc:	200004b8 	.word	0x200004b8

08001dc0 <SubSys_WirelessCom_Telemetry_Receive_From_To>:
void SubSys_WirelessCom_Telemetry_Receive_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	603a      	str	r2, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	71bb      	strb	r3, [r7, #6]

	/**
	 *  "The Buffer.Rx will be filled with the payload's telemetry packet.
	 *   The payload must send a 200-byte telemetry packet for the IT function to work properly.
	 */
	HAL_UART_Receive_IT(dev_WirelessComApp->huartX, (uint8_t *)dev_WirelessComApp->Buffer.Rx, sizeof(dev_WirelessComApp->Buffer.Rx));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	333c      	adds	r3, #60	@ 0x3c
 8001dda:	22c8      	movs	r2, #200	@ 0xc8
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f002 ff8a 	bl	8004cf6 <HAL_UART_Receive_IT>

}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df0:	f000 fbbe 	bl	8002570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df4:	f000 f852 	bl	8001e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df8:	f000 f930 	bl	800205c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001dfc:	f000 f8ac 	bl	8001f58 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001e00:	f000 f902 	bl	8002008 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001e04:	f000 f8d6 	bl	8001fb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /******>>> SENSOR TPGVH INITIALIZATION BEGIN >>>******/
  	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_TPGVH_H
  	MS5611.I2C_ADDRESS = MS5611_I2C_ADDRESS_H;
 8001e08:	4b1c      	ldr	r3, [pc, #112]	@ (8001e7c <main+0x90>)
 8001e0a:	22ee      	movs	r2, #238	@ 0xee
 8001e0c:	809a      	strh	r2, [r3, #4]
  	MS5611.i2c = &hi2c1;
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <main+0x90>)
 8001e10:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <main+0x94>)
 8001e12:	601a      	str	r2, [r3, #0]
  	MS5611.Ref_Alt_Sel = 'm';
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <main+0x90>)
 8001e16:	226d      	movs	r2, #109	@ 0x6d
 8001e18:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  	MS5611_Init(&MS5611);
 8001e1c:	4817      	ldr	r0, [pc, #92]	@ (8001e7c <main+0x90>)
 8001e1e:	f7ff f893 	bl	8000f48 <MS5611_Init>
  	 SubSys_WirelessCom_Config_Init(&dev_WirelessComConfig);
  	 #endif

  	 #ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_WIRELESSCOMMUNICATION_TELEMETRY_H
  	 /*! Will be filled for your dev that use now*/
  	 dev_WirelessComApp.huartX = &huart2;
 8001e22:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <main+0x98>)
 8001e24:	4a18      	ldr	r2, [pc, #96]	@ (8001e88 <main+0x9c>)
 8001e26:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  	 dev_WirelessComConfig.Mode_SW = NormalMode; 		/*! UART and wireless channel are open, transparent transmission is on*/
 8001e2a:	4b18      	ldr	r3, [pc, #96]	@ (8001e8c <main+0xa0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	75da      	strb	r2, [r3, #23]
  	 SubSys_WirelessCom_Config_WORK_MODE(&dev_WirelessComConfig);
 8001e30:	4816      	ldr	r0, [pc, #88]	@ (8001e8c <main+0xa0>)
 8001e32:	f7ff feaf 	bl	8001b94 <SubSys_WirelessCom_Config_WORK_MODE>

  	 /*! Will be filled for the Payload of the Satellite(Target) Device */
  	 dev_WirelessComApp.Target_ADDH = 0x14;
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <main+0x98>)
 8001e38:	2214      	movs	r2, #20
 8001e3a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
  	 dev_WirelessComApp.Target_ADDL = 0x53;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <main+0x98>)
 8001e40:	2253      	movs	r2, #83	@ 0x53
 8001e42:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
  	 dev_WirelessComApp.Target_Ch   = 0x05;
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <main+0x98>)
 8001e48:	2205      	movs	r2, #5
 8001e4a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e


  	  /*! Interrupt is active for receiving wireless data
  	   * You need to cast variable type from char to uint8_t because of the instruction of Uart Receive function*/
  	  HAL_UART_Receive_IT(dev_WirelessComApp.huartX, (uint8_t *)dev_WirelessComApp.Buffer.Rx, sizeof(dev_WirelessComApp.Buffer.Rx));
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <main+0x98>)
 8001e50:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001e54:	22c8      	movs	r2, #200	@ 0xc8
 8001e56:	490e      	ldr	r1, [pc, #56]	@ (8001e90 <main+0xa4>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 ff4c 	bl	8004cf6 <HAL_UART_Receive_IT>
    /******<<< WIRELESS COMMUNICATION SETTING & TELEMETRY INITIALIZATION END <<<******/

	/******>>> USB-TTL INITIALIZATION BEGIN >>>******/

  	 /*! Start receiving from Laptop(GroundStation) to EmbeddedGroundStation(STM32)*/
	 HAL_UART_Receive_IT(&huart1, UsbTTL2EmbeddedGS, sizeof(UsbTTL2EmbeddedGS));
 8001e5e:	2209      	movs	r2, #9
 8001e60:	490c      	ldr	r1, [pc, #48]	@ (8001e94 <main+0xa8>)
 8001e62:	480d      	ldr	r0, [pc, #52]	@ (8001e98 <main+0xac>)
 8001e64:	f002 ff47 	bl	8004cf6 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /*! Read ambiance temperature for IOT mission */
	  MS5611_Read_ActVal(&MS5611);
 8001e68:	4804      	ldr	r0, [pc, #16]	@ (8001e7c <main+0x90>)
 8001e6a:	f7ff fd11 	bl	8001890 <MS5611_Read_ActVal>

	  /*! Do it by 1Hz*/
	  HAL_Delay(1000);
 8001e6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e72:	f000 fbef 	bl	8002654 <HAL_Delay>
	  MS5611_Read_ActVal(&MS5611);
 8001e76:	bf00      	nop
 8001e78:	e7f6      	b.n	8001e68 <main+0x7c>
 8001e7a:	bf00      	nop
 8001e7c:	200002f0 	.word	0x200002f0
 8001e80:	2000020c 	.word	0x2000020c
 8001e84:	20000398 	.word	0x20000398
 8001e88:	200002a8 	.word	0x200002a8
 8001e8c:	20000374 	.word	0x20000374
 8001e90:	200003d4 	.word	0x200003d4
 8001e94:	200004b8 	.word	0x200004b8
 8001e98:	20000260 	.word	0x20000260

08001e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b094      	sub	sp, #80	@ 0x50
 8001ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea2:	f107 0320 	add.w	r3, r7, #32
 8001ea6:	2230      	movs	r2, #48	@ 0x30
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 fc1b 	bl	80066e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	4b22      	ldr	r3, [pc, #136]	@ (8001f50 <SystemClock_Config+0xb4>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	4a21      	ldr	r2, [pc, #132]	@ (8001f50 <SystemClock_Config+0xb4>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <SystemClock_Config+0xb4>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <SystemClock_Config+0xb8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f54 <SystemClock_Config+0xb8>)
 8001ee6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b19      	ldr	r3, [pc, #100]	@ (8001f54 <SystemClock_Config+0xb8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001efc:	2301      	movs	r3, #1
 8001efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f00:	2310      	movs	r3, #16
 8001f02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f08:	f107 0320 	add.w	r3, r7, #32
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 f9bf 	bl	8004290 <HAL_RCC_OscConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001f18:	f000 f8e2 	bl	80020e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 fc22 	bl	8004780 <HAL_RCC_ClockConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001f42:	f000 f8cd 	bl	80020e0 <Error_Handler>
  }
}
 8001f46:	bf00      	nop
 8001f48:	3750      	adds	r7, #80	@ 0x50
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40007000 	.word	0x40007000

08001f58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <MX_I2C1_Init+0x50>)
 8001f5e:	4a13      	ldr	r2, [pc, #76]	@ (8001fac <MX_I2C1_Init+0x54>)
 8001f60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f62:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <MX_I2C1_Init+0x50>)
 8001f64:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <MX_I2C1_Init+0x58>)
 8001f66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <MX_I2C1_Init+0x50>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <MX_I2C1_Init+0x50>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <MX_I2C1_Init+0x50>)
 8001f76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <MX_I2C1_Init+0x50>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <MX_I2C1_Init+0x50>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f88:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <MX_I2C1_Init+0x50>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <MX_I2C1_Init+0x50>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f94:	4804      	ldr	r0, [pc, #16]	@ (8001fa8 <MX_I2C1_Init+0x50>)
 8001f96:	f000 fec3 	bl	8002d20 <HAL_I2C_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fa0:	f000 f89e 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000020c 	.word	0x2000020c
 8001fac:	40005400 	.word	0x40005400
 8001fb0:	000186a0 	.word	0x000186a0

08001fb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	@ (8002004 <MX_USART1_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fec:	f002 fda8 	bl	8004b40 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f000 f873 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000260 	.word	0x20000260
 8002004:	40011000 	.word	0x40011000

08002008 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <MX_USART2_UART_Init+0x50>)
 8002010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_USART2_UART_Init+0x4c>)
 8002040:	f002 fd7e 	bl	8004b40 <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800204a:	f000 f849 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200002a8 	.word	0x200002a8
 8002058:	40004400 	.word	0x40004400

0800205c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <MX_GPIO_Init+0x7c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	4a17      	ldr	r2, [pc, #92]	@ (80020d8 <MX_GPIO_Init+0x7c>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6313      	str	r3, [r2, #48]	@ 0x30
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <MX_GPIO_Init+0x7c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <MX_GPIO_Init+0x7c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a10      	ldr	r2, [pc, #64]	@ (80020d8 <MX_GPIO_Init+0x7c>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <MX_GPIO_Init+0x7c>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2120      	movs	r1, #32
 80020ae:	480b      	ldr	r0, [pc, #44]	@ (80020dc <MX_GPIO_Init+0x80>)
 80020b0:	f000 fe1c 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020b4:	2320      	movs	r3, #32
 80020b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	4619      	mov	r1, r3
 80020ca:	4804      	ldr	r0, [pc, #16]	@ (80020dc <MX_GPIO_Init+0x80>)
 80020cc:	f000 fc8a 	bl	80029e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020d0:	bf00      	nop
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020400 	.word	0x40020400

080020e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e4:	b672      	cpsid	i
}
 80020e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <Error_Handler+0x8>

080020ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_MspInit+0x4c>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002138 <HAL_MspInit+0x4c>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002100:	6453      	str	r3, [r2, #68]	@ 0x44
 8002102:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <HAL_MspInit+0x4c>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_MspInit+0x4c>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	4a08      	ldr	r2, [pc, #32]	@ (8002138 <HAL_MspInit+0x4c>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	@ 0x40
 800211e:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_MspInit+0x4c>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800

0800213c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	@ 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_I2C_MspInit+0x84>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d12b      	bne.n	80021b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <HAL_I2C_MspInit+0x88>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a17      	ldr	r2, [pc, #92]	@ (80021c4 <HAL_I2C_MspInit+0x88>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <HAL_I2C_MspInit+0x88>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800217a:	23c0      	movs	r3, #192	@ 0xc0
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800217e:	2312      	movs	r3, #18
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800218a:	2304      	movs	r3, #4
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	480c      	ldr	r0, [pc, #48]	@ (80021c8 <HAL_I2C_MspInit+0x8c>)
 8002196:	f000 fc25 	bl	80029e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <HAL_I2C_MspInit+0x88>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	4a08      	ldr	r2, [pc, #32]	@ (80021c4 <HAL_I2C_MspInit+0x88>)
 80021a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_I2C_MspInit+0x88>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	@ 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40005400 	.word	0x40005400
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020400 	.word	0x40020400

080021cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	@ 0x30
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a3a      	ldr	r2, [pc, #232]	@ (80022d4 <HAL_UART_MspInit+0x108>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d135      	bne.n	800225a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	4b39      	ldr	r3, [pc, #228]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	4a38      	ldr	r2, [pc, #224]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 80021f8:	f043 0310 	orr.w	r3, r3, #16
 80021fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021fe:	4b36      	ldr	r3, [pc, #216]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	4b32      	ldr	r3, [pc, #200]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a31      	ldr	r2, [pc, #196]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b2f      	ldr	r3, [pc, #188]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002226:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002238:	2307      	movs	r3, #7
 800223a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4826      	ldr	r0, [pc, #152]	@ (80022dc <HAL_UART_MspInit+0x110>)
 8002244:	f000 fbce 	bl	80029e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2100      	movs	r1, #0
 800224c:	2025      	movs	r0, #37	@ 0x25
 800224e:	f000 fb00 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002252:	2025      	movs	r0, #37	@ 0x25
 8002254:	f000 fb19 	bl	800288a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002258:	e038      	b.n	80022cc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a20      	ldr	r2, [pc, #128]	@ (80022e0 <HAL_UART_MspInit+0x114>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d133      	bne.n	80022cc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	4b1b      	ldr	r3, [pc, #108]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	4a1a      	ldr	r2, [pc, #104]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 800226e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002272:	6413      	str	r3, [r2, #64]	@ 0x40
 8002274:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002288:	4a13      	ldr	r2, [pc, #76]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_UART_MspInit+0x10c>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800229c:	230c      	movs	r3, #12
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ac:	2307      	movs	r3, #7
 80022ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f107 031c 	add.w	r3, r7, #28
 80022b4:	4619      	mov	r1, r3
 80022b6:	4809      	ldr	r0, [pc, #36]	@ (80022dc <HAL_UART_MspInit+0x110>)
 80022b8:	f000 fb94 	bl	80029e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	2026      	movs	r0, #38	@ 0x26
 80022c2:	f000 fac6 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022c6:	2026      	movs	r0, #38	@ 0x26
 80022c8:	f000 fadf 	bl	800288a <HAL_NVIC_EnableIRQ>
}
 80022cc:	bf00      	nop
 80022ce:	3730      	adds	r7, #48	@ 0x30
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40011000 	.word	0x40011000
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40004400 	.word	0x40004400

080022e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <NMI_Handler+0x4>

080022ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <HardFault_Handler+0x4>

080022f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <MemManage_Handler+0x4>

080022fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <BusFault_Handler+0x4>

08002304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <UsageFault_Handler+0x4>

0800230c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800233a:	f000 f96b 	bl	8002614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002348:	4802      	ldr	r0, [pc, #8]	@ (8002354 <USART1_IRQHandler+0x10>)
 800234a:	f002 fcf9 	bl	8004d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000260 	.word	0x20000260

08002358 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <USART2_IRQHandler+0x10>)
 800235e:	f002 fcef 	bl	8004d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200002a8 	.word	0x200002a8

0800236c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return 1;
 8002370:	2301      	movs	r3, #1
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <_kill>:

int _kill(int pid, int sig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002386:	f004 fa01 	bl	800678c <__errno>
 800238a:	4603      	mov	r3, r0
 800238c:	2216      	movs	r2, #22
 800238e:	601a      	str	r2, [r3, #0]
  return -1;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_exit>:

void _exit (int status)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ffe7 	bl	800237c <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ae:	bf00      	nop
 80023b0:	e7fd      	b.n	80023ae <_exit+0x12>

080023b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e00a      	b.n	80023da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c4:	f3af 8000 	nop.w
 80023c8:	4601      	mov	r1, r0
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	60ba      	str	r2, [r7, #8]
 80023d0:	b2ca      	uxtb	r2, r1
 80023d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3301      	adds	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	dbf0      	blt.n	80023c4 <_read+0x12>
  }

  return len;
 80023e2:	687b      	ldr	r3, [r7, #4]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e009      	b.n	8002412 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	60ba      	str	r2, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	dbf1      	blt.n	80023fe <_write+0x12>
  }
  return len;
 800241a:	687b      	ldr	r3, [r7, #4]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_close>:

int _close(int file)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800244c:	605a      	str	r2, [r3, #4]
  return 0;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_isatty>:

int _isatty(int file)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002494:	4a14      	ldr	r2, [pc, #80]	@ (80024e8 <_sbrk+0x5c>)
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <_sbrk+0x60>)
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <_sbrk+0x64>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	@ (80024f4 <_sbrk+0x68>)
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ae:	4b10      	ldr	r3, [pc, #64]	@ (80024f0 <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d207      	bcs.n	80024cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024bc:	f004 f966 	bl	800678c <__errno>
 80024c0:	4603      	mov	r3, r0
 80024c2:	220c      	movs	r2, #12
 80024c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	e009      	b.n	80024e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024cc:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d2:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	4a05      	ldr	r2, [pc, #20]	@ (80024f0 <_sbrk+0x64>)
 80024dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20020000 	.word	0x20020000
 80024ec:	00000400 	.word	0x00000400
 80024f0:	200004c4 	.word	0x200004c4
 80024f4:	20000618 	.word	0x20000618

080024f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024fc:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <SystemInit+0x20>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002502:	4a05      	ldr	r2, [pc, #20]	@ (8002518 <SystemInit+0x20>)
 8002504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800251c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002554 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002520:	f7ff ffea 	bl	80024f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002524:	480c      	ldr	r0, [pc, #48]	@ (8002558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002526:	490d      	ldr	r1, [pc, #52]	@ (800255c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002528:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800252c:	e002      	b.n	8002534 <LoopCopyDataInit>

0800252e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002532:	3304      	adds	r3, #4

08002534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002538:	d3f9      	bcc.n	800252e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800253c:	4c0a      	ldr	r4, [pc, #40]	@ (8002568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002540:	e001      	b.n	8002546 <LoopFillZerobss>

08002542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002544:	3204      	adds	r2, #4

08002546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002548:	d3fb      	bcc.n	8002542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800254a:	f004 f925 	bl	8006798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254e:	f7ff fc4d 	bl	8001dec <main>
  bx  lr    
 8002552:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002554:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800255c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002560:	08009b38 	.word	0x08009b38
  ldr r2, =_sbss
 8002564:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002568:	20000618 	.word	0x20000618

0800256c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800256c:	e7fe      	b.n	800256c <ADC_IRQHandler>
	...

08002570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002574:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <HAL_Init+0x40>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0d      	ldr	r2, [pc, #52]	@ (80025b0 <HAL_Init+0x40>)
 800257a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800257e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002580:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_Init+0x40>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	@ (80025b0 <HAL_Init+0x40>)
 8002586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800258a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800258c:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <HAL_Init+0x40>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a07      	ldr	r2, [pc, #28]	@ (80025b0 <HAL_Init+0x40>)
 8002592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002598:	2003      	movs	r0, #3
 800259a:	f000 f94f 	bl	800283c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259e:	200f      	movs	r0, #15
 80025a0:	f000 f808 	bl	80025b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a4:	f7ff fda2 	bl	80020ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023c00 	.word	0x40023c00

080025b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025bc:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <HAL_InitTick+0x54>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b12      	ldr	r3, [pc, #72]	@ (800260c <HAL_InitTick+0x58>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f967 	bl	80028a6 <HAL_SYSTICK_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00e      	b.n	8002600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	d80a      	bhi.n	80025fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e8:	2200      	movs	r2, #0
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	f000 f92f 	bl	8002852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f4:	4a06      	ldr	r2, [pc, #24]	@ (8002610 <HAL_InitTick+0x5c>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000004 	.word	0x20000004
 800260c:	2000000c 	.word	0x2000000c
 8002610:	20000008 	.word	0x20000008

08002614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_IncTick+0x20>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_IncTick+0x24>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4413      	add	r3, r2
 8002624:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <HAL_IncTick+0x24>)
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	2000000c 	.word	0x2000000c
 8002638:	200004c8 	.word	0x200004c8

0800263c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return uwTick;
 8002640:	4b03      	ldr	r3, [pc, #12]	@ (8002650 <HAL_GetTick+0x14>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	200004c8 	.word	0x200004c8

08002654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff ffee 	bl	800263c <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d005      	beq.n	800267a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_Delay+0x44>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800267a:	bf00      	nop
 800267c:	f7ff ffde 	bl	800263c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d8f7      	bhi.n	800267c <HAL_Delay+0x28>
  {
  }
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000000c 	.word	0x2000000c

0800269c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ac:	4b0c      	ldr	r3, [pc, #48]	@ (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ce:	4a04      	ldr	r2, [pc, #16]	@ (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <__NVIC_GetPriorityGrouping+0x18>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 0307 	and.w	r3, r3, #7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	2b00      	cmp	r3, #0
 8002710:	db0b      	blt.n	800272a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	4907      	ldr	r1, [pc, #28]	@ (8002738 <__NVIC_EnableIRQ+0x38>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2001      	movs	r0, #1
 8002722:	fa00 f202 	lsl.w	r2, r0, r2
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100

0800273c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	2b00      	cmp	r3, #0
 800274e:	db0a      	blt.n	8002766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	490c      	ldr	r1, [pc, #48]	@ (8002788 <__NVIC_SetPriority+0x4c>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	440b      	add	r3, r1
 8002760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002764:	e00a      	b.n	800277c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4908      	ldr	r1, [pc, #32]	@ (800278c <__NVIC_SetPriority+0x50>)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3b04      	subs	r3, #4
 8002774:	0112      	lsls	r2, r2, #4
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	440b      	add	r3, r1
 800277a:	761a      	strb	r2, [r3, #24]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000e100 	.word	0xe000e100
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	@ 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f1c3 0307 	rsb	r3, r3, #7
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf28      	it	cs
 80027ae:	2304      	movcs	r3, #4
 80027b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d902      	bls.n	80027c0 <NVIC_EncodePriority+0x30>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b03      	subs	r3, #3
 80027be:	e000      	b.n	80027c2 <NVIC_EncodePriority+0x32>
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	401a      	ands	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	4313      	orrs	r3, r2
         );
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	@ 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002808:	d301      	bcc.n	800280e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280a:	2301      	movs	r3, #1
 800280c:	e00f      	b.n	800282e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280e:	4a0a      	ldr	r2, [pc, #40]	@ (8002838 <SysTick_Config+0x40>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002816:	210f      	movs	r1, #15
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f7ff ff8e 	bl	800273c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <SysTick_Config+0x40>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002826:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <SysTick_Config+0x40>)
 8002828:	2207      	movs	r2, #7
 800282a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff29 	bl	800269c <__NVIC_SetPriorityGrouping>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002864:	f7ff ff3e 	bl	80026e4 <__NVIC_GetPriorityGrouping>
 8002868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f7ff ff8e 	bl	8002790 <NVIC_EncodePriority>
 8002874:	4602      	mov	r2, r0
 8002876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff5d 	bl	800273c <__NVIC_SetPriority>
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff31 	bl	8002700 <__NVIC_EnableIRQ>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffa2 	bl	80027f8 <SysTick_Config>
 80028b4:	4603      	mov	r3, r0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff feb6 	bl	800263c <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d008      	beq.n	80028f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2280      	movs	r2, #128	@ 0x80
 80028e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e052      	b.n	8002996 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0216 	bic.w	r2, r2, #22
 80028fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800290e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d103      	bne.n	8002920 <HAL_DMA_Abort+0x62>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0208 	bic.w	r2, r2, #8
 800292e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002940:	e013      	b.n	800296a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002942:	f7ff fe7b 	bl	800263c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b05      	cmp	r3, #5
 800294e:	d90c      	bls.n	800296a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2203      	movs	r2, #3
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e015      	b.n	8002996 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e4      	bne.n	8002942 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297c:	223f      	movs	r2, #63	@ 0x3f
 800297e:	409a      	lsls	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d004      	beq.n	80029bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2280      	movs	r2, #128	@ 0x80
 80029b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e00c      	b.n	80029d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2205      	movs	r2, #5
 80029c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	@ 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e159      	b.n	8002cb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a00:	2201      	movs	r2, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	f040 8148 	bne.w	8002cae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d005      	beq.n	8002a36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d130      	bne.n	8002a98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 0201 	and.w	r2, r3, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d017      	beq.n	8002ad4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d123      	bne.n	8002b28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	08da      	lsrs	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3208      	adds	r2, #8
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	08da      	lsrs	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3208      	adds	r2, #8
 8002b22:	69b9      	ldr	r1, [r7, #24]
 8002b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80a2 	beq.w	8002cae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b57      	ldr	r3, [pc, #348]	@ (8002ccc <HAL_GPIO_Init+0x2e8>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	4a56      	ldr	r2, [pc, #344]	@ (8002ccc <HAL_GPIO_Init+0x2e8>)
 8002b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b7a:	4b54      	ldr	r3, [pc, #336]	@ (8002ccc <HAL_GPIO_Init+0x2e8>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b86:	4a52      	ldr	r2, [pc, #328]	@ (8002cd0 <HAL_GPIO_Init+0x2ec>)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a49      	ldr	r2, [pc, #292]	@ (8002cd4 <HAL_GPIO_Init+0x2f0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d019      	beq.n	8002be6 <HAL_GPIO_Init+0x202>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a48      	ldr	r2, [pc, #288]	@ (8002cd8 <HAL_GPIO_Init+0x2f4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_GPIO_Init+0x1fe>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a47      	ldr	r2, [pc, #284]	@ (8002cdc <HAL_GPIO_Init+0x2f8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00d      	beq.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a46      	ldr	r2, [pc, #280]	@ (8002ce0 <HAL_GPIO_Init+0x2fc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <HAL_GPIO_Init+0x1f6>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a45      	ldr	r2, [pc, #276]	@ (8002ce4 <HAL_GPIO_Init+0x300>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_GPIO_Init+0x1f2>
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	e008      	b.n	8002be8 <HAL_GPIO_Init+0x204>
 8002bd6:	2307      	movs	r3, #7
 8002bd8:	e006      	b.n	8002be8 <HAL_GPIO_Init+0x204>
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e004      	b.n	8002be8 <HAL_GPIO_Init+0x204>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e002      	b.n	8002be8 <HAL_GPIO_Init+0x204>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_GPIO_Init+0x204>
 8002be6:	2300      	movs	r3, #0
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	f002 0203 	and.w	r2, r2, #3
 8002bee:	0092      	lsls	r2, r2, #2
 8002bf0:	4093      	lsls	r3, r2
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bf8:	4935      	ldr	r1, [pc, #212]	@ (8002cd0 <HAL_GPIO_Init+0x2ec>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	3302      	adds	r3, #2
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c06:	4b38      	ldr	r3, [pc, #224]	@ (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c54:	4a24      	ldr	r2, [pc, #144]	@ (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c5a:	4b23      	ldr	r3, [pc, #140]	@ (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c84:	4b18      	ldr	r3, [pc, #96]	@ (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce8 <HAL_GPIO_Init+0x304>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b0f      	cmp	r3, #15
 8002cb8:	f67f aea2 	bls.w	8002a00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	3724      	adds	r7, #36	@ 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40013800 	.word	0x40013800
 8002cd4:	40020000 	.word	0x40020000
 8002cd8:	40020400 	.word	0x40020400
 8002cdc:	40020800 	.word	0x40020800
 8002ce0:	40020c00 	.word	0x40020c00
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40013c00 	.word	0x40013c00

08002cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cfc:	787b      	ldrb	r3, [r7, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d08:	e003      	b.n	8002d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	041a      	lsls	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	619a      	str	r2, [r3, #24]
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e12b      	b.n	8002f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff f9f8 	bl	800213c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	@ 0x24
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d84:	f001 feb4 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8002d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a81      	ldr	r2, [pc, #516]	@ (8002f94 <HAL_I2C_Init+0x274>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d807      	bhi.n	8002da4 <HAL_I2C_Init+0x84>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a80      	ldr	r2, [pc, #512]	@ (8002f98 <HAL_I2C_Init+0x278>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bf94      	ite	ls
 8002d9c:	2301      	movls	r3, #1
 8002d9e:	2300      	movhi	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e006      	b.n	8002db2 <HAL_I2C_Init+0x92>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a7d      	ldr	r2, [pc, #500]	@ (8002f9c <HAL_I2C_Init+0x27c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bf94      	ite	ls
 8002dac:	2301      	movls	r3, #1
 8002dae:	2300      	movhi	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0e7      	b.n	8002f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a78      	ldr	r2, [pc, #480]	@ (8002fa0 <HAL_I2C_Init+0x280>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0c9b      	lsrs	r3, r3, #18
 8002dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f94 <HAL_I2C_Init+0x274>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d802      	bhi.n	8002df4 <HAL_I2C_Init+0xd4>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	3301      	adds	r3, #1
 8002df2:	e009      	b.n	8002e08 <HAL_I2C_Init+0xe8>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	4a69      	ldr	r2, [pc, #420]	@ (8002fa4 <HAL_I2C_Init+0x284>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	3301      	adds	r3, #1
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	495c      	ldr	r1, [pc, #368]	@ (8002f94 <HAL_I2C_Init+0x274>)
 8002e24:	428b      	cmp	r3, r1
 8002e26:	d819      	bhi.n	8002e5c <HAL_I2C_Init+0x13c>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e36:	1c59      	adds	r1, r3, #1
 8002e38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_I2C_Init+0x138>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1e59      	subs	r1, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e56:	e051      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002e58:	2304      	movs	r3, #4
 8002e5a:	e04f      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <HAL_I2C_Init+0x168>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1e58      	subs	r0, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	440b      	add	r3, r1
 8002e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e012      	b.n	8002eae <HAL_I2C_Init+0x18e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	0099      	lsls	r1, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Init+0x196>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e022      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10e      	bne.n	8002edc <HAL_I2C_Init+0x1bc>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1e58      	subs	r0, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	440b      	add	r3, r1
 8002ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eda:	e00f      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	0099      	lsls	r1, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	6809      	ldr	r1, [r1, #0]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6911      	ldr	r1, [r2, #16]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68d2      	ldr	r2, [r2, #12]
 8002f36:	4311      	orrs	r1, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	000186a0 	.word	0x000186a0
 8002f98:	001e847f 	.word	0x001e847f
 8002f9c:	003d08ff 	.word	0x003d08ff
 8002fa0:	431bde83 	.word	0x431bde83
 8002fa4:	10624dd3 	.word	0x10624dd3

08002fa8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	817b      	strh	r3, [r7, #10]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff fb3e 	bl	800263c <HAL_GetTick>
 8002fc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	f040 80e0 	bne.w	8003190 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2319      	movs	r3, #25
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4970      	ldr	r1, [pc, #448]	@ (800319c <HAL_I2C_Master_Transmit+0x1f4>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 ff22 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e0d3      	b.n	8003192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_I2C_Master_Transmit+0x50>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0cc      	b.n	8003192 <HAL_I2C_Master_Transmit+0x1ea>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d007      	beq.n	800301e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0201 	orr.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800302c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2221      	movs	r2, #33	@ 0x21
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2210      	movs	r2, #16
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	893a      	ldrh	r2, [r7, #8]
 800304e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a50      	ldr	r2, [pc, #320]	@ (80031a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800305e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003060:	8979      	ldrh	r1, [r7, #10]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	6a3a      	ldr	r2, [r7, #32]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fcf6 	bl	8003a58 <I2C_MasterRequestWrite>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e08d      	b.n	8003192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800308c:	e066      	b.n	800315c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	6a39      	ldr	r1, [r7, #32]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 ffe0 	bl	8004058 <I2C_WaitOnTXEFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00d      	beq.n	80030ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d107      	bne.n	80030b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e06b      	b.n	8003192 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d11b      	bne.n	8003130 <HAL_I2C_Master_Transmit+0x188>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	6a39      	ldr	r1, [r7, #32]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 ffd7 	bl	80040e8 <I2C_WaitOnBTFFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	2b04      	cmp	r3, #4
 8003146:	d107      	bne.n	8003158 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003156:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e01a      	b.n	8003192 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003160:	2b00      	cmp	r3, #0
 8003162:	d194      	bne.n	800308e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	00100002 	.word	0x00100002
 80031a0:	ffff0000 	.word	0xffff0000

080031a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	@ 0x30
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	461a      	mov	r2, r3
 80031b0:	460b      	mov	r3, r1
 80031b2:	817b      	strh	r3, [r7, #10]
 80031b4:	4613      	mov	r3, r2
 80031b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7ff fa40 	bl	800263c <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	f040 8217 	bne.w	80035fa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2319      	movs	r3, #25
 80031d2:	2201      	movs	r2, #1
 80031d4:	497c      	ldr	r1, [pc, #496]	@ (80033c8 <HAL_I2C_Master_Receive+0x224>)
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fe24 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	e20a      	b.n	80035fc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_I2C_Master_Receive+0x50>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e203      	b.n	80035fc <HAL_I2C_Master_Receive+0x458>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d007      	beq.n	800321a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0201 	orr.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003228:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2222      	movs	r2, #34	@ 0x22
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2210      	movs	r2, #16
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	893a      	ldrh	r2, [r7, #8]
 800324a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a5c      	ldr	r2, [pc, #368]	@ (80033cc <HAL_I2C_Master_Receive+0x228>)
 800325a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800325c:	8979      	ldrh	r1, [r7, #10]
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fc7a 	bl	8003b5c <I2C_MasterRequestRead>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e1c4      	b.n	80035fc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	d113      	bne.n	80032a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327a:	2300      	movs	r3, #0
 800327c:	623b      	str	r3, [r7, #32]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	623b      	str	r3, [r7, #32]
 800328e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e198      	b.n	80035d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d11b      	bne.n	80032e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	61fb      	str	r3, [r7, #28]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e178      	b.n	80035d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d11b      	bne.n	8003322 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	e158      	b.n	80035d4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003330:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003348:	e144      	b.n	80035d4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334e:	2b03      	cmp	r3, #3
 8003350:	f200 80f1 	bhi.w	8003536 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003358:	2b01      	cmp	r3, #1
 800335a:	d123      	bne.n	80033a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800335e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 ff09 	bl	8004178 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e145      	b.n	80035fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033a2:	e117      	b.n	80035d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d14e      	bne.n	800344a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b2:	2200      	movs	r2, #0
 80033b4:	4906      	ldr	r1, [pc, #24]	@ (80033d0 <HAL_I2C_Master_Receive+0x22c>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fd34 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e11a      	b.n	80035fc <HAL_I2C_Master_Receive+0x458>
 80033c6:	bf00      	nop
 80033c8:	00100002 	.word	0x00100002
 80033cc:	ffff0000 	.word	0xffff0000
 80033d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003448:	e0c4      	b.n	80035d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	2200      	movs	r2, #0
 8003452:	496c      	ldr	r1, [pc, #432]	@ (8003604 <HAL_I2C_Master_Receive+0x460>)
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fce5 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0cb      	b.n	80035fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ac:	2200      	movs	r2, #0
 80034ae:	4955      	ldr	r1, [pc, #340]	@ (8003604 <HAL_I2C_Master_Receive+0x460>)
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fcb7 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e09d      	b.n	80035fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003534:	e04e      	b.n	80035d4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003538:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fe1c 	bl	8004178 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e058      	b.n	80035fc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b04      	cmp	r3, #4
 8003588:	d124      	bne.n	80035d4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358e:	2b03      	cmp	r3, #3
 8003590:	d107      	bne.n	80035a2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f47f aeb6 	bne.w	800334a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3728      	adds	r7, #40	@ 0x28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	00010004 	.word	0x00010004

08003608 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	461a      	mov	r2, r3
 8003616:	4603      	mov	r3, r0
 8003618:	817b      	strh	r3, [r7, #10]
 800361a:	460b      	mov	r3, r1
 800361c:	813b      	strh	r3, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003622:	f7ff f80b 	bl	800263c <HAL_GetTick>
 8003626:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b20      	cmp	r3, #32
 8003632:	f040 80d9 	bne.w	80037e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	2319      	movs	r3, #25
 800363c:	2201      	movs	r2, #1
 800363e:	496d      	ldr	r1, [pc, #436]	@ (80037f4 <HAL_I2C_Mem_Write+0x1ec>)
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fbef 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
 800364e:	e0cc      	b.n	80037ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_I2C_Mem_Write+0x56>
 800365a:	2302      	movs	r3, #2
 800365c:	e0c5      	b.n	80037ea <HAL_I2C_Mem_Write+0x1e2>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d007      	beq.n	8003684 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2221      	movs	r2, #33	@ 0x21
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2240      	movs	r2, #64	@ 0x40
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a3a      	ldr	r2, [r7, #32]
 80036ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a4d      	ldr	r2, [pc, #308]	@ (80037f8 <HAL_I2C_Mem_Write+0x1f0>)
 80036c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036c6:	88f8      	ldrh	r0, [r7, #6]
 80036c8:	893a      	ldrh	r2, [r7, #8]
 80036ca:	8979      	ldrh	r1, [r7, #10]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	4603      	mov	r3, r0
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fb0e 	bl	8003cf8 <I2C_RequestMemoryWrite>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d052      	beq.n	8003788 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e081      	b.n	80037ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fcb4 	bl	8004058 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d107      	bne.n	800370e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e06b      	b.n	80037ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b04      	cmp	r3, #4
 800374e:	d11b      	bne.n	8003788 <HAL_I2C_Mem_Write+0x180>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003754:	2b00      	cmp	r3, #0
 8003756:	d017      	beq.n	8003788 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1aa      	bne.n	80036e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fca7 	bl	80040e8 <I2C_WaitOnBTFFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00d      	beq.n	80037bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d107      	bne.n	80037b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e016      	b.n	80037ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	00100002 	.word	0x00100002
 80037f8:	ffff0000 	.word	0xffff0000

080037fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	@ 0x28
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	460b      	mov	r3, r1
 800380a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800380c:	f7fe ff16 	bl	800263c <HAL_GetTick>
 8003810:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b20      	cmp	r3, #32
 8003820:	f040 8111 	bne.w	8003a46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2319      	movs	r3, #25
 800382a:	2201      	movs	r2, #1
 800382c:	4988      	ldr	r1, [pc, #544]	@ (8003a50 <HAL_I2C_IsDeviceReady+0x254>)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 faf8 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
 800383c:	e104      	b.n	8003a48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_I2C_IsDeviceReady+0x50>
 8003848:	2302      	movs	r3, #2
 800384a:	e0fd      	b.n	8003a48 <HAL_I2C_IsDeviceReady+0x24c>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d007      	beq.n	8003872 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003880:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2224      	movs	r2, #36	@ 0x24
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4a70      	ldr	r2, [pc, #448]	@ (8003a54 <HAL_I2C_IsDeviceReady+0x258>)
 8003894:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fab6 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038cc:	d103      	bne.n	80038d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038d4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e0b6      	b.n	8003a48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038da:	897b      	ldrh	r3, [r7, #10]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80038ea:	f7fe fea7 	bl	800263c <HAL_GetTick>
 80038ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	bf0c      	ite	eq
 80038fe:	2301      	moveq	r3, #1
 8003900:	2300      	movne	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800391e:	e025      	b.n	800396c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003920:	f7fe fe8c 	bl	800263c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d302      	bcc.n	8003936 <HAL_I2C_IsDeviceReady+0x13a>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	22a0      	movs	r2, #160	@ 0xa0
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b02      	cmp	r3, #2
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2ba0      	cmp	r3, #160	@ 0xa0
 8003976:	d005      	beq.n	8003984 <HAL_I2C_IsDeviceReady+0x188>
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <HAL_I2C_IsDeviceReady+0x188>
 800397e:	7dbb      	ldrb	r3, [r7, #22]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0cd      	beq.n	8003920 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d129      	bne.n	80039ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2319      	movs	r3, #25
 80039c6:	2201      	movs	r2, #1
 80039c8:	4921      	ldr	r1, [pc, #132]	@ (8003a50 <HAL_I2C_IsDeviceReady+0x254>)
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fa2a 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e036      	b.n	8003a48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e02c      	b.n	8003a48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2319      	movs	r3, #25
 8003a0e:	2201      	movs	r2, #1
 8003a10:	490f      	ldr	r1, [pc, #60]	@ (8003a50 <HAL_I2C_IsDeviceReady+0x254>)
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fa06 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e012      	b.n	8003a48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	3301      	adds	r3, #1
 8003a26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	f4ff af32 	bcc.w	8003896 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	00100002 	.word	0x00100002
 8003a54:	ffff0000 	.word	0xffff0000

08003a58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	460b      	mov	r3, r1
 8003a66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d006      	beq.n	8003a82 <I2C_MasterRequestWrite+0x2a>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d003      	beq.n	8003a82 <I2C_MasterRequestWrite+0x2a>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a80:	d108      	bne.n	8003a94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e00b      	b.n	8003aac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	2b12      	cmp	r3, #18
 8003a9a:	d107      	bne.n	8003aac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f9b3 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad2:	d103      	bne.n	8003adc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ada:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e035      	b.n	8003b4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ae8:	d108      	bne.n	8003afc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aea:	897b      	ldrh	r3, [r7, #10]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003af8:	611a      	str	r2, [r3, #16]
 8003afa:	e01b      	b.n	8003b34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003afc:	897b      	ldrh	r3, [r7, #10]
 8003afe:	11db      	asrs	r3, r3, #7
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 0306 	and.w	r3, r3, #6
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f063 030f 	orn	r3, r3, #15
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	490e      	ldr	r1, [pc, #56]	@ (8003b54 <I2C_MasterRequestWrite+0xfc>)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f9fc 	bl	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e010      	b.n	8003b4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4907      	ldr	r1, [pc, #28]	@ (8003b58 <I2C_MasterRequestWrite+0x100>)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f9ec 	bl	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	00010008 	.word	0x00010008
 8003b58:	00010002 	.word	0x00010002

08003b5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d006      	beq.n	8003b96 <I2C_MasterRequestRead+0x3a>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d003      	beq.n	8003b96 <I2C_MasterRequestRead+0x3a>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b94:	d108      	bne.n	8003ba8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e00b      	b.n	8003bc0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bac:	2b11      	cmp	r3, #17
 8003bae:	d107      	bne.n	8003bc0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f929 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003be6:	d103      	bne.n	8003bf0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e079      	b.n	8003ce8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bfc:	d108      	bne.n	8003c10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bfe:	897b      	ldrh	r3, [r7, #10]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	611a      	str	r2, [r3, #16]
 8003c0e:	e05f      	b.n	8003cd0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c10:	897b      	ldrh	r3, [r7, #10]
 8003c12:	11db      	asrs	r3, r3, #7
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f003 0306 	and.w	r3, r3, #6
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f063 030f 	orn	r3, r3, #15
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4930      	ldr	r1, [pc, #192]	@ (8003cf0 <I2C_MasterRequestRead+0x194>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f972 	bl	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e054      	b.n	8003ce8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c3e:	897b      	ldrh	r3, [r7, #10]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4929      	ldr	r1, [pc, #164]	@ (8003cf4 <I2C_MasterRequestRead+0x198>)
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f962 	bl	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e044      	b.n	8003ce8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f8c7 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003caa:	d103      	bne.n	8003cb4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cb2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e017      	b.n	8003ce8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003cb8:	897b      	ldrh	r3, [r7, #10]
 8003cba:	11db      	asrs	r3, r3, #7
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f063 030e 	orn	r3, r3, #14
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4907      	ldr	r1, [pc, #28]	@ (8003cf4 <I2C_MasterRequestRead+0x198>)
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f91e 	bl	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	00010008 	.word	0x00010008
 8003cf4:	00010002 	.word	0x00010002

08003cf8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	4608      	mov	r0, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	461a      	mov	r2, r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	817b      	strh	r3, [r7, #10]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	813b      	strh	r3, [r7, #8]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f878 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d48:	d103      	bne.n	8003d52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e05f      	b.n	8003e16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	6a3a      	ldr	r2, [r7, #32]
 8003d6a:	492d      	ldr	r1, [pc, #180]	@ (8003e20 <I2C_RequestMemoryWrite+0x128>)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f8d3 	bl	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e04c      	b.n	8003e16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d94:	6a39      	ldr	r1, [r7, #32]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f95e 	bl	8004058 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d107      	bne.n	8003dba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e02b      	b.n	8003e16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc4:	893b      	ldrh	r3, [r7, #8]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]
 8003dce:	e021      	b.n	8003e14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dd0:	893b      	ldrh	r3, [r7, #8]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de0:	6a39      	ldr	r1, [r7, #32]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f938 	bl	8004058 <I2C_WaitOnTXEFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00d      	beq.n	8003e0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d107      	bne.n	8003e06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e005      	b.n	8003e16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e0a:	893b      	ldrh	r3, [r7, #8]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	00010002 	.word	0x00010002

08003e24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	4613      	mov	r3, r2
 8003e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e34:	e048      	b.n	8003ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d044      	beq.n	8003ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3e:	f7fe fbfd 	bl	800263c <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d302      	bcc.n	8003e54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d139      	bne.n	8003ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	0c1b      	lsrs	r3, r3, #16
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d10d      	bne.n	8003e7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	43da      	mvns	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	e00c      	b.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	43da      	mvns	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4013      	ands	r3, r2
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d116      	bne.n	8003ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e023      	b.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	0c1b      	lsrs	r3, r3, #16
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d10d      	bne.n	8003eee <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	43da      	mvns	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	4013      	ands	r3, r2
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	e00c      	b.n	8003f08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	43da      	mvns	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d093      	beq.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f26:	e071      	b.n	800400c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f36:	d123      	bne.n	8003f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	f043 0204 	orr.w	r2, r3, #4
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e067      	b.n	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f86:	d041      	beq.n	800400c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f88:	f7fe fb58 	bl	800263c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d302      	bcc.n	8003f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d136      	bne.n	800400c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d10c      	bne.n	8003fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bf14      	ite	ne
 8003fba:	2301      	movne	r3, #1
 8003fbc:	2300      	moveq	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	e00b      	b.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	43da      	mvns	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	f043 0220 	orr.w	r2, r3, #32
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e021      	b.n	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	0c1b      	lsrs	r3, r3, #16
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	d10c      	bne.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	43da      	mvns	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e00b      	b.n	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	43da      	mvns	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	f47f af6d 	bne.w	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004064:	e034      	b.n	80040d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f8e3 	bl	8004232 <I2C_IsAcknowledgeFailed>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e034      	b.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d028      	beq.n	80040d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407e:	f7fe fadd 	bl	800263c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d11d      	bne.n	80040d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409e:	2b80      	cmp	r3, #128	@ 0x80
 80040a0:	d016      	beq.n	80040d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	f043 0220 	orr.w	r2, r3, #32
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e007      	b.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040da:	2b80      	cmp	r3, #128	@ 0x80
 80040dc:	d1c3      	bne.n	8004066 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040f4:	e034      	b.n	8004160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f89b 	bl	8004232 <I2C_IsAcknowledgeFailed>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e034      	b.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d028      	beq.n	8004160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7fe fa95 	bl	800263c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d11d      	bne.n	8004160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b04      	cmp	r3, #4
 8004130:	d016      	beq.n	8004160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e007      	b.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d1c3      	bne.n	80040f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004184:	e049      	b.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b10      	cmp	r3, #16
 8004192:	d119      	bne.n	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0210 	mvn.w	r2, #16
 800419c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e030      	b.n	800422a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c8:	f7fe fa38 	bl	800263c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11d      	bne.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e8:	2b40      	cmp	r3, #64	@ 0x40
 80041ea:	d016      	beq.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e007      	b.n	800422a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004224:	2b40      	cmp	r3, #64	@ 0x40
 8004226:	d1ae      	bne.n	8004186 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004248:	d11b      	bne.n	8004282 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004252:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	f043 0204 	orr.w	r2, r3, #4
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e267      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d075      	beq.n	800439a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042ae:	4b88      	ldr	r3, [pc, #544]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d00c      	beq.n	80042d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ba:	4b85      	ldr	r3, [pc, #532]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d112      	bne.n	80042ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c6:	4b82      	ldr	r3, [pc, #520]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042d2:	d10b      	bne.n	80042ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	4b7e      	ldr	r3, [pc, #504]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d05b      	beq.n	8004398 <HAL_RCC_OscConfig+0x108>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d157      	bne.n	8004398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e242      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f4:	d106      	bne.n	8004304 <HAL_RCC_OscConfig+0x74>
 80042f6:	4b76      	ldr	r3, [pc, #472]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a75      	ldr	r2, [pc, #468]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	e01d      	b.n	8004340 <HAL_RCC_OscConfig+0xb0>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800430c:	d10c      	bne.n	8004328 <HAL_RCC_OscConfig+0x98>
 800430e:	4b70      	ldr	r3, [pc, #448]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a6f      	ldr	r2, [pc, #444]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	4b6d      	ldr	r3, [pc, #436]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a6c      	ldr	r2, [pc, #432]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e00b      	b.n	8004340 <HAL_RCC_OscConfig+0xb0>
 8004328:	4b69      	ldr	r3, [pc, #420]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a68      	ldr	r2, [pc, #416]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800432e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b66      	ldr	r3, [pc, #408]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a65      	ldr	r2, [pc, #404]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800433a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800433e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d013      	beq.n	8004370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fe f978 	bl	800263c <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004350:	f7fe f974 	bl	800263c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	@ 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e207      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	4b5b      	ldr	r3, [pc, #364]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0xc0>
 800436e:	e014      	b.n	800439a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fe f964 	bl	800263c <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004378:	f7fe f960 	bl	800263c <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	@ 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e1f3      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438a:	4b51      	ldr	r3, [pc, #324]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0xe8>
 8004396:	e000      	b.n	800439a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d063      	beq.n	800446e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043a6:	4b4a      	ldr	r3, [pc, #296]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b2:	4b47      	ldr	r3, [pc, #284]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d11c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043be:	4b44      	ldr	r3, [pc, #272]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d116      	bne.n	80043f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	4b41      	ldr	r3, [pc, #260]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_RCC_OscConfig+0x152>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e1c7      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e2:	4b3b      	ldr	r3, [pc, #236]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4937      	ldr	r1, [pc, #220]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	e03a      	b.n	800446e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004400:	4b34      	ldr	r3, [pc, #208]	@ (80044d4 <HAL_RCC_OscConfig+0x244>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fe f919 	bl	800263c <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440e:	f7fe f915 	bl	800263c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e1a8      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	4b2b      	ldr	r3, [pc, #172]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b28      	ldr	r3, [pc, #160]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4925      	ldr	r1, [pc, #148]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]
 8004440:	e015      	b.n	800446e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004442:	4b24      	ldr	r3, [pc, #144]	@ (80044d4 <HAL_RCC_OscConfig+0x244>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fe f8f8 	bl	800263c <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004450:	f7fe f8f4 	bl	800263c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e187      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d036      	beq.n	80044e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d016      	beq.n	80044b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004482:	4b15      	ldr	r3, [pc, #84]	@ (80044d8 <HAL_RCC_OscConfig+0x248>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fe f8d8 	bl	800263c <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004490:	f7fe f8d4 	bl	800263c <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e167      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80044a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x200>
 80044ae:	e01b      	b.n	80044e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b0:	4b09      	ldr	r3, [pc, #36]	@ (80044d8 <HAL_RCC_OscConfig+0x248>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b6:	f7fe f8c1 	bl	800263c <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044bc:	e00e      	b.n	80044dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044be:	f7fe f8bd 	bl	800263c <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d907      	bls.n	80044dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e150      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
 80044d0:	40023800 	.word	0x40023800
 80044d4:	42470000 	.word	0x42470000
 80044d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044dc:	4b88      	ldr	r3, [pc, #544]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80044de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1ea      	bne.n	80044be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8097 	beq.w	8004624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f6:	2300      	movs	r3, #0
 80044f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fa:	4b81      	ldr	r3, [pc, #516]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10f      	bne.n	8004526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	4b7d      	ldr	r3, [pc, #500]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	4a7c      	ldr	r2, [pc, #496]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004514:	6413      	str	r3, [r2, #64]	@ 0x40
 8004516:	4b7a      	ldr	r3, [pc, #488]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b77      	ldr	r3, [pc, #476]	@ (8004704 <HAL_RCC_OscConfig+0x474>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d118      	bne.n	8004564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004532:	4b74      	ldr	r3, [pc, #464]	@ (8004704 <HAL_RCC_OscConfig+0x474>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a73      	ldr	r2, [pc, #460]	@ (8004704 <HAL_RCC_OscConfig+0x474>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453e:	f7fe f87d 	bl	800263c <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fe f879 	bl	800263c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e10c      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	4b6a      	ldr	r3, [pc, #424]	@ (8004704 <HAL_RCC_OscConfig+0x474>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x2ea>
 800456c:	4b64      	ldr	r3, [pc, #400]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004570:	4a63      	ldr	r2, [pc, #396]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6713      	str	r3, [r2, #112]	@ 0x70
 8004578:	e01c      	b.n	80045b4 <HAL_RCC_OscConfig+0x324>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b05      	cmp	r3, #5
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x30c>
 8004582:	4b5f      	ldr	r3, [pc, #380]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004586:	4a5e      	ldr	r2, [pc, #376]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	6713      	str	r3, [r2, #112]	@ 0x70
 800458e:	4b5c      	ldr	r3, [pc, #368]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004592:	4a5b      	ldr	r2, [pc, #364]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6713      	str	r3, [r2, #112]	@ 0x70
 800459a:	e00b      	b.n	80045b4 <HAL_RCC_OscConfig+0x324>
 800459c:	4b58      	ldr	r3, [pc, #352]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	4a57      	ldr	r2, [pc, #348]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a8:	4b55      	ldr	r3, [pc, #340]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ac:	4a54      	ldr	r2, [pc, #336]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80045ae:	f023 0304 	bic.w	r3, r3, #4
 80045b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d015      	beq.n	80045e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fe f83e 	bl	800263c <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	e00a      	b.n	80045da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c4:	f7fe f83a 	bl	800263c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e0cb      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045da:	4b49      	ldr	r3, [pc, #292]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ee      	beq.n	80045c4 <HAL_RCC_OscConfig+0x334>
 80045e6:	e014      	b.n	8004612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e8:	f7fe f828 	bl	800263c <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fe f824 	bl	800263c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0b5      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004606:	4b3e      	ldr	r3, [pc, #248]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ee      	bne.n	80045f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d105      	bne.n	8004624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004618:	4b39      	ldr	r3, [pc, #228]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	4a38      	ldr	r2, [pc, #224]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 800461e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004622:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80a1 	beq.w	8004770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800462e:	4b34      	ldr	r3, [pc, #208]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b08      	cmp	r3, #8
 8004638:	d05c      	beq.n	80046f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d141      	bne.n	80046c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	4b31      	ldr	r3, [pc, #196]	@ (8004708 <HAL_RCC_OscConfig+0x478>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fd fff8 	bl	800263c <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fd fff4 	bl	800263c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e087      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	4b27      	ldr	r3, [pc, #156]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	019b      	lsls	r3, r3, #6
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	085b      	lsrs	r3, r3, #1
 8004686:	3b01      	subs	r3, #1
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	491b      	ldr	r1, [pc, #108]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004698:	4b1b      	ldr	r3, [pc, #108]	@ (8004708 <HAL_RCC_OscConfig+0x478>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fd ffcd 	bl	800263c <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a6:	f7fd ffc9 	bl	800263c <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e05c      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b8:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x416>
 80046c4:	e054      	b.n	8004770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <HAL_RCC_OscConfig+0x478>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fd ffb6 	bl	800263c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fd ffb2 	bl	800263c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e045      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	4b06      	ldr	r3, [pc, #24]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x444>
 80046f2:	e03d      	b.n	8004770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d107      	bne.n	800470c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e038      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
 8004700:	40023800 	.word	0x40023800
 8004704:	40007000 	.word	0x40007000
 8004708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800470c:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <HAL_RCC_OscConfig+0x4ec>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d028      	beq.n	800476c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d121      	bne.n	800476c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d11a      	bne.n	800476c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004744:	4293      	cmp	r3, r2
 8004746:	d111      	bne.n	800476c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	3b01      	subs	r3, #1
 8004756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d107      	bne.n	800476c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800

08004780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0cc      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004794:	4b68      	ldr	r3, [pc, #416]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d90c      	bls.n	80047bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b65      	ldr	r3, [pc, #404]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b63      	ldr	r3, [pc, #396]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0b8      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d020      	beq.n	800480a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d4:	4b59      	ldr	r3, [pc, #356]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4a58      	ldr	r2, [pc, #352]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047ec:	4b53      	ldr	r3, [pc, #332]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a52      	ldr	r2, [pc, #328]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f8:	4b50      	ldr	r3, [pc, #320]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	494d      	ldr	r1, [pc, #308]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d044      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d107      	bne.n	800482e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	4b47      	ldr	r3, [pc, #284]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d119      	bne.n	800485e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e07f      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d003      	beq.n	800483e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800483a:	2b03      	cmp	r3, #3
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483e:	4b3f      	ldr	r3, [pc, #252]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e06f      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484e:	4b3b      	ldr	r3, [pc, #236]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e067      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800485e:	4b37      	ldr	r3, [pc, #220]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f023 0203 	bic.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4934      	ldr	r1, [pc, #208]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	4313      	orrs	r3, r2
 800486e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004870:	f7fd fee4 	bl	800263c <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	e00a      	b.n	800488e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004878:	f7fd fee0 	bl	800263c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e04f      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	4b2b      	ldr	r3, [pc, #172]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 020c 	and.w	r2, r3, #12
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	429a      	cmp	r2, r3
 800489e:	d1eb      	bne.n	8004878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a0:	4b25      	ldr	r3, [pc, #148]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d20c      	bcs.n	80048c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b22      	ldr	r3, [pc, #136]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b20      	ldr	r3, [pc, #128]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e032      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d4:	4b19      	ldr	r3, [pc, #100]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4916      	ldr	r1, [pc, #88]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048f2:	4b12      	ldr	r3, [pc, #72]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	490e      	ldr	r1, [pc, #56]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004906:	f000 f821 	bl	800494c <HAL_RCC_GetSysClockFreq>
 800490a:	4602      	mov	r2, r0
 800490c:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	490a      	ldr	r1, [pc, #40]	@ (8004940 <HAL_RCC_ClockConfig+0x1c0>)
 8004918:	5ccb      	ldrb	r3, [r1, r3]
 800491a:	fa22 f303 	lsr.w	r3, r2, r3
 800491e:	4a09      	ldr	r2, [pc, #36]	@ (8004944 <HAL_RCC_ClockConfig+0x1c4>)
 8004920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7fd fe44 	bl	80025b4 <HAL_InitTick>

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40023c00 	.word	0x40023c00
 800493c:	40023800 	.word	0x40023800
 8004940:	08009770 	.word	0x08009770
 8004944:	20000004 	.word	0x20000004
 8004948:	20000008 	.word	0x20000008

0800494c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800494c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004950:	b090      	sub	sp, #64	@ 0x40
 8004952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004964:	4b59      	ldr	r3, [pc, #356]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x180>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b08      	cmp	r3, #8
 800496e:	d00d      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x40>
 8004970:	2b08      	cmp	r3, #8
 8004972:	f200 80a1 	bhi.w	8004ab8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0x34>
 800497a:	2b04      	cmp	r3, #4
 800497c:	d003      	beq.n	8004986 <HAL_RCC_GetSysClockFreq+0x3a>
 800497e:	e09b      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004980:	4b53      	ldr	r3, [pc, #332]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004982:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004984:	e09b      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004986:	4b53      	ldr	r3, [pc, #332]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004988:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800498a:	e098      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800498c:	4b4f      	ldr	r3, [pc, #316]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x180>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004994:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004996:	4b4d      	ldr	r3, [pc, #308]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x180>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d028      	beq.n	80049f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a2:	4b4a      	ldr	r3, [pc, #296]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x180>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	099b      	lsrs	r3, r3, #6
 80049a8:	2200      	movs	r2, #0
 80049aa:	623b      	str	r3, [r7, #32]
 80049ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049b4:	2100      	movs	r1, #0
 80049b6:	4b47      	ldr	r3, [pc, #284]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x188>)
 80049b8:	fb03 f201 	mul.w	r2, r3, r1
 80049bc:	2300      	movs	r3, #0
 80049be:	fb00 f303 	mul.w	r3, r0, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	4a43      	ldr	r2, [pc, #268]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x188>)
 80049c6:	fba0 1202 	umull	r1, r2, r0, r2
 80049ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049cc:	460a      	mov	r2, r1
 80049ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049d2:	4413      	add	r3, r2
 80049d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d8:	2200      	movs	r2, #0
 80049da:	61bb      	str	r3, [r7, #24]
 80049dc:	61fa      	str	r2, [r7, #28]
 80049de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049e6:	f7fc f937 	bl	8000c58 <__aeabi_uldivmod>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4613      	mov	r3, r2
 80049f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049f2:	e053      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f4:	4b35      	ldr	r3, [pc, #212]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x180>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	2200      	movs	r2, #0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	617a      	str	r2, [r7, #20]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a06:	f04f 0b00 	mov.w	fp, #0
 8004a0a:	4652      	mov	r2, sl
 8004a0c:	465b      	mov	r3, fp
 8004a0e:	f04f 0000 	mov.w	r0, #0
 8004a12:	f04f 0100 	mov.w	r1, #0
 8004a16:	0159      	lsls	r1, r3, #5
 8004a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a1c:	0150      	lsls	r0, r2, #5
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	ebb2 080a 	subs.w	r8, r2, sl
 8004a26:	eb63 090b 	sbc.w	r9, r3, fp
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a3e:	ebb2 0408 	subs.w	r4, r2, r8
 8004a42:	eb63 0509 	sbc.w	r5, r3, r9
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	00eb      	lsls	r3, r5, #3
 8004a50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a54:	00e2      	lsls	r2, r4, #3
 8004a56:	4614      	mov	r4, r2
 8004a58:	461d      	mov	r5, r3
 8004a5a:	eb14 030a 	adds.w	r3, r4, sl
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	eb45 030b 	adc.w	r3, r5, fp
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a72:	4629      	mov	r1, r5
 8004a74:	028b      	lsls	r3, r1, #10
 8004a76:	4621      	mov	r1, r4
 8004a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	028a      	lsls	r2, r1, #10
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a86:	2200      	movs	r2, #0
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	60fa      	str	r2, [r7, #12]
 8004a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a90:	f7fc f8e2 	bl	8000c58 <__aeabi_uldivmod>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4613      	mov	r3, r2
 8004a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x180>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004aac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ab6:	e002      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab8:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004aba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3740      	adds	r7, #64	@ 0x40
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	00f42400 	.word	0x00f42400
 8004ad4:	017d7840 	.word	0x017d7840

08004ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004adc:	4b03      	ldr	r3, [pc, #12]	@ (8004aec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000004 	.word	0x20000004

08004af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004af4:	f7ff fff0 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0a9b      	lsrs	r3, r3, #10
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4903      	ldr	r1, [pc, #12]	@ (8004b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40023800 	.word	0x40023800
 8004b14:	08009780 	.word	0x08009780

08004b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b1c:	f7ff ffdc 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0b5b      	lsrs	r3, r3, #13
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4903      	ldr	r1, [pc, #12]	@ (8004b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	08009780 	.word	0x08009780

08004b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e042      	b.n	8004bd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fd fb30 	bl	80021cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2224      	movs	r2, #36	@ 0x24
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fdbd 	bl	8005704 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	@ 0x28
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d175      	bne.n	8004cec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_UART_Transmit+0x2c>
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e06e      	b.n	8004cee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2221      	movs	r2, #33	@ 0x21
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c1e:	f7fd fd0d 	bl	800263c <HAL_GetTick>
 8004c22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c38:	d108      	bne.n	8004c4c <HAL_UART_Transmit+0x6c>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	e003      	b.n	8004c54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c54:	e02e      	b.n	8004cb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2180      	movs	r1, #128	@ 0x80
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fb1f 	bl	80052a4 <UART_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e03a      	b.n	8004cee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	3302      	adds	r3, #2
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	e007      	b.n	8004ca6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1cb      	bne.n	8004c56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2140      	movs	r1, #64	@ 0x40
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 faeb 	bl	80052a4 <UART_WaitOnFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e006      	b.n	8004cee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e000      	b.n	8004cee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
  }
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	4613      	mov	r3, r2
 8004d02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d112      	bne.n	8004d36 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_UART_Receive_IT+0x26>
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e00b      	b.n	8004d38 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fb12 	bl	8005356 <UART_Start_Receive_IT>
 8004d32:	4603      	mov	r3, r0
 8004d34:	e000      	b.n	8004d38 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b0ba      	sub	sp, #232	@ 0xe8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10f      	bne.n	8004da6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <HAL_UART_IRQHandler+0x66>
 8004d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fbf2 	bl	8005588 <UART_Receive_IT>
      return;
 8004da4:	e25b      	b.n	800525e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80de 	beq.w	8004f6c <HAL_UART_IRQHandler+0x22c>
 8004db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d106      	bne.n	8004dca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80d1 	beq.w	8004f6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <HAL_UART_IRQHandler+0xae>
 8004dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de6:	f043 0201 	orr.w	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00b      	beq.n	8004e12 <HAL_UART_IRQHandler+0xd2>
 8004dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0a:	f043 0202 	orr.w	r2, r3, #2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00b      	beq.n	8004e36 <HAL_UART_IRQHandler+0xf6>
 8004e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2e:	f043 0204 	orr.w	r2, r3, #4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d011      	beq.n	8004e66 <HAL_UART_IRQHandler+0x126>
 8004e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d105      	bne.n	8004e5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	f043 0208 	orr.w	r2, r3, #8
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 81f2 	beq.w	8005254 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <HAL_UART_IRQHandler+0x14e>
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fb7d 	bl	8005588 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e98:	2b40      	cmp	r3, #64	@ 0x40
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d103      	bne.n	8004eba <HAL_UART_IRQHandler+0x17a>
 8004eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d04f      	beq.n	8004f5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fa85 	bl	80053ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eca:	2b40      	cmp	r3, #64	@ 0x40
 8004ecc:	d141      	bne.n	8004f52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3314      	adds	r3, #20
 8004ed4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3314      	adds	r3, #20
 8004ef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004efa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004efe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1d9      	bne.n	8004ece <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d013      	beq.n	8004f4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f26:	4a7e      	ldr	r2, [pc, #504]	@ (8005120 <HAL_UART_IRQHandler+0x3e0>)
 8004f28:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fd fd35 	bl	800299e <HAL_DMA_Abort_IT>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f44:	4610      	mov	r0, r2
 8004f46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	e00e      	b.n	8004f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f994 	bl	8005278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f50:	e00a      	b.n	8004f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f990 	bl	8005278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	e006      	b.n	8004f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f98c 	bl	8005278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f66:	e175      	b.n	8005254 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	bf00      	nop
    return;
 8004f6a:	e173      	b.n	8005254 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	f040 814f 	bne.w	8005214 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8148 	beq.w	8005214 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 8141 	beq.w	8005214 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f92:	2300      	movs	r3, #0
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb2:	2b40      	cmp	r3, #64	@ 0x40
 8004fb4:	f040 80b6 	bne.w	8005124 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8145 	beq.w	8005258 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	f080 813e 	bcs.w	8005258 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fe2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fee:	f000 8088 	beq.w	8005102 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005008:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800500c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800501e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005022:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800502a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1d9      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800504e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3314      	adds	r3, #20
 800505e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005062:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005066:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800506a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005074:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e1      	bne.n	800503e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3314      	adds	r3, #20
 8005080:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800508a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800508c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005090:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800509e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e3      	bne.n	800507a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d2:	f023 0310 	bic.w	r3, r3, #16
 80050d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e3      	bne.n	80050c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fd fbde 	bl	80028be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2202      	movs	r2, #2
 8005106:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005110:	b29b      	uxth	r3, r3
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	b29b      	uxth	r3, r3
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f8b7 	bl	800528c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800511e:	e09b      	b.n	8005258 <HAL_UART_IRQHandler+0x518>
 8005120:	08005491 	.word	0x08005491
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800512c:	b29b      	uxth	r3, r3
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 808e 	beq.w	800525c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8089 	beq.w	800525c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800515a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005160:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800516e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005170:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005174:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800517c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e3      	bne.n	800514a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3314      	adds	r3, #20
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	623b      	str	r3, [r7, #32]
   return(result);
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80051a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e3      	bne.n	8005182 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	330c      	adds	r3, #12
 80051ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0310 	bic.w	r3, r3, #16
 80051de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051ec:	61fa      	str	r2, [r7, #28]
 80051ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	69b9      	ldr	r1, [r7, #24]
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	617b      	str	r3, [r7, #20]
   return(result);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e3      	bne.n	80051c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005206:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f83d 	bl	800528c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005212:	e023      	b.n	800525c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521c:	2b00      	cmp	r3, #0
 800521e:	d009      	beq.n	8005234 <HAL_UART_IRQHandler+0x4f4>
 8005220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f943 	bl	80054b8 <UART_Transmit_IT>
    return;
 8005232:	e014      	b.n	800525e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00e      	beq.n	800525e <HAL_UART_IRQHandler+0x51e>
 8005240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f983 	bl	8005558 <UART_EndTransmit_IT>
    return;
 8005252:	e004      	b.n	800525e <HAL_UART_IRQHandler+0x51e>
    return;
 8005254:	bf00      	nop
 8005256:	e002      	b.n	800525e <HAL_UART_IRQHandler+0x51e>
      return;
 8005258:	bf00      	nop
 800525a:	e000      	b.n	800525e <HAL_UART_IRQHandler+0x51e>
      return;
 800525c:	bf00      	nop
  }
}
 800525e:	37e8      	adds	r7, #232	@ 0xe8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b4:	e03b      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d037      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fd f9bd 	bl	800263c <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	6a3a      	ldr	r2, [r7, #32]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e03a      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d023      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0x8a>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b80      	cmp	r3, #128	@ 0x80
 80052ea:	d020      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0x8a>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b40      	cmp	r3, #64	@ 0x40
 80052f0:	d01d      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d116      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f857 	bl	80053ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2208      	movs	r2, #8
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e00f      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	429a      	cmp	r2, r3
 800534a:	d0b4      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	4613      	mov	r3, r2
 8005362:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	88fa      	ldrh	r2, [r7, #6]
 8005374:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2222      	movs	r2, #34	@ 0x22
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800539a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695a      	ldr	r2, [r3, #20]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0220 	orr.w	r2, r2, #32
 80053ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b095      	sub	sp, #84	@ 0x54
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80053f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e5      	bne.n	80053d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3314      	adds	r3, #20
 800540c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	61fb      	str	r3, [r7, #28]
   return(result);
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005428:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800542c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e5      	bne.n	8005406 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543e:	2b01      	cmp	r3, #1
 8005440:	d119      	bne.n	8005476 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	60bb      	str	r3, [r7, #8]
   return(result);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 0310 	bic.w	r3, r3, #16
 8005458:	647b      	str	r3, [r7, #68]	@ 0x44
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005462:	61ba      	str	r2, [r7, #24]
 8005464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6979      	ldr	r1, [r7, #20]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	613b      	str	r3, [r7, #16]
   return(result);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e5      	bne.n	8005442 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005484:	bf00      	nop
 8005486:	3754      	adds	r7, #84	@ 0x54
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff fee4 	bl	8005278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b21      	cmp	r3, #33	@ 0x21
 80054ca:	d13e      	bne.n	800554a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d4:	d114      	bne.n	8005500 <UART_Transmit_IT+0x48>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d110      	bne.n	8005500 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	1c9a      	adds	r2, r3, #2
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	621a      	str	r2, [r3, #32]
 80054fe:	e008      	b.n	8005512 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	1c59      	adds	r1, r3, #1
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6211      	str	r1, [r2, #32]
 800550a:	781a      	ldrb	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29b      	uxth	r3, r3
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	4619      	mov	r1, r3
 8005520:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10f      	bne.n	8005546 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005534:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005544:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e000      	b.n	800554c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800554a:	2302      	movs	r3, #2
  }
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800556e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff fe73 	bl	8005264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08c      	sub	sp, #48	@ 0x30
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b22      	cmp	r3, #34	@ 0x22
 800559a:	f040 80ae 	bne.w	80056fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a6:	d117      	bne.n	80055d8 <UART_Receive_IT+0x50>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d113      	bne.n	80055d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d0:	1c9a      	adds	r2, r3, #2
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80055d6:	e026      	b.n	8005626 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ea:	d007      	beq.n	80055fc <UART_Receive_IT+0x74>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <UART_Receive_IT+0x82>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	e008      	b.n	800561c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005616:	b2da      	uxtb	r2, r3
 8005618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29b      	uxth	r3, r3
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4619      	mov	r1, r3
 8005634:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005636:	2b00      	cmp	r3, #0
 8005638:	d15d      	bne.n	80056f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0220 	bic.w	r2, r2, #32
 8005648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005658:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567c:	2b01      	cmp	r3, #1
 800567e:	d135      	bne.n	80056ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	613b      	str	r3, [r7, #16]
   return(result);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f023 0310 	bic.w	r3, r3, #16
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a6:	623a      	str	r2, [r7, #32]
 80056a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	69f9      	ldr	r1, [r7, #28]
 80056ac:	6a3a      	ldr	r2, [r7, #32]
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e5      	bne.n	8005686 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b10      	cmp	r3, #16
 80056c6:	d10a      	bne.n	80056de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fdd1 	bl	800528c <HAL_UARTEx_RxEventCallback>
 80056ea:	e002      	b.n	80056f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fc f9d7 	bl	8001aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e002      	b.n	80056fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e000      	b.n	80056fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
  }
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3730      	adds	r7, #48	@ 0x30
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005708:	b0c0      	sub	sp, #256	@ 0x100
 800570a:	af00      	add	r7, sp, #0
 800570c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005720:	68d9      	ldr	r1, [r3, #12]
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	ea40 0301 	orr.w	r3, r0, r1
 800572c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	431a      	orrs	r2, r3
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	431a      	orrs	r2, r3
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800575c:	f021 010c 	bic.w	r1, r1, #12
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800576a:	430b      	orrs	r3, r1
 800576c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577e:	6999      	ldr	r1, [r3, #24]
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	ea40 0301 	orr.w	r3, r0, r1
 800578a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b8f      	ldr	r3, [pc, #572]	@ (80059d0 <UART_SetConfig+0x2cc>)
 8005794:	429a      	cmp	r2, r3
 8005796:	d005      	beq.n	80057a4 <UART_SetConfig+0xa0>
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b8d      	ldr	r3, [pc, #564]	@ (80059d4 <UART_SetConfig+0x2d0>)
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d104      	bne.n	80057ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057a4:	f7ff f9b8 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 80057a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057ac:	e003      	b.n	80057b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ae:	f7ff f99f 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 80057b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c0:	f040 810c 	bne.w	80059dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057c8:	2200      	movs	r2, #0
 80057ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057d6:	4622      	mov	r2, r4
 80057d8:	462b      	mov	r3, r5
 80057da:	1891      	adds	r1, r2, r2
 80057dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057de:	415b      	adcs	r3, r3
 80057e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057e6:	4621      	mov	r1, r4
 80057e8:	eb12 0801 	adds.w	r8, r2, r1
 80057ec:	4629      	mov	r1, r5
 80057ee:	eb43 0901 	adc.w	r9, r3, r1
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005806:	4690      	mov	r8, r2
 8005808:	4699      	mov	r9, r3
 800580a:	4623      	mov	r3, r4
 800580c:	eb18 0303 	adds.w	r3, r8, r3
 8005810:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005814:	462b      	mov	r3, r5
 8005816:	eb49 0303 	adc.w	r3, r9, r3
 800581a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800582a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800582e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005832:	460b      	mov	r3, r1
 8005834:	18db      	adds	r3, r3, r3
 8005836:	653b      	str	r3, [r7, #80]	@ 0x50
 8005838:	4613      	mov	r3, r2
 800583a:	eb42 0303 	adc.w	r3, r2, r3
 800583e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005840:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005844:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005848:	f7fb fa06 	bl	8000c58 <__aeabi_uldivmod>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4b61      	ldr	r3, [pc, #388]	@ (80059d8 <UART_SetConfig+0x2d4>)
 8005852:	fba3 2302 	umull	r2, r3, r3, r2
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	011c      	lsls	r4, r3, #4
 800585a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005864:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005868:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	1891      	adds	r1, r2, r2
 8005872:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005874:	415b      	adcs	r3, r3
 8005876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005878:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800587c:	4641      	mov	r1, r8
 800587e:	eb12 0a01 	adds.w	sl, r2, r1
 8005882:	4649      	mov	r1, r9
 8005884:	eb43 0b01 	adc.w	fp, r3, r1
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005894:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800589c:	4692      	mov	sl, r2
 800589e:	469b      	mov	fp, r3
 80058a0:	4643      	mov	r3, r8
 80058a2:	eb1a 0303 	adds.w	r3, sl, r3
 80058a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058aa:	464b      	mov	r3, r9
 80058ac:	eb4b 0303 	adc.w	r3, fp, r3
 80058b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058c8:	460b      	mov	r3, r1
 80058ca:	18db      	adds	r3, r3, r3
 80058cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ce:	4613      	mov	r3, r2
 80058d0:	eb42 0303 	adc.w	r3, r2, r3
 80058d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058de:	f7fb f9bb 	bl	8000c58 <__aeabi_uldivmod>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4611      	mov	r1, r2
 80058e8:	4b3b      	ldr	r3, [pc, #236]	@ (80059d8 <UART_SetConfig+0x2d4>)
 80058ea:	fba3 2301 	umull	r2, r3, r3, r1
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	2264      	movs	r2, #100	@ 0x64
 80058f2:	fb02 f303 	mul.w	r3, r2, r3
 80058f6:	1acb      	subs	r3, r1, r3
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058fe:	4b36      	ldr	r3, [pc, #216]	@ (80059d8 <UART_SetConfig+0x2d4>)
 8005900:	fba3 2302 	umull	r2, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800590c:	441c      	add	r4, r3
 800590e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005918:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800591c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005928:	415b      	adcs	r3, r3
 800592a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800592c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005930:	4641      	mov	r1, r8
 8005932:	1851      	adds	r1, r2, r1
 8005934:	6339      	str	r1, [r7, #48]	@ 0x30
 8005936:	4649      	mov	r1, r9
 8005938:	414b      	adcs	r3, r1
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005948:	4659      	mov	r1, fp
 800594a:	00cb      	lsls	r3, r1, #3
 800594c:	4651      	mov	r1, sl
 800594e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005952:	4651      	mov	r1, sl
 8005954:	00ca      	lsls	r2, r1, #3
 8005956:	4610      	mov	r0, r2
 8005958:	4619      	mov	r1, r3
 800595a:	4603      	mov	r3, r0
 800595c:	4642      	mov	r2, r8
 800595e:	189b      	adds	r3, r3, r2
 8005960:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005964:	464b      	mov	r3, r9
 8005966:	460a      	mov	r2, r1
 8005968:	eb42 0303 	adc.w	r3, r2, r3
 800596c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800597c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005980:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005984:	460b      	mov	r3, r1
 8005986:	18db      	adds	r3, r3, r3
 8005988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800598a:	4613      	mov	r3, r2
 800598c:	eb42 0303 	adc.w	r3, r2, r3
 8005990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005996:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800599a:	f7fb f95d 	bl	8000c58 <__aeabi_uldivmod>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <UART_SetConfig+0x2d4>)
 80059a4:	fba3 1302 	umull	r1, r3, r3, r2
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	2164      	movs	r1, #100	@ 0x64
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	3332      	adds	r3, #50	@ 0x32
 80059b6:	4a08      	ldr	r2, [pc, #32]	@ (80059d8 <UART_SetConfig+0x2d4>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	f003 0207 	and.w	r2, r3, #7
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4422      	add	r2, r4
 80059ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059cc:	e106      	b.n	8005bdc <UART_SetConfig+0x4d8>
 80059ce:	bf00      	nop
 80059d0:	40011000 	.word	0x40011000
 80059d4:	40011400 	.word	0x40011400
 80059d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059ee:	4642      	mov	r2, r8
 80059f0:	464b      	mov	r3, r9
 80059f2:	1891      	adds	r1, r2, r2
 80059f4:	6239      	str	r1, [r7, #32]
 80059f6:	415b      	adcs	r3, r3
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059fe:	4641      	mov	r1, r8
 8005a00:	1854      	adds	r4, r2, r1
 8005a02:	4649      	mov	r1, r9
 8005a04:	eb43 0501 	adc.w	r5, r3, r1
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	00eb      	lsls	r3, r5, #3
 8005a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a16:	00e2      	lsls	r2, r4, #3
 8005a18:	4614      	mov	r4, r2
 8005a1a:	461d      	mov	r5, r3
 8005a1c:	4643      	mov	r3, r8
 8005a1e:	18e3      	adds	r3, r4, r3
 8005a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a24:	464b      	mov	r3, r9
 8005a26:	eb45 0303 	adc.w	r3, r5, r3
 8005a2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	008b      	lsls	r3, r1, #2
 8005a4e:	4621      	mov	r1, r4
 8005a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a54:	4621      	mov	r1, r4
 8005a56:	008a      	lsls	r2, r1, #2
 8005a58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a5c:	f7fb f8fc 	bl	8000c58 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4b60      	ldr	r3, [pc, #384]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005a66:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	011c      	lsls	r4, r3, #4
 8005a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	1891      	adds	r1, r2, r2
 8005a86:	61b9      	str	r1, [r7, #24]
 8005a88:	415b      	adcs	r3, r3
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a90:	4641      	mov	r1, r8
 8005a92:	1851      	adds	r1, r2, r1
 8005a94:	6139      	str	r1, [r7, #16]
 8005a96:	4649      	mov	r1, r9
 8005a98:	414b      	adcs	r3, r1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005aa8:	4659      	mov	r1, fp
 8005aaa:	00cb      	lsls	r3, r1, #3
 8005aac:	4651      	mov	r1, sl
 8005aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ab2:	4651      	mov	r1, sl
 8005ab4:	00ca      	lsls	r2, r1, #3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4603      	mov	r3, r0
 8005abc:	4642      	mov	r2, r8
 8005abe:	189b      	adds	r3, r3, r2
 8005ac0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ac4:	464b      	mov	r3, r9
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	eb42 0303 	adc.w	r3, r2, r3
 8005acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ada:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ae8:	4649      	mov	r1, r9
 8005aea:	008b      	lsls	r3, r1, #2
 8005aec:	4641      	mov	r1, r8
 8005aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005af2:	4641      	mov	r1, r8
 8005af4:	008a      	lsls	r2, r1, #2
 8005af6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005afa:	f7fb f8ad 	bl	8000c58 <__aeabi_uldivmod>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4611      	mov	r1, r2
 8005b04:	4b38      	ldr	r3, [pc, #224]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005b06:	fba3 2301 	umull	r2, r3, r3, r1
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	2264      	movs	r2, #100	@ 0x64
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	1acb      	subs	r3, r1, r3
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	3332      	adds	r3, #50	@ 0x32
 8005b18:	4a33      	ldr	r2, [pc, #204]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b24:	441c      	add	r4, r3
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	1891      	adds	r1, r2, r2
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	415b      	adcs	r3, r3
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b44:	4641      	mov	r1, r8
 8005b46:	1851      	adds	r1, r2, r1
 8005b48:	6039      	str	r1, [r7, #0]
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	414b      	adcs	r3, r1
 8005b4e:	607b      	str	r3, [r7, #4]
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	00cb      	lsls	r3, r1, #3
 8005b60:	4651      	mov	r1, sl
 8005b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b66:	4651      	mov	r1, sl
 8005b68:	00ca      	lsls	r2, r1, #3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4642      	mov	r2, r8
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b76:	464b      	mov	r3, r9
 8005b78:	460a      	mov	r2, r1
 8005b7a:	eb42 0303 	adc.w	r3, r2, r3
 8005b7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b98:	4649      	mov	r1, r9
 8005b9a:	008b      	lsls	r3, r1, #2
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba2:	4641      	mov	r1, r8
 8005ba4:	008a      	lsls	r2, r1, #2
 8005ba6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005baa:	f7fb f855 	bl	8000c58 <__aeabi_uldivmod>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	2164      	movs	r1, #100	@ 0x64
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	3332      	adds	r3, #50	@ 0x32
 8005bc6:	4a08      	ldr	r2, [pc, #32]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f003 020f 	and.w	r2, r3, #15
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4422      	add	r2, r4
 8005bda:	609a      	str	r2, [r3, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005be2:	46bd      	mov	sp, r7
 8005be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005be8:	51eb851f 	.word	0x51eb851f

08005bec <__cvt>:
 8005bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	ec57 6b10 	vmov	r6, r7, d0
 8005bf4:	2f00      	cmp	r7, #0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	bfbb      	ittet	lt
 8005bfe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c02:	461f      	movlt	r7, r3
 8005c04:	2300      	movge	r3, #0
 8005c06:	232d      	movlt	r3, #45	@ 0x2d
 8005c08:	700b      	strb	r3, [r1, #0]
 8005c0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005c10:	4691      	mov	r9, r2
 8005c12:	f023 0820 	bic.w	r8, r3, #32
 8005c16:	bfbc      	itt	lt
 8005c18:	4632      	movlt	r2, r6
 8005c1a:	4616      	movlt	r6, r2
 8005c1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c20:	d005      	beq.n	8005c2e <__cvt+0x42>
 8005c22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c26:	d100      	bne.n	8005c2a <__cvt+0x3e>
 8005c28:	3401      	adds	r4, #1
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	e000      	b.n	8005c30 <__cvt+0x44>
 8005c2e:	2103      	movs	r1, #3
 8005c30:	ab03      	add	r3, sp, #12
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	ab02      	add	r3, sp, #8
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	ec47 6b10 	vmov	d0, r6, r7
 8005c3c:	4653      	mov	r3, sl
 8005c3e:	4622      	mov	r2, r4
 8005c40:	f000 fe5a 	bl	80068f8 <_dtoa_r>
 8005c44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c48:	4605      	mov	r5, r0
 8005c4a:	d119      	bne.n	8005c80 <__cvt+0x94>
 8005c4c:	f019 0f01 	tst.w	r9, #1
 8005c50:	d00e      	beq.n	8005c70 <__cvt+0x84>
 8005c52:	eb00 0904 	add.w	r9, r0, r4
 8005c56:	2200      	movs	r2, #0
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	f7fa ff3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c62:	b108      	cbz	r0, 8005c68 <__cvt+0x7c>
 8005c64:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c68:	2230      	movs	r2, #48	@ 0x30
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	454b      	cmp	r3, r9
 8005c6e:	d31e      	bcc.n	8005cae <__cvt+0xc2>
 8005c70:	9b03      	ldr	r3, [sp, #12]
 8005c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c74:	1b5b      	subs	r3, r3, r5
 8005c76:	4628      	mov	r0, r5
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	b004      	add	sp, #16
 8005c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c84:	eb00 0904 	add.w	r9, r0, r4
 8005c88:	d1e5      	bne.n	8005c56 <__cvt+0x6a>
 8005c8a:	7803      	ldrb	r3, [r0, #0]
 8005c8c:	2b30      	cmp	r3, #48	@ 0x30
 8005c8e:	d10a      	bne.n	8005ca6 <__cvt+0xba>
 8005c90:	2200      	movs	r2, #0
 8005c92:	2300      	movs	r3, #0
 8005c94:	4630      	mov	r0, r6
 8005c96:	4639      	mov	r1, r7
 8005c98:	f7fa ff1e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c9c:	b918      	cbnz	r0, 8005ca6 <__cvt+0xba>
 8005c9e:	f1c4 0401 	rsb	r4, r4, #1
 8005ca2:	f8ca 4000 	str.w	r4, [sl]
 8005ca6:	f8da 3000 	ldr.w	r3, [sl]
 8005caa:	4499      	add	r9, r3
 8005cac:	e7d3      	b.n	8005c56 <__cvt+0x6a>
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	9103      	str	r1, [sp, #12]
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	e7d9      	b.n	8005c6a <__cvt+0x7e>

08005cb6 <__exponent>:
 8005cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	bfba      	itte	lt
 8005cbc:	4249      	neglt	r1, r1
 8005cbe:	232d      	movlt	r3, #45	@ 0x2d
 8005cc0:	232b      	movge	r3, #43	@ 0x2b
 8005cc2:	2909      	cmp	r1, #9
 8005cc4:	7002      	strb	r2, [r0, #0]
 8005cc6:	7043      	strb	r3, [r0, #1]
 8005cc8:	dd29      	ble.n	8005d1e <__exponent+0x68>
 8005cca:	f10d 0307 	add.w	r3, sp, #7
 8005cce:	461d      	mov	r5, r3
 8005cd0:	270a      	movs	r7, #10
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005cd8:	fb07 1416 	mls	r4, r7, r6, r1
 8005cdc:	3430      	adds	r4, #48	@ 0x30
 8005cde:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	2c63      	cmp	r4, #99	@ 0x63
 8005ce6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005cea:	4631      	mov	r1, r6
 8005cec:	dcf1      	bgt.n	8005cd2 <__exponent+0x1c>
 8005cee:	3130      	adds	r1, #48	@ 0x30
 8005cf0:	1e94      	subs	r4, r2, #2
 8005cf2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005cf6:	1c41      	adds	r1, r0, #1
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	42ab      	cmp	r3, r5
 8005cfc:	d30a      	bcc.n	8005d14 <__exponent+0x5e>
 8005cfe:	f10d 0309 	add.w	r3, sp, #9
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	42ac      	cmp	r4, r5
 8005d06:	bf88      	it	hi
 8005d08:	2300      	movhi	r3, #0
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	4403      	add	r3, r0
 8005d0e:	1a18      	subs	r0, r3, r0
 8005d10:	b003      	add	sp, #12
 8005d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d14:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d18:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d1c:	e7ed      	b.n	8005cfa <__exponent+0x44>
 8005d1e:	2330      	movs	r3, #48	@ 0x30
 8005d20:	3130      	adds	r1, #48	@ 0x30
 8005d22:	7083      	strb	r3, [r0, #2]
 8005d24:	70c1      	strb	r1, [r0, #3]
 8005d26:	1d03      	adds	r3, r0, #4
 8005d28:	e7f1      	b.n	8005d0e <__exponent+0x58>
	...

08005d2c <_printf_float>:
 8005d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	b08d      	sub	sp, #52	@ 0x34
 8005d32:	460c      	mov	r4, r1
 8005d34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005d38:	4616      	mov	r6, r2
 8005d3a:	461f      	mov	r7, r3
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	f000 fcdb 	bl	80066f8 <_localeconv_r>
 8005d42:	6803      	ldr	r3, [r0, #0]
 8005d44:	9304      	str	r3, [sp, #16]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fa fa9a 	bl	8000280 <strlen>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d50:	f8d8 3000 	ldr.w	r3, [r8]
 8005d54:	9005      	str	r0, [sp, #20]
 8005d56:	3307      	adds	r3, #7
 8005d58:	f023 0307 	bic.w	r3, r3, #7
 8005d5c:	f103 0208 	add.w	r2, r3, #8
 8005d60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d64:	f8d4 b000 	ldr.w	fp, [r4]
 8005d68:	f8c8 2000 	str.w	r2, [r8]
 8005d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d74:	9307      	str	r3, [sp, #28]
 8005d76:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d82:	4b9c      	ldr	r3, [pc, #624]	@ (8005ff4 <_printf_float+0x2c8>)
 8005d84:	f04f 32ff 	mov.w	r2, #4294967295
 8005d88:	f7fa fed8 	bl	8000b3c <__aeabi_dcmpun>
 8005d8c:	bb70      	cbnz	r0, 8005dec <_printf_float+0xc0>
 8005d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d92:	4b98      	ldr	r3, [pc, #608]	@ (8005ff4 <_printf_float+0x2c8>)
 8005d94:	f04f 32ff 	mov.w	r2, #4294967295
 8005d98:	f7fa feb2 	bl	8000b00 <__aeabi_dcmple>
 8005d9c:	bb30      	cbnz	r0, 8005dec <_printf_float+0xc0>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2300      	movs	r3, #0
 8005da2:	4640      	mov	r0, r8
 8005da4:	4649      	mov	r1, r9
 8005da6:	f7fa fea1 	bl	8000aec <__aeabi_dcmplt>
 8005daa:	b110      	cbz	r0, 8005db2 <_printf_float+0x86>
 8005dac:	232d      	movs	r3, #45	@ 0x2d
 8005dae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005db2:	4a91      	ldr	r2, [pc, #580]	@ (8005ff8 <_printf_float+0x2cc>)
 8005db4:	4b91      	ldr	r3, [pc, #580]	@ (8005ffc <_printf_float+0x2d0>)
 8005db6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005dba:	bf94      	ite	ls
 8005dbc:	4690      	movls	r8, r2
 8005dbe:	4698      	movhi	r8, r3
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	6123      	str	r3, [r4, #16]
 8005dc4:	f02b 0304 	bic.w	r3, fp, #4
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	f04f 0900 	mov.w	r9, #0
 8005dce:	9700      	str	r7, [sp, #0]
 8005dd0:	4633      	mov	r3, r6
 8005dd2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 f9d2 	bl	8006180 <_printf_common>
 8005ddc:	3001      	adds	r0, #1
 8005dde:	f040 808d 	bne.w	8005efc <_printf_float+0x1d0>
 8005de2:	f04f 30ff 	mov.w	r0, #4294967295
 8005de6:	b00d      	add	sp, #52	@ 0x34
 8005de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dec:	4642      	mov	r2, r8
 8005dee:	464b      	mov	r3, r9
 8005df0:	4640      	mov	r0, r8
 8005df2:	4649      	mov	r1, r9
 8005df4:	f7fa fea2 	bl	8000b3c <__aeabi_dcmpun>
 8005df8:	b140      	cbz	r0, 8005e0c <_printf_float+0xe0>
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bfbc      	itt	lt
 8005e00:	232d      	movlt	r3, #45	@ 0x2d
 8005e02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e06:	4a7e      	ldr	r2, [pc, #504]	@ (8006000 <_printf_float+0x2d4>)
 8005e08:	4b7e      	ldr	r3, [pc, #504]	@ (8006004 <_printf_float+0x2d8>)
 8005e0a:	e7d4      	b.n	8005db6 <_printf_float+0x8a>
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005e12:	9206      	str	r2, [sp, #24]
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	d13b      	bne.n	8005e90 <_printf_float+0x164>
 8005e18:	2306      	movs	r3, #6
 8005e1a:	6063      	str	r3, [r4, #4]
 8005e1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e20:	2300      	movs	r3, #0
 8005e22:	6022      	str	r2, [r4, #0]
 8005e24:	9303      	str	r3, [sp, #12]
 8005e26:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e28:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e2c:	ab09      	add	r3, sp, #36	@ 0x24
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	6861      	ldr	r1, [r4, #4]
 8005e32:	ec49 8b10 	vmov	d0, r8, r9
 8005e36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f7ff fed6 	bl	8005bec <__cvt>
 8005e40:	9b06      	ldr	r3, [sp, #24]
 8005e42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e44:	2b47      	cmp	r3, #71	@ 0x47
 8005e46:	4680      	mov	r8, r0
 8005e48:	d129      	bne.n	8005e9e <_printf_float+0x172>
 8005e4a:	1cc8      	adds	r0, r1, #3
 8005e4c:	db02      	blt.n	8005e54 <_printf_float+0x128>
 8005e4e:	6863      	ldr	r3, [r4, #4]
 8005e50:	4299      	cmp	r1, r3
 8005e52:	dd41      	ble.n	8005ed8 <_printf_float+0x1ac>
 8005e54:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e58:	fa5f fa8a 	uxtb.w	sl, sl
 8005e5c:	3901      	subs	r1, #1
 8005e5e:	4652      	mov	r2, sl
 8005e60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005e64:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e66:	f7ff ff26 	bl	8005cb6 <__exponent>
 8005e6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e6c:	1813      	adds	r3, r2, r0
 8005e6e:	2a01      	cmp	r2, #1
 8005e70:	4681      	mov	r9, r0
 8005e72:	6123      	str	r3, [r4, #16]
 8005e74:	dc02      	bgt.n	8005e7c <_printf_float+0x150>
 8005e76:	6822      	ldr	r2, [r4, #0]
 8005e78:	07d2      	lsls	r2, r2, #31
 8005e7a:	d501      	bpl.n	8005e80 <_printf_float+0x154>
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	6123      	str	r3, [r4, #16]
 8005e80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0a2      	beq.n	8005dce <_printf_float+0xa2>
 8005e88:	232d      	movs	r3, #45	@ 0x2d
 8005e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e8e:	e79e      	b.n	8005dce <_printf_float+0xa2>
 8005e90:	9a06      	ldr	r2, [sp, #24]
 8005e92:	2a47      	cmp	r2, #71	@ 0x47
 8005e94:	d1c2      	bne.n	8005e1c <_printf_float+0xf0>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1c0      	bne.n	8005e1c <_printf_float+0xf0>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e7bd      	b.n	8005e1a <_printf_float+0xee>
 8005e9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ea2:	d9db      	bls.n	8005e5c <_printf_float+0x130>
 8005ea4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ea8:	d118      	bne.n	8005edc <_printf_float+0x1b0>
 8005eaa:	2900      	cmp	r1, #0
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	dd0b      	ble.n	8005ec8 <_printf_float+0x19c>
 8005eb0:	6121      	str	r1, [r4, #16]
 8005eb2:	b913      	cbnz	r3, 8005eba <_printf_float+0x18e>
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	07d0      	lsls	r0, r2, #31
 8005eb8:	d502      	bpl.n	8005ec0 <_printf_float+0x194>
 8005eba:	3301      	adds	r3, #1
 8005ebc:	440b      	add	r3, r1
 8005ebe:	6123      	str	r3, [r4, #16]
 8005ec0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005ec2:	f04f 0900 	mov.w	r9, #0
 8005ec6:	e7db      	b.n	8005e80 <_printf_float+0x154>
 8005ec8:	b913      	cbnz	r3, 8005ed0 <_printf_float+0x1a4>
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	07d2      	lsls	r2, r2, #31
 8005ece:	d501      	bpl.n	8005ed4 <_printf_float+0x1a8>
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	e7f4      	b.n	8005ebe <_printf_float+0x192>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e7f2      	b.n	8005ebe <_printf_float+0x192>
 8005ed8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ede:	4299      	cmp	r1, r3
 8005ee0:	db05      	blt.n	8005eee <_printf_float+0x1c2>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	6121      	str	r1, [r4, #16]
 8005ee6:	07d8      	lsls	r0, r3, #31
 8005ee8:	d5ea      	bpl.n	8005ec0 <_printf_float+0x194>
 8005eea:	1c4b      	adds	r3, r1, #1
 8005eec:	e7e7      	b.n	8005ebe <_printf_float+0x192>
 8005eee:	2900      	cmp	r1, #0
 8005ef0:	bfd4      	ite	le
 8005ef2:	f1c1 0202 	rsble	r2, r1, #2
 8005ef6:	2201      	movgt	r2, #1
 8005ef8:	4413      	add	r3, r2
 8005efa:	e7e0      	b.n	8005ebe <_printf_float+0x192>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	055a      	lsls	r2, r3, #21
 8005f00:	d407      	bmi.n	8005f12 <_printf_float+0x1e6>
 8005f02:	6923      	ldr	r3, [r4, #16]
 8005f04:	4642      	mov	r2, r8
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d12b      	bne.n	8005f68 <_printf_float+0x23c>
 8005f10:	e767      	b.n	8005de2 <_printf_float+0xb6>
 8005f12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f16:	f240 80dd 	bls.w	80060d4 <_printf_float+0x3a8>
 8005f1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2300      	movs	r3, #0
 8005f22:	f7fa fdd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d033      	beq.n	8005f92 <_printf_float+0x266>
 8005f2a:	4a37      	ldr	r2, [pc, #220]	@ (8006008 <_printf_float+0x2dc>)
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f af54 	beq.w	8005de2 <_printf_float+0xb6>
 8005f3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005f3e:	4543      	cmp	r3, r8
 8005f40:	db02      	blt.n	8005f48 <_printf_float+0x21c>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	07d8      	lsls	r0, r3, #31
 8005f46:	d50f      	bpl.n	8005f68 <_printf_float+0x23c>
 8005f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b8      	blx	r7
 8005f52:	3001      	adds	r0, #1
 8005f54:	f43f af45 	beq.w	8005de2 <_printf_float+0xb6>
 8005f58:	f04f 0900 	mov.w	r9, #0
 8005f5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f60:	f104 0a1a 	add.w	sl, r4, #26
 8005f64:	45c8      	cmp	r8, r9
 8005f66:	dc09      	bgt.n	8005f7c <_printf_float+0x250>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	079b      	lsls	r3, r3, #30
 8005f6c:	f100 8103 	bmi.w	8006176 <_printf_float+0x44a>
 8005f70:	68e0      	ldr	r0, [r4, #12]
 8005f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f74:	4298      	cmp	r0, r3
 8005f76:	bfb8      	it	lt
 8005f78:	4618      	movlt	r0, r3
 8005f7a:	e734      	b.n	8005de6 <_printf_float+0xba>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4652      	mov	r2, sl
 8005f80:	4631      	mov	r1, r6
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	f43f af2b 	beq.w	8005de2 <_printf_float+0xb6>
 8005f8c:	f109 0901 	add.w	r9, r9, #1
 8005f90:	e7e8      	b.n	8005f64 <_printf_float+0x238>
 8005f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	dc39      	bgt.n	800600c <_printf_float+0x2e0>
 8005f98:	4a1b      	ldr	r2, [pc, #108]	@ (8006008 <_printf_float+0x2dc>)
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	47b8      	blx	r7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	f43f af1d 	beq.w	8005de2 <_printf_float+0xb6>
 8005fa8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005fac:	ea59 0303 	orrs.w	r3, r9, r3
 8005fb0:	d102      	bne.n	8005fb8 <_printf_float+0x28c>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	07d9      	lsls	r1, r3, #31
 8005fb6:	d5d7      	bpl.n	8005f68 <_printf_float+0x23c>
 8005fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	f43f af0d 	beq.w	8005de2 <_printf_float+0xb6>
 8005fc8:	f04f 0a00 	mov.w	sl, #0
 8005fcc:	f104 0b1a 	add.w	fp, r4, #26
 8005fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd2:	425b      	negs	r3, r3
 8005fd4:	4553      	cmp	r3, sl
 8005fd6:	dc01      	bgt.n	8005fdc <_printf_float+0x2b0>
 8005fd8:	464b      	mov	r3, r9
 8005fda:	e793      	b.n	8005f04 <_printf_float+0x1d8>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	465a      	mov	r2, fp
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	47b8      	blx	r7
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	f43f aefb 	beq.w	8005de2 <_printf_float+0xb6>
 8005fec:	f10a 0a01 	add.w	sl, sl, #1
 8005ff0:	e7ee      	b.n	8005fd0 <_printf_float+0x2a4>
 8005ff2:	bf00      	nop
 8005ff4:	7fefffff 	.word	0x7fefffff
 8005ff8:	08009788 	.word	0x08009788
 8005ffc:	0800978c 	.word	0x0800978c
 8006000:	08009790 	.word	0x08009790
 8006004:	08009794 	.word	0x08009794
 8006008:	08009798 	.word	0x08009798
 800600c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800600e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006012:	4553      	cmp	r3, sl
 8006014:	bfa8      	it	ge
 8006016:	4653      	movge	r3, sl
 8006018:	2b00      	cmp	r3, #0
 800601a:	4699      	mov	r9, r3
 800601c:	dc36      	bgt.n	800608c <_printf_float+0x360>
 800601e:	f04f 0b00 	mov.w	fp, #0
 8006022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006026:	f104 021a 	add.w	r2, r4, #26
 800602a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800602c:	9306      	str	r3, [sp, #24]
 800602e:	eba3 0309 	sub.w	r3, r3, r9
 8006032:	455b      	cmp	r3, fp
 8006034:	dc31      	bgt.n	800609a <_printf_float+0x36e>
 8006036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006038:	459a      	cmp	sl, r3
 800603a:	dc3a      	bgt.n	80060b2 <_printf_float+0x386>
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	07da      	lsls	r2, r3, #31
 8006040:	d437      	bmi.n	80060b2 <_printf_float+0x386>
 8006042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006044:	ebaa 0903 	sub.w	r9, sl, r3
 8006048:	9b06      	ldr	r3, [sp, #24]
 800604a:	ebaa 0303 	sub.w	r3, sl, r3
 800604e:	4599      	cmp	r9, r3
 8006050:	bfa8      	it	ge
 8006052:	4699      	movge	r9, r3
 8006054:	f1b9 0f00 	cmp.w	r9, #0
 8006058:	dc33      	bgt.n	80060c2 <_printf_float+0x396>
 800605a:	f04f 0800 	mov.w	r8, #0
 800605e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006062:	f104 0b1a 	add.w	fp, r4, #26
 8006066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006068:	ebaa 0303 	sub.w	r3, sl, r3
 800606c:	eba3 0309 	sub.w	r3, r3, r9
 8006070:	4543      	cmp	r3, r8
 8006072:	f77f af79 	ble.w	8005f68 <_printf_float+0x23c>
 8006076:	2301      	movs	r3, #1
 8006078:	465a      	mov	r2, fp
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	f43f aeae 	beq.w	8005de2 <_printf_float+0xb6>
 8006086:	f108 0801 	add.w	r8, r8, #1
 800608a:	e7ec      	b.n	8006066 <_printf_float+0x33a>
 800608c:	4642      	mov	r2, r8
 800608e:	4631      	mov	r1, r6
 8006090:	4628      	mov	r0, r5
 8006092:	47b8      	blx	r7
 8006094:	3001      	adds	r0, #1
 8006096:	d1c2      	bne.n	800601e <_printf_float+0x2f2>
 8006098:	e6a3      	b.n	8005de2 <_printf_float+0xb6>
 800609a:	2301      	movs	r3, #1
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	9206      	str	r2, [sp, #24]
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	f43f ae9c 	beq.w	8005de2 <_printf_float+0xb6>
 80060aa:	9a06      	ldr	r2, [sp, #24]
 80060ac:	f10b 0b01 	add.w	fp, fp, #1
 80060b0:	e7bb      	b.n	800602a <_printf_float+0x2fe>
 80060b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060b6:	4631      	mov	r1, r6
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	d1c0      	bne.n	8006042 <_printf_float+0x316>
 80060c0:	e68f      	b.n	8005de2 <_printf_float+0xb6>
 80060c2:	9a06      	ldr	r2, [sp, #24]
 80060c4:	464b      	mov	r3, r9
 80060c6:	4442      	add	r2, r8
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	d1c3      	bne.n	800605a <_printf_float+0x32e>
 80060d2:	e686      	b.n	8005de2 <_printf_float+0xb6>
 80060d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060d8:	f1ba 0f01 	cmp.w	sl, #1
 80060dc:	dc01      	bgt.n	80060e2 <_printf_float+0x3b6>
 80060de:	07db      	lsls	r3, r3, #31
 80060e0:	d536      	bpl.n	8006150 <_printf_float+0x424>
 80060e2:	2301      	movs	r3, #1
 80060e4:	4642      	mov	r2, r8
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	f43f ae78 	beq.w	8005de2 <_printf_float+0xb6>
 80060f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	f43f ae70 	beq.w	8005de2 <_printf_float+0xb6>
 8006102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006106:	2200      	movs	r2, #0
 8006108:	2300      	movs	r3, #0
 800610a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800610e:	f7fa fce3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006112:	b9c0      	cbnz	r0, 8006146 <_printf_float+0x41a>
 8006114:	4653      	mov	r3, sl
 8006116:	f108 0201 	add.w	r2, r8, #1
 800611a:	4631      	mov	r1, r6
 800611c:	4628      	mov	r0, r5
 800611e:	47b8      	blx	r7
 8006120:	3001      	adds	r0, #1
 8006122:	d10c      	bne.n	800613e <_printf_float+0x412>
 8006124:	e65d      	b.n	8005de2 <_printf_float+0xb6>
 8006126:	2301      	movs	r3, #1
 8006128:	465a      	mov	r2, fp
 800612a:	4631      	mov	r1, r6
 800612c:	4628      	mov	r0, r5
 800612e:	47b8      	blx	r7
 8006130:	3001      	adds	r0, #1
 8006132:	f43f ae56 	beq.w	8005de2 <_printf_float+0xb6>
 8006136:	f108 0801 	add.w	r8, r8, #1
 800613a:	45d0      	cmp	r8, sl
 800613c:	dbf3      	blt.n	8006126 <_printf_float+0x3fa>
 800613e:	464b      	mov	r3, r9
 8006140:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006144:	e6df      	b.n	8005f06 <_printf_float+0x1da>
 8006146:	f04f 0800 	mov.w	r8, #0
 800614a:	f104 0b1a 	add.w	fp, r4, #26
 800614e:	e7f4      	b.n	800613a <_printf_float+0x40e>
 8006150:	2301      	movs	r3, #1
 8006152:	4642      	mov	r2, r8
 8006154:	e7e1      	b.n	800611a <_printf_float+0x3ee>
 8006156:	2301      	movs	r3, #1
 8006158:	464a      	mov	r2, r9
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	f43f ae3e 	beq.w	8005de2 <_printf_float+0xb6>
 8006166:	f108 0801 	add.w	r8, r8, #1
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800616e:	1a5b      	subs	r3, r3, r1
 8006170:	4543      	cmp	r3, r8
 8006172:	dcf0      	bgt.n	8006156 <_printf_float+0x42a>
 8006174:	e6fc      	b.n	8005f70 <_printf_float+0x244>
 8006176:	f04f 0800 	mov.w	r8, #0
 800617a:	f104 0919 	add.w	r9, r4, #25
 800617e:	e7f4      	b.n	800616a <_printf_float+0x43e>

08006180 <_printf_common>:
 8006180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	4616      	mov	r6, r2
 8006186:	4698      	mov	r8, r3
 8006188:	688a      	ldr	r2, [r1, #8]
 800618a:	690b      	ldr	r3, [r1, #16]
 800618c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006190:	4293      	cmp	r3, r2
 8006192:	bfb8      	it	lt
 8006194:	4613      	movlt	r3, r2
 8006196:	6033      	str	r3, [r6, #0]
 8006198:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800619c:	4607      	mov	r7, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	b10a      	cbz	r2, 80061a6 <_printf_common+0x26>
 80061a2:	3301      	adds	r3, #1
 80061a4:	6033      	str	r3, [r6, #0]
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	0699      	lsls	r1, r3, #26
 80061aa:	bf42      	ittt	mi
 80061ac:	6833      	ldrmi	r3, [r6, #0]
 80061ae:	3302      	addmi	r3, #2
 80061b0:	6033      	strmi	r3, [r6, #0]
 80061b2:	6825      	ldr	r5, [r4, #0]
 80061b4:	f015 0506 	ands.w	r5, r5, #6
 80061b8:	d106      	bne.n	80061c8 <_printf_common+0x48>
 80061ba:	f104 0a19 	add.w	sl, r4, #25
 80061be:	68e3      	ldr	r3, [r4, #12]
 80061c0:	6832      	ldr	r2, [r6, #0]
 80061c2:	1a9b      	subs	r3, r3, r2
 80061c4:	42ab      	cmp	r3, r5
 80061c6:	dc26      	bgt.n	8006216 <_printf_common+0x96>
 80061c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061cc:	6822      	ldr	r2, [r4, #0]
 80061ce:	3b00      	subs	r3, #0
 80061d0:	bf18      	it	ne
 80061d2:	2301      	movne	r3, #1
 80061d4:	0692      	lsls	r2, r2, #26
 80061d6:	d42b      	bmi.n	8006230 <_printf_common+0xb0>
 80061d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061dc:	4641      	mov	r1, r8
 80061de:	4638      	mov	r0, r7
 80061e0:	47c8      	blx	r9
 80061e2:	3001      	adds	r0, #1
 80061e4:	d01e      	beq.n	8006224 <_printf_common+0xa4>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	6922      	ldr	r2, [r4, #16]
 80061ea:	f003 0306 	and.w	r3, r3, #6
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	bf02      	ittt	eq
 80061f2:	68e5      	ldreq	r5, [r4, #12]
 80061f4:	6833      	ldreq	r3, [r6, #0]
 80061f6:	1aed      	subeq	r5, r5, r3
 80061f8:	68a3      	ldr	r3, [r4, #8]
 80061fa:	bf0c      	ite	eq
 80061fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006200:	2500      	movne	r5, #0
 8006202:	4293      	cmp	r3, r2
 8006204:	bfc4      	itt	gt
 8006206:	1a9b      	subgt	r3, r3, r2
 8006208:	18ed      	addgt	r5, r5, r3
 800620a:	2600      	movs	r6, #0
 800620c:	341a      	adds	r4, #26
 800620e:	42b5      	cmp	r5, r6
 8006210:	d11a      	bne.n	8006248 <_printf_common+0xc8>
 8006212:	2000      	movs	r0, #0
 8006214:	e008      	b.n	8006228 <_printf_common+0xa8>
 8006216:	2301      	movs	r3, #1
 8006218:	4652      	mov	r2, sl
 800621a:	4641      	mov	r1, r8
 800621c:	4638      	mov	r0, r7
 800621e:	47c8      	blx	r9
 8006220:	3001      	adds	r0, #1
 8006222:	d103      	bne.n	800622c <_printf_common+0xac>
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622c:	3501      	adds	r5, #1
 800622e:	e7c6      	b.n	80061be <_printf_common+0x3e>
 8006230:	18e1      	adds	r1, r4, r3
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	2030      	movs	r0, #48	@ 0x30
 8006236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800623a:	4422      	add	r2, r4
 800623c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006244:	3302      	adds	r3, #2
 8006246:	e7c7      	b.n	80061d8 <_printf_common+0x58>
 8006248:	2301      	movs	r3, #1
 800624a:	4622      	mov	r2, r4
 800624c:	4641      	mov	r1, r8
 800624e:	4638      	mov	r0, r7
 8006250:	47c8      	blx	r9
 8006252:	3001      	adds	r0, #1
 8006254:	d0e6      	beq.n	8006224 <_printf_common+0xa4>
 8006256:	3601      	adds	r6, #1
 8006258:	e7d9      	b.n	800620e <_printf_common+0x8e>
	...

0800625c <_printf_i>:
 800625c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	7e0f      	ldrb	r7, [r1, #24]
 8006262:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006264:	2f78      	cmp	r7, #120	@ 0x78
 8006266:	4691      	mov	r9, r2
 8006268:	4680      	mov	r8, r0
 800626a:	460c      	mov	r4, r1
 800626c:	469a      	mov	sl, r3
 800626e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006272:	d807      	bhi.n	8006284 <_printf_i+0x28>
 8006274:	2f62      	cmp	r7, #98	@ 0x62
 8006276:	d80a      	bhi.n	800628e <_printf_i+0x32>
 8006278:	2f00      	cmp	r7, #0
 800627a:	f000 80d2 	beq.w	8006422 <_printf_i+0x1c6>
 800627e:	2f58      	cmp	r7, #88	@ 0x58
 8006280:	f000 80b9 	beq.w	80063f6 <_printf_i+0x19a>
 8006284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800628c:	e03a      	b.n	8006304 <_printf_i+0xa8>
 800628e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006292:	2b15      	cmp	r3, #21
 8006294:	d8f6      	bhi.n	8006284 <_printf_i+0x28>
 8006296:	a101      	add	r1, pc, #4	@ (adr r1, 800629c <_printf_i+0x40>)
 8006298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800629c:	080062f5 	.word	0x080062f5
 80062a0:	08006309 	.word	0x08006309
 80062a4:	08006285 	.word	0x08006285
 80062a8:	08006285 	.word	0x08006285
 80062ac:	08006285 	.word	0x08006285
 80062b0:	08006285 	.word	0x08006285
 80062b4:	08006309 	.word	0x08006309
 80062b8:	08006285 	.word	0x08006285
 80062bc:	08006285 	.word	0x08006285
 80062c0:	08006285 	.word	0x08006285
 80062c4:	08006285 	.word	0x08006285
 80062c8:	08006409 	.word	0x08006409
 80062cc:	08006333 	.word	0x08006333
 80062d0:	080063c3 	.word	0x080063c3
 80062d4:	08006285 	.word	0x08006285
 80062d8:	08006285 	.word	0x08006285
 80062dc:	0800642b 	.word	0x0800642b
 80062e0:	08006285 	.word	0x08006285
 80062e4:	08006333 	.word	0x08006333
 80062e8:	08006285 	.word	0x08006285
 80062ec:	08006285 	.word	0x08006285
 80062f0:	080063cb 	.word	0x080063cb
 80062f4:	6833      	ldr	r3, [r6, #0]
 80062f6:	1d1a      	adds	r2, r3, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6032      	str	r2, [r6, #0]
 80062fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006304:	2301      	movs	r3, #1
 8006306:	e09d      	b.n	8006444 <_printf_i+0x1e8>
 8006308:	6833      	ldr	r3, [r6, #0]
 800630a:	6820      	ldr	r0, [r4, #0]
 800630c:	1d19      	adds	r1, r3, #4
 800630e:	6031      	str	r1, [r6, #0]
 8006310:	0606      	lsls	r6, r0, #24
 8006312:	d501      	bpl.n	8006318 <_printf_i+0xbc>
 8006314:	681d      	ldr	r5, [r3, #0]
 8006316:	e003      	b.n	8006320 <_printf_i+0xc4>
 8006318:	0645      	lsls	r5, r0, #25
 800631a:	d5fb      	bpl.n	8006314 <_printf_i+0xb8>
 800631c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006320:	2d00      	cmp	r5, #0
 8006322:	da03      	bge.n	800632c <_printf_i+0xd0>
 8006324:	232d      	movs	r3, #45	@ 0x2d
 8006326:	426d      	negs	r5, r5
 8006328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800632c:	4859      	ldr	r0, [pc, #356]	@ (8006494 <_printf_i+0x238>)
 800632e:	230a      	movs	r3, #10
 8006330:	e011      	b.n	8006356 <_printf_i+0xfa>
 8006332:	6821      	ldr	r1, [r4, #0]
 8006334:	6833      	ldr	r3, [r6, #0]
 8006336:	0608      	lsls	r0, r1, #24
 8006338:	f853 5b04 	ldr.w	r5, [r3], #4
 800633c:	d402      	bmi.n	8006344 <_printf_i+0xe8>
 800633e:	0649      	lsls	r1, r1, #25
 8006340:	bf48      	it	mi
 8006342:	b2ad      	uxthmi	r5, r5
 8006344:	2f6f      	cmp	r7, #111	@ 0x6f
 8006346:	4853      	ldr	r0, [pc, #332]	@ (8006494 <_printf_i+0x238>)
 8006348:	6033      	str	r3, [r6, #0]
 800634a:	bf14      	ite	ne
 800634c:	230a      	movne	r3, #10
 800634e:	2308      	moveq	r3, #8
 8006350:	2100      	movs	r1, #0
 8006352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006356:	6866      	ldr	r6, [r4, #4]
 8006358:	60a6      	str	r6, [r4, #8]
 800635a:	2e00      	cmp	r6, #0
 800635c:	bfa2      	ittt	ge
 800635e:	6821      	ldrge	r1, [r4, #0]
 8006360:	f021 0104 	bicge.w	r1, r1, #4
 8006364:	6021      	strge	r1, [r4, #0]
 8006366:	b90d      	cbnz	r5, 800636c <_printf_i+0x110>
 8006368:	2e00      	cmp	r6, #0
 800636a:	d04b      	beq.n	8006404 <_printf_i+0x1a8>
 800636c:	4616      	mov	r6, r2
 800636e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006372:	fb03 5711 	mls	r7, r3, r1, r5
 8006376:	5dc7      	ldrb	r7, [r0, r7]
 8006378:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800637c:	462f      	mov	r7, r5
 800637e:	42bb      	cmp	r3, r7
 8006380:	460d      	mov	r5, r1
 8006382:	d9f4      	bls.n	800636e <_printf_i+0x112>
 8006384:	2b08      	cmp	r3, #8
 8006386:	d10b      	bne.n	80063a0 <_printf_i+0x144>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	07df      	lsls	r7, r3, #31
 800638c:	d508      	bpl.n	80063a0 <_printf_i+0x144>
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	6861      	ldr	r1, [r4, #4]
 8006392:	4299      	cmp	r1, r3
 8006394:	bfde      	ittt	le
 8006396:	2330      	movle	r3, #48	@ 0x30
 8006398:	f806 3c01 	strble.w	r3, [r6, #-1]
 800639c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063a0:	1b92      	subs	r2, r2, r6
 80063a2:	6122      	str	r2, [r4, #16]
 80063a4:	f8cd a000 	str.w	sl, [sp]
 80063a8:	464b      	mov	r3, r9
 80063aa:	aa03      	add	r2, sp, #12
 80063ac:	4621      	mov	r1, r4
 80063ae:	4640      	mov	r0, r8
 80063b0:	f7ff fee6 	bl	8006180 <_printf_common>
 80063b4:	3001      	adds	r0, #1
 80063b6:	d14a      	bne.n	800644e <_printf_i+0x1f2>
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	b004      	add	sp, #16
 80063be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	f043 0320 	orr.w	r3, r3, #32
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	4833      	ldr	r0, [pc, #204]	@ (8006498 <_printf_i+0x23c>)
 80063cc:	2778      	movs	r7, #120	@ 0x78
 80063ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	6831      	ldr	r1, [r6, #0]
 80063d6:	061f      	lsls	r7, r3, #24
 80063d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80063dc:	d402      	bmi.n	80063e4 <_printf_i+0x188>
 80063de:	065f      	lsls	r7, r3, #25
 80063e0:	bf48      	it	mi
 80063e2:	b2ad      	uxthmi	r5, r5
 80063e4:	6031      	str	r1, [r6, #0]
 80063e6:	07d9      	lsls	r1, r3, #31
 80063e8:	bf44      	itt	mi
 80063ea:	f043 0320 	orrmi.w	r3, r3, #32
 80063ee:	6023      	strmi	r3, [r4, #0]
 80063f0:	b11d      	cbz	r5, 80063fa <_printf_i+0x19e>
 80063f2:	2310      	movs	r3, #16
 80063f4:	e7ac      	b.n	8006350 <_printf_i+0xf4>
 80063f6:	4827      	ldr	r0, [pc, #156]	@ (8006494 <_printf_i+0x238>)
 80063f8:	e7e9      	b.n	80063ce <_printf_i+0x172>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	f023 0320 	bic.w	r3, r3, #32
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	e7f6      	b.n	80063f2 <_printf_i+0x196>
 8006404:	4616      	mov	r6, r2
 8006406:	e7bd      	b.n	8006384 <_printf_i+0x128>
 8006408:	6833      	ldr	r3, [r6, #0]
 800640a:	6825      	ldr	r5, [r4, #0]
 800640c:	6961      	ldr	r1, [r4, #20]
 800640e:	1d18      	adds	r0, r3, #4
 8006410:	6030      	str	r0, [r6, #0]
 8006412:	062e      	lsls	r6, r5, #24
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	d501      	bpl.n	800641c <_printf_i+0x1c0>
 8006418:	6019      	str	r1, [r3, #0]
 800641a:	e002      	b.n	8006422 <_printf_i+0x1c6>
 800641c:	0668      	lsls	r0, r5, #25
 800641e:	d5fb      	bpl.n	8006418 <_printf_i+0x1bc>
 8006420:	8019      	strh	r1, [r3, #0]
 8006422:	2300      	movs	r3, #0
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	4616      	mov	r6, r2
 8006428:	e7bc      	b.n	80063a4 <_printf_i+0x148>
 800642a:	6833      	ldr	r3, [r6, #0]
 800642c:	1d1a      	adds	r2, r3, #4
 800642e:	6032      	str	r2, [r6, #0]
 8006430:	681e      	ldr	r6, [r3, #0]
 8006432:	6862      	ldr	r2, [r4, #4]
 8006434:	2100      	movs	r1, #0
 8006436:	4630      	mov	r0, r6
 8006438:	f7f9 fed2 	bl	80001e0 <memchr>
 800643c:	b108      	cbz	r0, 8006442 <_printf_i+0x1e6>
 800643e:	1b80      	subs	r0, r0, r6
 8006440:	6060      	str	r0, [r4, #4]
 8006442:	6863      	ldr	r3, [r4, #4]
 8006444:	6123      	str	r3, [r4, #16]
 8006446:	2300      	movs	r3, #0
 8006448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800644c:	e7aa      	b.n	80063a4 <_printf_i+0x148>
 800644e:	6923      	ldr	r3, [r4, #16]
 8006450:	4632      	mov	r2, r6
 8006452:	4649      	mov	r1, r9
 8006454:	4640      	mov	r0, r8
 8006456:	47d0      	blx	sl
 8006458:	3001      	adds	r0, #1
 800645a:	d0ad      	beq.n	80063b8 <_printf_i+0x15c>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	079b      	lsls	r3, r3, #30
 8006460:	d413      	bmi.n	800648a <_printf_i+0x22e>
 8006462:	68e0      	ldr	r0, [r4, #12]
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	4298      	cmp	r0, r3
 8006468:	bfb8      	it	lt
 800646a:	4618      	movlt	r0, r3
 800646c:	e7a6      	b.n	80063bc <_printf_i+0x160>
 800646e:	2301      	movs	r3, #1
 8006470:	4632      	mov	r2, r6
 8006472:	4649      	mov	r1, r9
 8006474:	4640      	mov	r0, r8
 8006476:	47d0      	blx	sl
 8006478:	3001      	adds	r0, #1
 800647a:	d09d      	beq.n	80063b8 <_printf_i+0x15c>
 800647c:	3501      	adds	r5, #1
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	9903      	ldr	r1, [sp, #12]
 8006482:	1a5b      	subs	r3, r3, r1
 8006484:	42ab      	cmp	r3, r5
 8006486:	dcf2      	bgt.n	800646e <_printf_i+0x212>
 8006488:	e7eb      	b.n	8006462 <_printf_i+0x206>
 800648a:	2500      	movs	r5, #0
 800648c:	f104 0619 	add.w	r6, r4, #25
 8006490:	e7f5      	b.n	800647e <_printf_i+0x222>
 8006492:	bf00      	nop
 8006494:	0800979a 	.word	0x0800979a
 8006498:	080097ab 	.word	0x080097ab

0800649c <std>:
 800649c:	2300      	movs	r3, #0
 800649e:	b510      	push	{r4, lr}
 80064a0:	4604      	mov	r4, r0
 80064a2:	e9c0 3300 	strd	r3, r3, [r0]
 80064a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064aa:	6083      	str	r3, [r0, #8]
 80064ac:	8181      	strh	r1, [r0, #12]
 80064ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80064b0:	81c2      	strh	r2, [r0, #14]
 80064b2:	6183      	str	r3, [r0, #24]
 80064b4:	4619      	mov	r1, r3
 80064b6:	2208      	movs	r2, #8
 80064b8:	305c      	adds	r0, #92	@ 0x5c
 80064ba:	f000 f914 	bl	80066e6 <memset>
 80064be:	4b0d      	ldr	r3, [pc, #52]	@ (80064f4 <std+0x58>)
 80064c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80064c2:	4b0d      	ldr	r3, [pc, #52]	@ (80064f8 <std+0x5c>)
 80064c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064c6:	4b0d      	ldr	r3, [pc, #52]	@ (80064fc <std+0x60>)
 80064c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <std+0x64>)
 80064cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80064ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006504 <std+0x68>)
 80064d0:	6224      	str	r4, [r4, #32]
 80064d2:	429c      	cmp	r4, r3
 80064d4:	d006      	beq.n	80064e4 <std+0x48>
 80064d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064da:	4294      	cmp	r4, r2
 80064dc:	d002      	beq.n	80064e4 <std+0x48>
 80064de:	33d0      	adds	r3, #208	@ 0xd0
 80064e0:	429c      	cmp	r4, r3
 80064e2:	d105      	bne.n	80064f0 <std+0x54>
 80064e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ec:	f000 b978 	b.w	80067e0 <__retarget_lock_init_recursive>
 80064f0:	bd10      	pop	{r4, pc}
 80064f2:	bf00      	nop
 80064f4:	08006661 	.word	0x08006661
 80064f8:	08006683 	.word	0x08006683
 80064fc:	080066bb 	.word	0x080066bb
 8006500:	080066df 	.word	0x080066df
 8006504:	200004cc 	.word	0x200004cc

08006508 <stdio_exit_handler>:
 8006508:	4a02      	ldr	r2, [pc, #8]	@ (8006514 <stdio_exit_handler+0xc>)
 800650a:	4903      	ldr	r1, [pc, #12]	@ (8006518 <stdio_exit_handler+0x10>)
 800650c:	4803      	ldr	r0, [pc, #12]	@ (800651c <stdio_exit_handler+0x14>)
 800650e:	f000 b869 	b.w	80065e4 <_fwalk_sglue>
 8006512:	bf00      	nop
 8006514:	20000010 	.word	0x20000010
 8006518:	0800813d 	.word	0x0800813d
 800651c:	20000020 	.word	0x20000020

08006520 <cleanup_stdio>:
 8006520:	6841      	ldr	r1, [r0, #4]
 8006522:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <cleanup_stdio+0x34>)
 8006524:	4299      	cmp	r1, r3
 8006526:	b510      	push	{r4, lr}
 8006528:	4604      	mov	r4, r0
 800652a:	d001      	beq.n	8006530 <cleanup_stdio+0x10>
 800652c:	f001 fe06 	bl	800813c <_fflush_r>
 8006530:	68a1      	ldr	r1, [r4, #8]
 8006532:	4b09      	ldr	r3, [pc, #36]	@ (8006558 <cleanup_stdio+0x38>)
 8006534:	4299      	cmp	r1, r3
 8006536:	d002      	beq.n	800653e <cleanup_stdio+0x1e>
 8006538:	4620      	mov	r0, r4
 800653a:	f001 fdff 	bl	800813c <_fflush_r>
 800653e:	68e1      	ldr	r1, [r4, #12]
 8006540:	4b06      	ldr	r3, [pc, #24]	@ (800655c <cleanup_stdio+0x3c>)
 8006542:	4299      	cmp	r1, r3
 8006544:	d004      	beq.n	8006550 <cleanup_stdio+0x30>
 8006546:	4620      	mov	r0, r4
 8006548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800654c:	f001 bdf6 	b.w	800813c <_fflush_r>
 8006550:	bd10      	pop	{r4, pc}
 8006552:	bf00      	nop
 8006554:	200004cc 	.word	0x200004cc
 8006558:	20000534 	.word	0x20000534
 800655c:	2000059c 	.word	0x2000059c

08006560 <global_stdio_init.part.0>:
 8006560:	b510      	push	{r4, lr}
 8006562:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <global_stdio_init.part.0+0x30>)
 8006564:	4c0b      	ldr	r4, [pc, #44]	@ (8006594 <global_stdio_init.part.0+0x34>)
 8006566:	4a0c      	ldr	r2, [pc, #48]	@ (8006598 <global_stdio_init.part.0+0x38>)
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	4620      	mov	r0, r4
 800656c:	2200      	movs	r2, #0
 800656e:	2104      	movs	r1, #4
 8006570:	f7ff ff94 	bl	800649c <std>
 8006574:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006578:	2201      	movs	r2, #1
 800657a:	2109      	movs	r1, #9
 800657c:	f7ff ff8e 	bl	800649c <std>
 8006580:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006584:	2202      	movs	r2, #2
 8006586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800658a:	2112      	movs	r1, #18
 800658c:	f7ff bf86 	b.w	800649c <std>
 8006590:	20000604 	.word	0x20000604
 8006594:	200004cc 	.word	0x200004cc
 8006598:	08006509 	.word	0x08006509

0800659c <__sfp_lock_acquire>:
 800659c:	4801      	ldr	r0, [pc, #4]	@ (80065a4 <__sfp_lock_acquire+0x8>)
 800659e:	f000 b920 	b.w	80067e2 <__retarget_lock_acquire_recursive>
 80065a2:	bf00      	nop
 80065a4:	2000060d 	.word	0x2000060d

080065a8 <__sfp_lock_release>:
 80065a8:	4801      	ldr	r0, [pc, #4]	@ (80065b0 <__sfp_lock_release+0x8>)
 80065aa:	f000 b91b 	b.w	80067e4 <__retarget_lock_release_recursive>
 80065ae:	bf00      	nop
 80065b0:	2000060d 	.word	0x2000060d

080065b4 <__sinit>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4604      	mov	r4, r0
 80065b8:	f7ff fff0 	bl	800659c <__sfp_lock_acquire>
 80065bc:	6a23      	ldr	r3, [r4, #32]
 80065be:	b11b      	cbz	r3, 80065c8 <__sinit+0x14>
 80065c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c4:	f7ff bff0 	b.w	80065a8 <__sfp_lock_release>
 80065c8:	4b04      	ldr	r3, [pc, #16]	@ (80065dc <__sinit+0x28>)
 80065ca:	6223      	str	r3, [r4, #32]
 80065cc:	4b04      	ldr	r3, [pc, #16]	@ (80065e0 <__sinit+0x2c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1f5      	bne.n	80065c0 <__sinit+0xc>
 80065d4:	f7ff ffc4 	bl	8006560 <global_stdio_init.part.0>
 80065d8:	e7f2      	b.n	80065c0 <__sinit+0xc>
 80065da:	bf00      	nop
 80065dc:	08006521 	.word	0x08006521
 80065e0:	20000604 	.word	0x20000604

080065e4 <_fwalk_sglue>:
 80065e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e8:	4607      	mov	r7, r0
 80065ea:	4688      	mov	r8, r1
 80065ec:	4614      	mov	r4, r2
 80065ee:	2600      	movs	r6, #0
 80065f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065f4:	f1b9 0901 	subs.w	r9, r9, #1
 80065f8:	d505      	bpl.n	8006606 <_fwalk_sglue+0x22>
 80065fa:	6824      	ldr	r4, [r4, #0]
 80065fc:	2c00      	cmp	r4, #0
 80065fe:	d1f7      	bne.n	80065f0 <_fwalk_sglue+0xc>
 8006600:	4630      	mov	r0, r6
 8006602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006606:	89ab      	ldrh	r3, [r5, #12]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d907      	bls.n	800661c <_fwalk_sglue+0x38>
 800660c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006610:	3301      	adds	r3, #1
 8006612:	d003      	beq.n	800661c <_fwalk_sglue+0x38>
 8006614:	4629      	mov	r1, r5
 8006616:	4638      	mov	r0, r7
 8006618:	47c0      	blx	r8
 800661a:	4306      	orrs	r6, r0
 800661c:	3568      	adds	r5, #104	@ 0x68
 800661e:	e7e9      	b.n	80065f4 <_fwalk_sglue+0x10>

08006620 <siprintf>:
 8006620:	b40e      	push	{r1, r2, r3}
 8006622:	b500      	push	{lr}
 8006624:	b09c      	sub	sp, #112	@ 0x70
 8006626:	ab1d      	add	r3, sp, #116	@ 0x74
 8006628:	9002      	str	r0, [sp, #8]
 800662a:	9006      	str	r0, [sp, #24]
 800662c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006630:	4809      	ldr	r0, [pc, #36]	@ (8006658 <siprintf+0x38>)
 8006632:	9107      	str	r1, [sp, #28]
 8006634:	9104      	str	r1, [sp, #16]
 8006636:	4909      	ldr	r1, [pc, #36]	@ (800665c <siprintf+0x3c>)
 8006638:	f853 2b04 	ldr.w	r2, [r3], #4
 800663c:	9105      	str	r1, [sp, #20]
 800663e:	6800      	ldr	r0, [r0, #0]
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	a902      	add	r1, sp, #8
 8006644:	f001 fbfa 	bl	8007e3c <_svfiprintf_r>
 8006648:	9b02      	ldr	r3, [sp, #8]
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	b01c      	add	sp, #112	@ 0x70
 8006650:	f85d eb04 	ldr.w	lr, [sp], #4
 8006654:	b003      	add	sp, #12
 8006656:	4770      	bx	lr
 8006658:	2000001c 	.word	0x2000001c
 800665c:	ffff0208 	.word	0xffff0208

08006660 <__sread>:
 8006660:	b510      	push	{r4, lr}
 8006662:	460c      	mov	r4, r1
 8006664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006668:	f000 f86c 	bl	8006744 <_read_r>
 800666c:	2800      	cmp	r0, #0
 800666e:	bfab      	itete	ge
 8006670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006672:	89a3      	ldrhlt	r3, [r4, #12]
 8006674:	181b      	addge	r3, r3, r0
 8006676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800667a:	bfac      	ite	ge
 800667c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800667e:	81a3      	strhlt	r3, [r4, #12]
 8006680:	bd10      	pop	{r4, pc}

08006682 <__swrite>:
 8006682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006686:	461f      	mov	r7, r3
 8006688:	898b      	ldrh	r3, [r1, #12]
 800668a:	05db      	lsls	r3, r3, #23
 800668c:	4605      	mov	r5, r0
 800668e:	460c      	mov	r4, r1
 8006690:	4616      	mov	r6, r2
 8006692:	d505      	bpl.n	80066a0 <__swrite+0x1e>
 8006694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006698:	2302      	movs	r3, #2
 800669a:	2200      	movs	r2, #0
 800669c:	f000 f840 	bl	8006720 <_lseek_r>
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066aa:	81a3      	strh	r3, [r4, #12]
 80066ac:	4632      	mov	r2, r6
 80066ae:	463b      	mov	r3, r7
 80066b0:	4628      	mov	r0, r5
 80066b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066b6:	f000 b857 	b.w	8006768 <_write_r>

080066ba <__sseek>:
 80066ba:	b510      	push	{r4, lr}
 80066bc:	460c      	mov	r4, r1
 80066be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c2:	f000 f82d 	bl	8006720 <_lseek_r>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	bf15      	itete	ne
 80066cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066d6:	81a3      	strheq	r3, [r4, #12]
 80066d8:	bf18      	it	ne
 80066da:	81a3      	strhne	r3, [r4, #12]
 80066dc:	bd10      	pop	{r4, pc}

080066de <__sclose>:
 80066de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e2:	f000 b80d 	b.w	8006700 <_close_r>

080066e6 <memset>:
 80066e6:	4402      	add	r2, r0
 80066e8:	4603      	mov	r3, r0
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d100      	bne.n	80066f0 <memset+0xa>
 80066ee:	4770      	bx	lr
 80066f0:	f803 1b01 	strb.w	r1, [r3], #1
 80066f4:	e7f9      	b.n	80066ea <memset+0x4>
	...

080066f8 <_localeconv_r>:
 80066f8:	4800      	ldr	r0, [pc, #0]	@ (80066fc <_localeconv_r+0x4>)
 80066fa:	4770      	bx	lr
 80066fc:	2000015c 	.word	0x2000015c

08006700 <_close_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d06      	ldr	r5, [pc, #24]	@ (800671c <_close_r+0x1c>)
 8006704:	2300      	movs	r3, #0
 8006706:	4604      	mov	r4, r0
 8006708:	4608      	mov	r0, r1
 800670a:	602b      	str	r3, [r5, #0]
 800670c:	f7fb fe8a 	bl	8002424 <_close>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_close_r+0x1a>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_close_r+0x1a>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20000608 	.word	0x20000608

08006720 <_lseek_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4d07      	ldr	r5, [pc, #28]	@ (8006740 <_lseek_r+0x20>)
 8006724:	4604      	mov	r4, r0
 8006726:	4608      	mov	r0, r1
 8006728:	4611      	mov	r1, r2
 800672a:	2200      	movs	r2, #0
 800672c:	602a      	str	r2, [r5, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	f7fb fe9f 	bl	8002472 <_lseek>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d102      	bne.n	800673e <_lseek_r+0x1e>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	b103      	cbz	r3, 800673e <_lseek_r+0x1e>
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	20000608 	.word	0x20000608

08006744 <_read_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4d07      	ldr	r5, [pc, #28]	@ (8006764 <_read_r+0x20>)
 8006748:	4604      	mov	r4, r0
 800674a:	4608      	mov	r0, r1
 800674c:	4611      	mov	r1, r2
 800674e:	2200      	movs	r2, #0
 8006750:	602a      	str	r2, [r5, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	f7fb fe2d 	bl	80023b2 <_read>
 8006758:	1c43      	adds	r3, r0, #1
 800675a:	d102      	bne.n	8006762 <_read_r+0x1e>
 800675c:	682b      	ldr	r3, [r5, #0]
 800675e:	b103      	cbz	r3, 8006762 <_read_r+0x1e>
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	20000608 	.word	0x20000608

08006768 <_write_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d07      	ldr	r5, [pc, #28]	@ (8006788 <_write_r+0x20>)
 800676c:	4604      	mov	r4, r0
 800676e:	4608      	mov	r0, r1
 8006770:	4611      	mov	r1, r2
 8006772:	2200      	movs	r2, #0
 8006774:	602a      	str	r2, [r5, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	f7fb fe38 	bl	80023ec <_write>
 800677c:	1c43      	adds	r3, r0, #1
 800677e:	d102      	bne.n	8006786 <_write_r+0x1e>
 8006780:	682b      	ldr	r3, [r5, #0]
 8006782:	b103      	cbz	r3, 8006786 <_write_r+0x1e>
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	bd38      	pop	{r3, r4, r5, pc}
 8006788:	20000608 	.word	0x20000608

0800678c <__errno>:
 800678c:	4b01      	ldr	r3, [pc, #4]	@ (8006794 <__errno+0x8>)
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	2000001c 	.word	0x2000001c

08006798 <__libc_init_array>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	4d0d      	ldr	r5, [pc, #52]	@ (80067d0 <__libc_init_array+0x38>)
 800679c:	4c0d      	ldr	r4, [pc, #52]	@ (80067d4 <__libc_init_array+0x3c>)
 800679e:	1b64      	subs	r4, r4, r5
 80067a0:	10a4      	asrs	r4, r4, #2
 80067a2:	2600      	movs	r6, #0
 80067a4:	42a6      	cmp	r6, r4
 80067a6:	d109      	bne.n	80067bc <__libc_init_array+0x24>
 80067a8:	4d0b      	ldr	r5, [pc, #44]	@ (80067d8 <__libc_init_array+0x40>)
 80067aa:	4c0c      	ldr	r4, [pc, #48]	@ (80067dc <__libc_init_array+0x44>)
 80067ac:	f002 ffc2 	bl	8009734 <_init>
 80067b0:	1b64      	subs	r4, r4, r5
 80067b2:	10a4      	asrs	r4, r4, #2
 80067b4:	2600      	movs	r6, #0
 80067b6:	42a6      	cmp	r6, r4
 80067b8:	d105      	bne.n	80067c6 <__libc_init_array+0x2e>
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
 80067bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c0:	4798      	blx	r3
 80067c2:	3601      	adds	r6, #1
 80067c4:	e7ee      	b.n	80067a4 <__libc_init_array+0xc>
 80067c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ca:	4798      	blx	r3
 80067cc:	3601      	adds	r6, #1
 80067ce:	e7f2      	b.n	80067b6 <__libc_init_array+0x1e>
 80067d0:	08009b30 	.word	0x08009b30
 80067d4:	08009b30 	.word	0x08009b30
 80067d8:	08009b30 	.word	0x08009b30
 80067dc:	08009b34 	.word	0x08009b34

080067e0 <__retarget_lock_init_recursive>:
 80067e0:	4770      	bx	lr

080067e2 <__retarget_lock_acquire_recursive>:
 80067e2:	4770      	bx	lr

080067e4 <__retarget_lock_release_recursive>:
 80067e4:	4770      	bx	lr

080067e6 <quorem>:
 80067e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ea:	6903      	ldr	r3, [r0, #16]
 80067ec:	690c      	ldr	r4, [r1, #16]
 80067ee:	42a3      	cmp	r3, r4
 80067f0:	4607      	mov	r7, r0
 80067f2:	db7e      	blt.n	80068f2 <quorem+0x10c>
 80067f4:	3c01      	subs	r4, #1
 80067f6:	f101 0814 	add.w	r8, r1, #20
 80067fa:	00a3      	lsls	r3, r4, #2
 80067fc:	f100 0514 	add.w	r5, r0, #20
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800680c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006810:	3301      	adds	r3, #1
 8006812:	429a      	cmp	r2, r3
 8006814:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006818:	fbb2 f6f3 	udiv	r6, r2, r3
 800681c:	d32e      	bcc.n	800687c <quorem+0x96>
 800681e:	f04f 0a00 	mov.w	sl, #0
 8006822:	46c4      	mov	ip, r8
 8006824:	46ae      	mov	lr, r5
 8006826:	46d3      	mov	fp, sl
 8006828:	f85c 3b04 	ldr.w	r3, [ip], #4
 800682c:	b298      	uxth	r0, r3
 800682e:	fb06 a000 	mla	r0, r6, r0, sl
 8006832:	0c02      	lsrs	r2, r0, #16
 8006834:	0c1b      	lsrs	r3, r3, #16
 8006836:	fb06 2303 	mla	r3, r6, r3, r2
 800683a:	f8de 2000 	ldr.w	r2, [lr]
 800683e:	b280      	uxth	r0, r0
 8006840:	b292      	uxth	r2, r2
 8006842:	1a12      	subs	r2, r2, r0
 8006844:	445a      	add	r2, fp
 8006846:	f8de 0000 	ldr.w	r0, [lr]
 800684a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800684e:	b29b      	uxth	r3, r3
 8006850:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006854:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006858:	b292      	uxth	r2, r2
 800685a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800685e:	45e1      	cmp	r9, ip
 8006860:	f84e 2b04 	str.w	r2, [lr], #4
 8006864:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006868:	d2de      	bcs.n	8006828 <quorem+0x42>
 800686a:	9b00      	ldr	r3, [sp, #0]
 800686c:	58eb      	ldr	r3, [r5, r3]
 800686e:	b92b      	cbnz	r3, 800687c <quorem+0x96>
 8006870:	9b01      	ldr	r3, [sp, #4]
 8006872:	3b04      	subs	r3, #4
 8006874:	429d      	cmp	r5, r3
 8006876:	461a      	mov	r2, r3
 8006878:	d32f      	bcc.n	80068da <quorem+0xf4>
 800687a:	613c      	str	r4, [r7, #16]
 800687c:	4638      	mov	r0, r7
 800687e:	f001 f979 	bl	8007b74 <__mcmp>
 8006882:	2800      	cmp	r0, #0
 8006884:	db25      	blt.n	80068d2 <quorem+0xec>
 8006886:	4629      	mov	r1, r5
 8006888:	2000      	movs	r0, #0
 800688a:	f858 2b04 	ldr.w	r2, [r8], #4
 800688e:	f8d1 c000 	ldr.w	ip, [r1]
 8006892:	fa1f fe82 	uxth.w	lr, r2
 8006896:	fa1f f38c 	uxth.w	r3, ip
 800689a:	eba3 030e 	sub.w	r3, r3, lr
 800689e:	4403      	add	r3, r0
 80068a0:	0c12      	lsrs	r2, r2, #16
 80068a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b0:	45c1      	cmp	r9, r8
 80068b2:	f841 3b04 	str.w	r3, [r1], #4
 80068b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068ba:	d2e6      	bcs.n	800688a <quorem+0xa4>
 80068bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068c4:	b922      	cbnz	r2, 80068d0 <quorem+0xea>
 80068c6:	3b04      	subs	r3, #4
 80068c8:	429d      	cmp	r5, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	d30b      	bcc.n	80068e6 <quorem+0x100>
 80068ce:	613c      	str	r4, [r7, #16]
 80068d0:	3601      	adds	r6, #1
 80068d2:	4630      	mov	r0, r6
 80068d4:	b003      	add	sp, #12
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	3b04      	subs	r3, #4
 80068de:	2a00      	cmp	r2, #0
 80068e0:	d1cb      	bne.n	800687a <quorem+0x94>
 80068e2:	3c01      	subs	r4, #1
 80068e4:	e7c6      	b.n	8006874 <quorem+0x8e>
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	3b04      	subs	r3, #4
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	d1ef      	bne.n	80068ce <quorem+0xe8>
 80068ee:	3c01      	subs	r4, #1
 80068f0:	e7ea      	b.n	80068c8 <quorem+0xe2>
 80068f2:	2000      	movs	r0, #0
 80068f4:	e7ee      	b.n	80068d4 <quorem+0xee>
	...

080068f8 <_dtoa_r>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	69c7      	ldr	r7, [r0, #28]
 80068fe:	b099      	sub	sp, #100	@ 0x64
 8006900:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006904:	ec55 4b10 	vmov	r4, r5, d0
 8006908:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800690a:	9109      	str	r1, [sp, #36]	@ 0x24
 800690c:	4683      	mov	fp, r0
 800690e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006910:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006912:	b97f      	cbnz	r7, 8006934 <_dtoa_r+0x3c>
 8006914:	2010      	movs	r0, #16
 8006916:	f000 fdfd 	bl	8007514 <malloc>
 800691a:	4602      	mov	r2, r0
 800691c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006920:	b920      	cbnz	r0, 800692c <_dtoa_r+0x34>
 8006922:	4ba7      	ldr	r3, [pc, #668]	@ (8006bc0 <_dtoa_r+0x2c8>)
 8006924:	21ef      	movs	r1, #239	@ 0xef
 8006926:	48a7      	ldr	r0, [pc, #668]	@ (8006bc4 <_dtoa_r+0x2cc>)
 8006928:	f001 fc68 	bl	80081fc <__assert_func>
 800692c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006930:	6007      	str	r7, [r0, #0]
 8006932:	60c7      	str	r7, [r0, #12]
 8006934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006938:	6819      	ldr	r1, [r3, #0]
 800693a:	b159      	cbz	r1, 8006954 <_dtoa_r+0x5c>
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	604a      	str	r2, [r1, #4]
 8006940:	2301      	movs	r3, #1
 8006942:	4093      	lsls	r3, r2
 8006944:	608b      	str	r3, [r1, #8]
 8006946:	4658      	mov	r0, fp
 8006948:	f000 feda 	bl	8007700 <_Bfree>
 800694c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	1e2b      	subs	r3, r5, #0
 8006956:	bfb9      	ittee	lt
 8006958:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800695c:	9303      	strlt	r3, [sp, #12]
 800695e:	2300      	movge	r3, #0
 8006960:	6033      	strge	r3, [r6, #0]
 8006962:	9f03      	ldr	r7, [sp, #12]
 8006964:	4b98      	ldr	r3, [pc, #608]	@ (8006bc8 <_dtoa_r+0x2d0>)
 8006966:	bfbc      	itt	lt
 8006968:	2201      	movlt	r2, #1
 800696a:	6032      	strlt	r2, [r6, #0]
 800696c:	43bb      	bics	r3, r7
 800696e:	d112      	bne.n	8006996 <_dtoa_r+0x9e>
 8006970:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006972:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800697c:	4323      	orrs	r3, r4
 800697e:	f000 854d 	beq.w	800741c <_dtoa_r+0xb24>
 8006982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006984:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006bdc <_dtoa_r+0x2e4>
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 854f 	beq.w	800742c <_dtoa_r+0xb34>
 800698e:	f10a 0303 	add.w	r3, sl, #3
 8006992:	f000 bd49 	b.w	8007428 <_dtoa_r+0xb30>
 8006996:	ed9d 7b02 	vldr	d7, [sp, #8]
 800699a:	2200      	movs	r2, #0
 800699c:	ec51 0b17 	vmov	r0, r1, d7
 80069a0:	2300      	movs	r3, #0
 80069a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80069a6:	f7fa f897 	bl	8000ad8 <__aeabi_dcmpeq>
 80069aa:	4680      	mov	r8, r0
 80069ac:	b158      	cbz	r0, 80069c6 <_dtoa_r+0xce>
 80069ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069b0:	2301      	movs	r3, #1
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069b6:	b113      	cbz	r3, 80069be <_dtoa_r+0xc6>
 80069b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069ba:	4b84      	ldr	r3, [pc, #528]	@ (8006bcc <_dtoa_r+0x2d4>)
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006be0 <_dtoa_r+0x2e8>
 80069c2:	f000 bd33 	b.w	800742c <_dtoa_r+0xb34>
 80069c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80069ca:	aa16      	add	r2, sp, #88	@ 0x58
 80069cc:	a917      	add	r1, sp, #92	@ 0x5c
 80069ce:	4658      	mov	r0, fp
 80069d0:	f001 f980 	bl	8007cd4 <__d2b>
 80069d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80069d8:	4681      	mov	r9, r0
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d077      	beq.n	8006ace <_dtoa_r+0x1d6>
 80069de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80069e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069f8:	4619      	mov	r1, r3
 80069fa:	2200      	movs	r2, #0
 80069fc:	4b74      	ldr	r3, [pc, #464]	@ (8006bd0 <_dtoa_r+0x2d8>)
 80069fe:	f7f9 fc4b 	bl	8000298 <__aeabi_dsub>
 8006a02:	a369      	add	r3, pc, #420	@ (adr r3, 8006ba8 <_dtoa_r+0x2b0>)
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	f7f9 fdfe 	bl	8000608 <__aeabi_dmul>
 8006a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8006bb0 <_dtoa_r+0x2b8>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fc43 	bl	800029c <__adddf3>
 8006a16:	4604      	mov	r4, r0
 8006a18:	4630      	mov	r0, r6
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	f7f9 fd8a 	bl	8000534 <__aeabi_i2d>
 8006a20:	a365      	add	r3, pc, #404	@ (adr r3, 8006bb8 <_dtoa_r+0x2c0>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f7f9 fdef 	bl	8000608 <__aeabi_dmul>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4620      	mov	r0, r4
 8006a30:	4629      	mov	r1, r5
 8006a32:	f7f9 fc33 	bl	800029c <__adddf3>
 8006a36:	4604      	mov	r4, r0
 8006a38:	460d      	mov	r5, r1
 8006a3a:	f7fa f895 	bl	8000b68 <__aeabi_d2iz>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	4607      	mov	r7, r0
 8006a42:	2300      	movs	r3, #0
 8006a44:	4620      	mov	r0, r4
 8006a46:	4629      	mov	r1, r5
 8006a48:	f7fa f850 	bl	8000aec <__aeabi_dcmplt>
 8006a4c:	b140      	cbz	r0, 8006a60 <_dtoa_r+0x168>
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f7f9 fd70 	bl	8000534 <__aeabi_i2d>
 8006a54:	4622      	mov	r2, r4
 8006a56:	462b      	mov	r3, r5
 8006a58:	f7fa f83e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a5c:	b900      	cbnz	r0, 8006a60 <_dtoa_r+0x168>
 8006a5e:	3f01      	subs	r7, #1
 8006a60:	2f16      	cmp	r7, #22
 8006a62:	d851      	bhi.n	8006b08 <_dtoa_r+0x210>
 8006a64:	4b5b      	ldr	r3, [pc, #364]	@ (8006bd4 <_dtoa_r+0x2dc>)
 8006a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a72:	f7fa f83b 	bl	8000aec <__aeabi_dcmplt>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d048      	beq.n	8006b0c <_dtoa_r+0x214>
 8006a7a:	3f01      	subs	r7, #1
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a82:	1b9b      	subs	r3, r3, r6
 8006a84:	1e5a      	subs	r2, r3, #1
 8006a86:	bf44      	itt	mi
 8006a88:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a8c:	2300      	movmi	r3, #0
 8006a8e:	9208      	str	r2, [sp, #32]
 8006a90:	bf54      	ite	pl
 8006a92:	f04f 0800 	movpl.w	r8, #0
 8006a96:	9308      	strmi	r3, [sp, #32]
 8006a98:	2f00      	cmp	r7, #0
 8006a9a:	db39      	blt.n	8006b10 <_dtoa_r+0x218>
 8006a9c:	9b08      	ldr	r3, [sp, #32]
 8006a9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006aa0:	443b      	add	r3, r7
 8006aa2:	9308      	str	r3, [sp, #32]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aaa:	2b09      	cmp	r3, #9
 8006aac:	d864      	bhi.n	8006b78 <_dtoa_r+0x280>
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	bfc4      	itt	gt
 8006ab2:	3b04      	subgt	r3, #4
 8006ab4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab8:	f1a3 0302 	sub.w	r3, r3, #2
 8006abc:	bfcc      	ite	gt
 8006abe:	2400      	movgt	r4, #0
 8006ac0:	2401      	movle	r4, #1
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d863      	bhi.n	8006b8e <_dtoa_r+0x296>
 8006ac6:	e8df f003 	tbb	[pc, r3]
 8006aca:	372a      	.short	0x372a
 8006acc:	5535      	.short	0x5535
 8006ace:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006ad2:	441e      	add	r6, r3
 8006ad4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	bfc1      	itttt	gt
 8006adc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ae0:	409f      	lslgt	r7, r3
 8006ae2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ae6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006aea:	bfd6      	itet	le
 8006aec:	f1c3 0320 	rsble	r3, r3, #32
 8006af0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006af4:	fa04 f003 	lslle.w	r0, r4, r3
 8006af8:	f7f9 fd0c 	bl	8000514 <__aeabi_ui2d>
 8006afc:	2201      	movs	r2, #1
 8006afe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b02:	3e01      	subs	r6, #1
 8006b04:	9214      	str	r2, [sp, #80]	@ 0x50
 8006b06:	e777      	b.n	80069f8 <_dtoa_r+0x100>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e7b8      	b.n	8006a7e <_dtoa_r+0x186>
 8006b0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006b0e:	e7b7      	b.n	8006a80 <_dtoa_r+0x188>
 8006b10:	427b      	negs	r3, r7
 8006b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b14:	2300      	movs	r3, #0
 8006b16:	eba8 0807 	sub.w	r8, r8, r7
 8006b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b1c:	e7c4      	b.n	8006aa8 <_dtoa_r+0x1b0>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	dc35      	bgt.n	8006b94 <_dtoa_r+0x29c>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	9307      	str	r3, [sp, #28]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b32:	e00b      	b.n	8006b4c <_dtoa_r+0x254>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e7f3      	b.n	8006b20 <_dtoa_r+0x228>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	3301      	adds	r3, #1
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	9307      	str	r3, [sp, #28]
 8006b48:	bfb8      	it	lt
 8006b4a:	2301      	movlt	r3, #1
 8006b4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b50:	2100      	movs	r1, #0
 8006b52:	2204      	movs	r2, #4
 8006b54:	f102 0514 	add.w	r5, r2, #20
 8006b58:	429d      	cmp	r5, r3
 8006b5a:	d91f      	bls.n	8006b9c <_dtoa_r+0x2a4>
 8006b5c:	6041      	str	r1, [r0, #4]
 8006b5e:	4658      	mov	r0, fp
 8006b60:	f000 fd8e 	bl	8007680 <_Balloc>
 8006b64:	4682      	mov	sl, r0
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d13c      	bne.n	8006be4 <_dtoa_r+0x2ec>
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd8 <_dtoa_r+0x2e0>)
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b72:	e6d8      	b.n	8006926 <_dtoa_r+0x2e>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e7e0      	b.n	8006b3a <_dtoa_r+0x242>
 8006b78:	2401      	movs	r4, #1
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b80:	f04f 33ff 	mov.w	r3, #4294967295
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2312      	movs	r3, #18
 8006b8c:	e7d0      	b.n	8006b30 <_dtoa_r+0x238>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b92:	e7f5      	b.n	8006b80 <_dtoa_r+0x288>
 8006b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	9307      	str	r3, [sp, #28]
 8006b9a:	e7d7      	b.n	8006b4c <_dtoa_r+0x254>
 8006b9c:	3101      	adds	r1, #1
 8006b9e:	0052      	lsls	r2, r2, #1
 8006ba0:	e7d8      	b.n	8006b54 <_dtoa_r+0x25c>
 8006ba2:	bf00      	nop
 8006ba4:	f3af 8000 	nop.w
 8006ba8:	636f4361 	.word	0x636f4361
 8006bac:	3fd287a7 	.word	0x3fd287a7
 8006bb0:	8b60c8b3 	.word	0x8b60c8b3
 8006bb4:	3fc68a28 	.word	0x3fc68a28
 8006bb8:	509f79fb 	.word	0x509f79fb
 8006bbc:	3fd34413 	.word	0x3fd34413
 8006bc0:	080097c9 	.word	0x080097c9
 8006bc4:	080097e0 	.word	0x080097e0
 8006bc8:	7ff00000 	.word	0x7ff00000
 8006bcc:	08009799 	.word	0x08009799
 8006bd0:	3ff80000 	.word	0x3ff80000
 8006bd4:	080098d8 	.word	0x080098d8
 8006bd8:	08009838 	.word	0x08009838
 8006bdc:	080097c5 	.word	0x080097c5
 8006be0:	08009798 	.word	0x08009798
 8006be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006be8:	6018      	str	r0, [r3, #0]
 8006bea:	9b07      	ldr	r3, [sp, #28]
 8006bec:	2b0e      	cmp	r3, #14
 8006bee:	f200 80a4 	bhi.w	8006d3a <_dtoa_r+0x442>
 8006bf2:	2c00      	cmp	r4, #0
 8006bf4:	f000 80a1 	beq.w	8006d3a <_dtoa_r+0x442>
 8006bf8:	2f00      	cmp	r7, #0
 8006bfa:	dd33      	ble.n	8006c64 <_dtoa_r+0x36c>
 8006bfc:	4bad      	ldr	r3, [pc, #692]	@ (8006eb4 <_dtoa_r+0x5bc>)
 8006bfe:	f007 020f 	and.w	r2, r7, #15
 8006c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c06:	ed93 7b00 	vldr	d7, [r3]
 8006c0a:	05f8      	lsls	r0, r7, #23
 8006c0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c14:	d516      	bpl.n	8006c44 <_dtoa_r+0x34c>
 8006c16:	4ba8      	ldr	r3, [pc, #672]	@ (8006eb8 <_dtoa_r+0x5c0>)
 8006c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c20:	f7f9 fe1c 	bl	800085c <__aeabi_ddiv>
 8006c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c28:	f004 040f 	and.w	r4, r4, #15
 8006c2c:	2603      	movs	r6, #3
 8006c2e:	4da2      	ldr	r5, [pc, #648]	@ (8006eb8 <_dtoa_r+0x5c0>)
 8006c30:	b954      	cbnz	r4, 8006c48 <_dtoa_r+0x350>
 8006c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c3a:	f7f9 fe0f 	bl	800085c <__aeabi_ddiv>
 8006c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c42:	e028      	b.n	8006c96 <_dtoa_r+0x39e>
 8006c44:	2602      	movs	r6, #2
 8006c46:	e7f2      	b.n	8006c2e <_dtoa_r+0x336>
 8006c48:	07e1      	lsls	r1, r4, #31
 8006c4a:	d508      	bpl.n	8006c5e <_dtoa_r+0x366>
 8006c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c54:	f7f9 fcd8 	bl	8000608 <__aeabi_dmul>
 8006c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	1064      	asrs	r4, r4, #1
 8006c60:	3508      	adds	r5, #8
 8006c62:	e7e5      	b.n	8006c30 <_dtoa_r+0x338>
 8006c64:	f000 80d2 	beq.w	8006e0c <_dtoa_r+0x514>
 8006c68:	427c      	negs	r4, r7
 8006c6a:	4b92      	ldr	r3, [pc, #584]	@ (8006eb4 <_dtoa_r+0x5bc>)
 8006c6c:	4d92      	ldr	r5, [pc, #584]	@ (8006eb8 <_dtoa_r+0x5c0>)
 8006c6e:	f004 020f 	and.w	r2, r4, #15
 8006c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c7e:	f7f9 fcc3 	bl	8000608 <__aeabi_dmul>
 8006c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c86:	1124      	asrs	r4, r4, #4
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2602      	movs	r6, #2
 8006c8c:	2c00      	cmp	r4, #0
 8006c8e:	f040 80b2 	bne.w	8006df6 <_dtoa_r+0x4fe>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1d3      	bne.n	8006c3e <_dtoa_r+0x346>
 8006c96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80b7 	beq.w	8006e10 <_dtoa_r+0x518>
 8006ca2:	4b86      	ldr	r3, [pc, #536]	@ (8006ebc <_dtoa_r+0x5c4>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f7f9 ff1f 	bl	8000aec <__aeabi_dcmplt>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f000 80ae 	beq.w	8006e10 <_dtoa_r+0x518>
 8006cb4:	9b07      	ldr	r3, [sp, #28]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 80aa 	beq.w	8006e10 <_dtoa_r+0x518>
 8006cbc:	9b00      	ldr	r3, [sp, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd37      	ble.n	8006d32 <_dtoa_r+0x43a>
 8006cc2:	1e7b      	subs	r3, r7, #1
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8006ec0 <_dtoa_r+0x5c8>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	4629      	mov	r1, r5
 8006cce:	f7f9 fc9b 	bl	8000608 <__aeabi_dmul>
 8006cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd6:	9c00      	ldr	r4, [sp, #0]
 8006cd8:	3601      	adds	r6, #1
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7f9 fc2a 	bl	8000534 <__aeabi_i2d>
 8006ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ce4:	f7f9 fc90 	bl	8000608 <__aeabi_dmul>
 8006ce8:	4b76      	ldr	r3, [pc, #472]	@ (8006ec4 <_dtoa_r+0x5cc>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	f7f9 fad6 	bl	800029c <__adddf3>
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cf6:	2c00      	cmp	r4, #0
 8006cf8:	f040 808d 	bne.w	8006e16 <_dtoa_r+0x51e>
 8006cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d00:	4b71      	ldr	r3, [pc, #452]	@ (8006ec8 <_dtoa_r+0x5d0>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	f7f9 fac8 	bl	8000298 <__aeabi_dsub>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d10:	462a      	mov	r2, r5
 8006d12:	4633      	mov	r3, r6
 8006d14:	f7f9 ff08 	bl	8000b28 <__aeabi_dcmpgt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	f040 828b 	bne.w	8007234 <_dtoa_r+0x93c>
 8006d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d22:	462a      	mov	r2, r5
 8006d24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d28:	f7f9 fee0 	bl	8000aec <__aeabi_dcmplt>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f040 8128 	bne.w	8006f82 <_dtoa_r+0x68a>
 8006d32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f2c0 815a 	blt.w	8006ff6 <_dtoa_r+0x6fe>
 8006d42:	2f0e      	cmp	r7, #14
 8006d44:	f300 8157 	bgt.w	8006ff6 <_dtoa_r+0x6fe>
 8006d48:	4b5a      	ldr	r3, [pc, #360]	@ (8006eb4 <_dtoa_r+0x5bc>)
 8006d4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d4e:	ed93 7b00 	vldr	d7, [r3]
 8006d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	ed8d 7b00 	vstr	d7, [sp]
 8006d5a:	da03      	bge.n	8006d64 <_dtoa_r+0x46c>
 8006d5c:	9b07      	ldr	r3, [sp, #28]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f340 8101 	ble.w	8006f66 <_dtoa_r+0x66e>
 8006d64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d68:	4656      	mov	r6, sl
 8006d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d6e:	4620      	mov	r0, r4
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7f9 fd73 	bl	800085c <__aeabi_ddiv>
 8006d76:	f7f9 fef7 	bl	8000b68 <__aeabi_d2iz>
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	f7f9 fbda 	bl	8000534 <__aeabi_i2d>
 8006d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d84:	f7f9 fc40 	bl	8000608 <__aeabi_dmul>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d94:	f7f9 fa80 	bl	8000298 <__aeabi_dsub>
 8006d98:	f806 4b01 	strb.w	r4, [r6], #1
 8006d9c:	9d07      	ldr	r5, [sp, #28]
 8006d9e:	eba6 040a 	sub.w	r4, r6, sl
 8006da2:	42a5      	cmp	r5, r4
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	f040 8117 	bne.w	8006fda <_dtoa_r+0x6e2>
 8006dac:	f7f9 fa76 	bl	800029c <__adddf3>
 8006db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	f7f9 feb6 	bl	8000b28 <__aeabi_dcmpgt>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f040 80f9 	bne.w	8006fb4 <_dtoa_r+0x6bc>
 8006dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dce:	b118      	cbz	r0, 8006dd8 <_dtoa_r+0x4e0>
 8006dd0:	f018 0f01 	tst.w	r8, #1
 8006dd4:	f040 80ee 	bne.w	8006fb4 <_dtoa_r+0x6bc>
 8006dd8:	4649      	mov	r1, r9
 8006dda:	4658      	mov	r0, fp
 8006ddc:	f000 fc90 	bl	8007700 <_Bfree>
 8006de0:	2300      	movs	r3, #0
 8006de2:	7033      	strb	r3, [r6, #0]
 8006de4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006de6:	3701      	adds	r7, #1
 8006de8:	601f      	str	r7, [r3, #0]
 8006dea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 831d 	beq.w	800742c <_dtoa_r+0xb34>
 8006df2:	601e      	str	r6, [r3, #0]
 8006df4:	e31a      	b.n	800742c <_dtoa_r+0xb34>
 8006df6:	07e2      	lsls	r2, r4, #31
 8006df8:	d505      	bpl.n	8006e06 <_dtoa_r+0x50e>
 8006dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dfe:	f7f9 fc03 	bl	8000608 <__aeabi_dmul>
 8006e02:	3601      	adds	r6, #1
 8006e04:	2301      	movs	r3, #1
 8006e06:	1064      	asrs	r4, r4, #1
 8006e08:	3508      	adds	r5, #8
 8006e0a:	e73f      	b.n	8006c8c <_dtoa_r+0x394>
 8006e0c:	2602      	movs	r6, #2
 8006e0e:	e742      	b.n	8006c96 <_dtoa_r+0x39e>
 8006e10:	9c07      	ldr	r4, [sp, #28]
 8006e12:	9704      	str	r7, [sp, #16]
 8006e14:	e761      	b.n	8006cda <_dtoa_r+0x3e2>
 8006e16:	4b27      	ldr	r3, [pc, #156]	@ (8006eb4 <_dtoa_r+0x5bc>)
 8006e18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e22:	4454      	add	r4, sl
 8006e24:	2900      	cmp	r1, #0
 8006e26:	d053      	beq.n	8006ed0 <_dtoa_r+0x5d8>
 8006e28:	4928      	ldr	r1, [pc, #160]	@ (8006ecc <_dtoa_r+0x5d4>)
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	f7f9 fd16 	bl	800085c <__aeabi_ddiv>
 8006e30:	4633      	mov	r3, r6
 8006e32:	462a      	mov	r2, r5
 8006e34:	f7f9 fa30 	bl	8000298 <__aeabi_dsub>
 8006e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e3c:	4656      	mov	r6, sl
 8006e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e42:	f7f9 fe91 	bl	8000b68 <__aeabi_d2iz>
 8006e46:	4605      	mov	r5, r0
 8006e48:	f7f9 fb74 	bl	8000534 <__aeabi_i2d>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e54:	f7f9 fa20 	bl	8000298 <__aeabi_dsub>
 8006e58:	3530      	adds	r5, #48	@ 0x30
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e62:	f806 5b01 	strb.w	r5, [r6], #1
 8006e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e6a:	f7f9 fe3f 	bl	8000aec <__aeabi_dcmplt>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d171      	bne.n	8006f56 <_dtoa_r+0x65e>
 8006e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e76:	4911      	ldr	r1, [pc, #68]	@ (8006ebc <_dtoa_r+0x5c4>)
 8006e78:	2000      	movs	r0, #0
 8006e7a:	f7f9 fa0d 	bl	8000298 <__aeabi_dsub>
 8006e7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e82:	f7f9 fe33 	bl	8000aec <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	f040 8095 	bne.w	8006fb6 <_dtoa_r+0x6be>
 8006e8c:	42a6      	cmp	r6, r4
 8006e8e:	f43f af50 	beq.w	8006d32 <_dtoa_r+0x43a>
 8006e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e96:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec0 <_dtoa_r+0x5c8>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f7f9 fbb5 	bl	8000608 <__aeabi_dmul>
 8006e9e:	4b08      	ldr	r3, [pc, #32]	@ (8006ec0 <_dtoa_r+0x5c8>)
 8006ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eaa:	f7f9 fbad 	bl	8000608 <__aeabi_dmul>
 8006eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb2:	e7c4      	b.n	8006e3e <_dtoa_r+0x546>
 8006eb4:	080098d8 	.word	0x080098d8
 8006eb8:	080098b0 	.word	0x080098b0
 8006ebc:	3ff00000 	.word	0x3ff00000
 8006ec0:	40240000 	.word	0x40240000
 8006ec4:	401c0000 	.word	0x401c0000
 8006ec8:	40140000 	.word	0x40140000
 8006ecc:	3fe00000 	.word	0x3fe00000
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7f9 fb98 	bl	8000608 <__aeabi_dmul>
 8006ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006edc:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ede:	4656      	mov	r6, sl
 8006ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ee4:	f7f9 fe40 	bl	8000b68 <__aeabi_d2iz>
 8006ee8:	4605      	mov	r5, r0
 8006eea:	f7f9 fb23 	bl	8000534 <__aeabi_i2d>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef6:	f7f9 f9cf 	bl	8000298 <__aeabi_dsub>
 8006efa:	3530      	adds	r5, #48	@ 0x30
 8006efc:	f806 5b01 	strb.w	r5, [r6], #1
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	42a6      	cmp	r6, r4
 8006f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f0a:	f04f 0200 	mov.w	r2, #0
 8006f0e:	d124      	bne.n	8006f5a <_dtoa_r+0x662>
 8006f10:	4bac      	ldr	r3, [pc, #688]	@ (80071c4 <_dtoa_r+0x8cc>)
 8006f12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f16:	f7f9 f9c1 	bl	800029c <__adddf3>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f22:	f7f9 fe01 	bl	8000b28 <__aeabi_dcmpgt>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d145      	bne.n	8006fb6 <_dtoa_r+0x6be>
 8006f2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f2e:	49a5      	ldr	r1, [pc, #660]	@ (80071c4 <_dtoa_r+0x8cc>)
 8006f30:	2000      	movs	r0, #0
 8006f32:	f7f9 f9b1 	bl	8000298 <__aeabi_dsub>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f3e:	f7f9 fdd5 	bl	8000aec <__aeabi_dcmplt>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	f43f aef5 	beq.w	8006d32 <_dtoa_r+0x43a>
 8006f48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006f4a:	1e73      	subs	r3, r6, #1
 8006f4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f52:	2b30      	cmp	r3, #48	@ 0x30
 8006f54:	d0f8      	beq.n	8006f48 <_dtoa_r+0x650>
 8006f56:	9f04      	ldr	r7, [sp, #16]
 8006f58:	e73e      	b.n	8006dd8 <_dtoa_r+0x4e0>
 8006f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80071c8 <_dtoa_r+0x8d0>)
 8006f5c:	f7f9 fb54 	bl	8000608 <__aeabi_dmul>
 8006f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f64:	e7bc      	b.n	8006ee0 <_dtoa_r+0x5e8>
 8006f66:	d10c      	bne.n	8006f82 <_dtoa_r+0x68a>
 8006f68:	4b98      	ldr	r3, [pc, #608]	@ (80071cc <_dtoa_r+0x8d4>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f70:	f7f9 fb4a 	bl	8000608 <__aeabi_dmul>
 8006f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f78:	f7f9 fdcc 	bl	8000b14 <__aeabi_dcmpge>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	f000 8157 	beq.w	8007230 <_dtoa_r+0x938>
 8006f82:	2400      	movs	r4, #0
 8006f84:	4625      	mov	r5, r4
 8006f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f88:	43db      	mvns	r3, r3
 8006f8a:	9304      	str	r3, [sp, #16]
 8006f8c:	4656      	mov	r6, sl
 8006f8e:	2700      	movs	r7, #0
 8006f90:	4621      	mov	r1, r4
 8006f92:	4658      	mov	r0, fp
 8006f94:	f000 fbb4 	bl	8007700 <_Bfree>
 8006f98:	2d00      	cmp	r5, #0
 8006f9a:	d0dc      	beq.n	8006f56 <_dtoa_r+0x65e>
 8006f9c:	b12f      	cbz	r7, 8006faa <_dtoa_r+0x6b2>
 8006f9e:	42af      	cmp	r7, r5
 8006fa0:	d003      	beq.n	8006faa <_dtoa_r+0x6b2>
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	4658      	mov	r0, fp
 8006fa6:	f000 fbab 	bl	8007700 <_Bfree>
 8006faa:	4629      	mov	r1, r5
 8006fac:	4658      	mov	r0, fp
 8006fae:	f000 fba7 	bl	8007700 <_Bfree>
 8006fb2:	e7d0      	b.n	8006f56 <_dtoa_r+0x65e>
 8006fb4:	9704      	str	r7, [sp, #16]
 8006fb6:	4633      	mov	r3, r6
 8006fb8:	461e      	mov	r6, r3
 8006fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fbe:	2a39      	cmp	r2, #57	@ 0x39
 8006fc0:	d107      	bne.n	8006fd2 <_dtoa_r+0x6da>
 8006fc2:	459a      	cmp	sl, r3
 8006fc4:	d1f8      	bne.n	8006fb8 <_dtoa_r+0x6c0>
 8006fc6:	9a04      	ldr	r2, [sp, #16]
 8006fc8:	3201      	adds	r2, #1
 8006fca:	9204      	str	r2, [sp, #16]
 8006fcc:	2230      	movs	r2, #48	@ 0x30
 8006fce:	f88a 2000 	strb.w	r2, [sl]
 8006fd2:	781a      	ldrb	r2, [r3, #0]
 8006fd4:	3201      	adds	r2, #1
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e7bd      	b.n	8006f56 <_dtoa_r+0x65e>
 8006fda:	4b7b      	ldr	r3, [pc, #492]	@ (80071c8 <_dtoa_r+0x8d0>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f7f9 fb13 	bl	8000608 <__aeabi_dmul>
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	460d      	mov	r5, r1
 8006fea:	f7f9 fd75 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f43f aebb 	beq.w	8006d6a <_dtoa_r+0x472>
 8006ff4:	e6f0      	b.n	8006dd8 <_dtoa_r+0x4e0>
 8006ff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ff8:	2a00      	cmp	r2, #0
 8006ffa:	f000 80db 	beq.w	80071b4 <_dtoa_r+0x8bc>
 8006ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007000:	2a01      	cmp	r2, #1
 8007002:	f300 80bf 	bgt.w	8007184 <_dtoa_r+0x88c>
 8007006:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007008:	2a00      	cmp	r2, #0
 800700a:	f000 80b7 	beq.w	800717c <_dtoa_r+0x884>
 800700e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007012:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007014:	4646      	mov	r6, r8
 8007016:	9a08      	ldr	r2, [sp, #32]
 8007018:	2101      	movs	r1, #1
 800701a:	441a      	add	r2, r3
 800701c:	4658      	mov	r0, fp
 800701e:	4498      	add	r8, r3
 8007020:	9208      	str	r2, [sp, #32]
 8007022:	f000 fc21 	bl	8007868 <__i2b>
 8007026:	4605      	mov	r5, r0
 8007028:	b15e      	cbz	r6, 8007042 <_dtoa_r+0x74a>
 800702a:	9b08      	ldr	r3, [sp, #32]
 800702c:	2b00      	cmp	r3, #0
 800702e:	dd08      	ble.n	8007042 <_dtoa_r+0x74a>
 8007030:	42b3      	cmp	r3, r6
 8007032:	9a08      	ldr	r2, [sp, #32]
 8007034:	bfa8      	it	ge
 8007036:	4633      	movge	r3, r6
 8007038:	eba8 0803 	sub.w	r8, r8, r3
 800703c:	1af6      	subs	r6, r6, r3
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	9308      	str	r3, [sp, #32]
 8007042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007044:	b1f3      	cbz	r3, 8007084 <_dtoa_r+0x78c>
 8007046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80b7 	beq.w	80071bc <_dtoa_r+0x8c4>
 800704e:	b18c      	cbz	r4, 8007074 <_dtoa_r+0x77c>
 8007050:	4629      	mov	r1, r5
 8007052:	4622      	mov	r2, r4
 8007054:	4658      	mov	r0, fp
 8007056:	f000 fcc7 	bl	80079e8 <__pow5mult>
 800705a:	464a      	mov	r2, r9
 800705c:	4601      	mov	r1, r0
 800705e:	4605      	mov	r5, r0
 8007060:	4658      	mov	r0, fp
 8007062:	f000 fc17 	bl	8007894 <__multiply>
 8007066:	4649      	mov	r1, r9
 8007068:	9004      	str	r0, [sp, #16]
 800706a:	4658      	mov	r0, fp
 800706c:	f000 fb48 	bl	8007700 <_Bfree>
 8007070:	9b04      	ldr	r3, [sp, #16]
 8007072:	4699      	mov	r9, r3
 8007074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007076:	1b1a      	subs	r2, r3, r4
 8007078:	d004      	beq.n	8007084 <_dtoa_r+0x78c>
 800707a:	4649      	mov	r1, r9
 800707c:	4658      	mov	r0, fp
 800707e:	f000 fcb3 	bl	80079e8 <__pow5mult>
 8007082:	4681      	mov	r9, r0
 8007084:	2101      	movs	r1, #1
 8007086:	4658      	mov	r0, fp
 8007088:	f000 fbee 	bl	8007868 <__i2b>
 800708c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800708e:	4604      	mov	r4, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 81cf 	beq.w	8007434 <_dtoa_r+0xb3c>
 8007096:	461a      	mov	r2, r3
 8007098:	4601      	mov	r1, r0
 800709a:	4658      	mov	r0, fp
 800709c:	f000 fca4 	bl	80079e8 <__pow5mult>
 80070a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	4604      	mov	r4, r0
 80070a6:	f300 8095 	bgt.w	80071d4 <_dtoa_r+0x8dc>
 80070aa:	9b02      	ldr	r3, [sp, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f040 8087 	bne.w	80071c0 <_dtoa_r+0x8c8>
 80070b2:	9b03      	ldr	r3, [sp, #12]
 80070b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f040 8089 	bne.w	80071d0 <_dtoa_r+0x8d8>
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070c4:	0d1b      	lsrs	r3, r3, #20
 80070c6:	051b      	lsls	r3, r3, #20
 80070c8:	b12b      	cbz	r3, 80070d6 <_dtoa_r+0x7de>
 80070ca:	9b08      	ldr	r3, [sp, #32]
 80070cc:	3301      	adds	r3, #1
 80070ce:	9308      	str	r3, [sp, #32]
 80070d0:	f108 0801 	add.w	r8, r8, #1
 80070d4:	2301      	movs	r3, #1
 80070d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 81b0 	beq.w	8007440 <_dtoa_r+0xb48>
 80070e0:	6923      	ldr	r3, [r4, #16]
 80070e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070e6:	6918      	ldr	r0, [r3, #16]
 80070e8:	f000 fb72 	bl	80077d0 <__hi0bits>
 80070ec:	f1c0 0020 	rsb	r0, r0, #32
 80070f0:	9b08      	ldr	r3, [sp, #32]
 80070f2:	4418      	add	r0, r3
 80070f4:	f010 001f 	ands.w	r0, r0, #31
 80070f8:	d077      	beq.n	80071ea <_dtoa_r+0x8f2>
 80070fa:	f1c0 0320 	rsb	r3, r0, #32
 80070fe:	2b04      	cmp	r3, #4
 8007100:	dd6b      	ble.n	80071da <_dtoa_r+0x8e2>
 8007102:	9b08      	ldr	r3, [sp, #32]
 8007104:	f1c0 001c 	rsb	r0, r0, #28
 8007108:	4403      	add	r3, r0
 800710a:	4480      	add	r8, r0
 800710c:	4406      	add	r6, r0
 800710e:	9308      	str	r3, [sp, #32]
 8007110:	f1b8 0f00 	cmp.w	r8, #0
 8007114:	dd05      	ble.n	8007122 <_dtoa_r+0x82a>
 8007116:	4649      	mov	r1, r9
 8007118:	4642      	mov	r2, r8
 800711a:	4658      	mov	r0, fp
 800711c:	f000 fcbe 	bl	8007a9c <__lshift>
 8007120:	4681      	mov	r9, r0
 8007122:	9b08      	ldr	r3, [sp, #32]
 8007124:	2b00      	cmp	r3, #0
 8007126:	dd05      	ble.n	8007134 <_dtoa_r+0x83c>
 8007128:	4621      	mov	r1, r4
 800712a:	461a      	mov	r2, r3
 800712c:	4658      	mov	r0, fp
 800712e:	f000 fcb5 	bl	8007a9c <__lshift>
 8007132:	4604      	mov	r4, r0
 8007134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007136:	2b00      	cmp	r3, #0
 8007138:	d059      	beq.n	80071ee <_dtoa_r+0x8f6>
 800713a:	4621      	mov	r1, r4
 800713c:	4648      	mov	r0, r9
 800713e:	f000 fd19 	bl	8007b74 <__mcmp>
 8007142:	2800      	cmp	r0, #0
 8007144:	da53      	bge.n	80071ee <_dtoa_r+0x8f6>
 8007146:	1e7b      	subs	r3, r7, #1
 8007148:	9304      	str	r3, [sp, #16]
 800714a:	4649      	mov	r1, r9
 800714c:	2300      	movs	r3, #0
 800714e:	220a      	movs	r2, #10
 8007150:	4658      	mov	r0, fp
 8007152:	f000 faf7 	bl	8007744 <__multadd>
 8007156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007158:	4681      	mov	r9, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 8172 	beq.w	8007444 <_dtoa_r+0xb4c>
 8007160:	2300      	movs	r3, #0
 8007162:	4629      	mov	r1, r5
 8007164:	220a      	movs	r2, #10
 8007166:	4658      	mov	r0, fp
 8007168:	f000 faec 	bl	8007744 <__multadd>
 800716c:	9b00      	ldr	r3, [sp, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	4605      	mov	r5, r0
 8007172:	dc67      	bgt.n	8007244 <_dtoa_r+0x94c>
 8007174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007176:	2b02      	cmp	r3, #2
 8007178:	dc41      	bgt.n	80071fe <_dtoa_r+0x906>
 800717a:	e063      	b.n	8007244 <_dtoa_r+0x94c>
 800717c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800717e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007182:	e746      	b.n	8007012 <_dtoa_r+0x71a>
 8007184:	9b07      	ldr	r3, [sp, #28]
 8007186:	1e5c      	subs	r4, r3, #1
 8007188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800718a:	42a3      	cmp	r3, r4
 800718c:	bfbf      	itttt	lt
 800718e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007190:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007192:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007194:	1ae3      	sublt	r3, r4, r3
 8007196:	bfb4      	ite	lt
 8007198:	18d2      	addlt	r2, r2, r3
 800719a:	1b1c      	subge	r4, r3, r4
 800719c:	9b07      	ldr	r3, [sp, #28]
 800719e:	bfbc      	itt	lt
 80071a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80071a2:	2400      	movlt	r4, #0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	bfb5      	itete	lt
 80071a8:	eba8 0603 	sublt.w	r6, r8, r3
 80071ac:	9b07      	ldrge	r3, [sp, #28]
 80071ae:	2300      	movlt	r3, #0
 80071b0:	4646      	movge	r6, r8
 80071b2:	e730      	b.n	8007016 <_dtoa_r+0x71e>
 80071b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071b8:	4646      	mov	r6, r8
 80071ba:	e735      	b.n	8007028 <_dtoa_r+0x730>
 80071bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071be:	e75c      	b.n	800707a <_dtoa_r+0x782>
 80071c0:	2300      	movs	r3, #0
 80071c2:	e788      	b.n	80070d6 <_dtoa_r+0x7de>
 80071c4:	3fe00000 	.word	0x3fe00000
 80071c8:	40240000 	.word	0x40240000
 80071cc:	40140000 	.word	0x40140000
 80071d0:	9b02      	ldr	r3, [sp, #8]
 80071d2:	e780      	b.n	80070d6 <_dtoa_r+0x7de>
 80071d4:	2300      	movs	r3, #0
 80071d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80071d8:	e782      	b.n	80070e0 <_dtoa_r+0x7e8>
 80071da:	d099      	beq.n	8007110 <_dtoa_r+0x818>
 80071dc:	9a08      	ldr	r2, [sp, #32]
 80071de:	331c      	adds	r3, #28
 80071e0:	441a      	add	r2, r3
 80071e2:	4498      	add	r8, r3
 80071e4:	441e      	add	r6, r3
 80071e6:	9208      	str	r2, [sp, #32]
 80071e8:	e792      	b.n	8007110 <_dtoa_r+0x818>
 80071ea:	4603      	mov	r3, r0
 80071ec:	e7f6      	b.n	80071dc <_dtoa_r+0x8e4>
 80071ee:	9b07      	ldr	r3, [sp, #28]
 80071f0:	9704      	str	r7, [sp, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	dc20      	bgt.n	8007238 <_dtoa_r+0x940>
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	dd1e      	ble.n	800723c <_dtoa_r+0x944>
 80071fe:	9b00      	ldr	r3, [sp, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f47f aec0 	bne.w	8006f86 <_dtoa_r+0x68e>
 8007206:	4621      	mov	r1, r4
 8007208:	2205      	movs	r2, #5
 800720a:	4658      	mov	r0, fp
 800720c:	f000 fa9a 	bl	8007744 <__multadd>
 8007210:	4601      	mov	r1, r0
 8007212:	4604      	mov	r4, r0
 8007214:	4648      	mov	r0, r9
 8007216:	f000 fcad 	bl	8007b74 <__mcmp>
 800721a:	2800      	cmp	r0, #0
 800721c:	f77f aeb3 	ble.w	8006f86 <_dtoa_r+0x68e>
 8007220:	4656      	mov	r6, sl
 8007222:	2331      	movs	r3, #49	@ 0x31
 8007224:	f806 3b01 	strb.w	r3, [r6], #1
 8007228:	9b04      	ldr	r3, [sp, #16]
 800722a:	3301      	adds	r3, #1
 800722c:	9304      	str	r3, [sp, #16]
 800722e:	e6ae      	b.n	8006f8e <_dtoa_r+0x696>
 8007230:	9c07      	ldr	r4, [sp, #28]
 8007232:	9704      	str	r7, [sp, #16]
 8007234:	4625      	mov	r5, r4
 8007236:	e7f3      	b.n	8007220 <_dtoa_r+0x928>
 8007238:	9b07      	ldr	r3, [sp, #28]
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8104 	beq.w	800744c <_dtoa_r+0xb54>
 8007244:	2e00      	cmp	r6, #0
 8007246:	dd05      	ble.n	8007254 <_dtoa_r+0x95c>
 8007248:	4629      	mov	r1, r5
 800724a:	4632      	mov	r2, r6
 800724c:	4658      	mov	r0, fp
 800724e:	f000 fc25 	bl	8007a9c <__lshift>
 8007252:	4605      	mov	r5, r0
 8007254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d05a      	beq.n	8007310 <_dtoa_r+0xa18>
 800725a:	6869      	ldr	r1, [r5, #4]
 800725c:	4658      	mov	r0, fp
 800725e:	f000 fa0f 	bl	8007680 <_Balloc>
 8007262:	4606      	mov	r6, r0
 8007264:	b928      	cbnz	r0, 8007272 <_dtoa_r+0x97a>
 8007266:	4b84      	ldr	r3, [pc, #528]	@ (8007478 <_dtoa_r+0xb80>)
 8007268:	4602      	mov	r2, r0
 800726a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800726e:	f7ff bb5a 	b.w	8006926 <_dtoa_r+0x2e>
 8007272:	692a      	ldr	r2, [r5, #16]
 8007274:	3202      	adds	r2, #2
 8007276:	0092      	lsls	r2, r2, #2
 8007278:	f105 010c 	add.w	r1, r5, #12
 800727c:	300c      	adds	r0, #12
 800727e:	f000 ffaf 	bl	80081e0 <memcpy>
 8007282:	2201      	movs	r2, #1
 8007284:	4631      	mov	r1, r6
 8007286:	4658      	mov	r0, fp
 8007288:	f000 fc08 	bl	8007a9c <__lshift>
 800728c:	f10a 0301 	add.w	r3, sl, #1
 8007290:	9307      	str	r3, [sp, #28]
 8007292:	9b00      	ldr	r3, [sp, #0]
 8007294:	4453      	add	r3, sl
 8007296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007298:	9b02      	ldr	r3, [sp, #8]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	462f      	mov	r7, r5
 80072a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072a2:	4605      	mov	r5, r0
 80072a4:	9b07      	ldr	r3, [sp, #28]
 80072a6:	4621      	mov	r1, r4
 80072a8:	3b01      	subs	r3, #1
 80072aa:	4648      	mov	r0, r9
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	f7ff fa9a 	bl	80067e6 <quorem>
 80072b2:	4639      	mov	r1, r7
 80072b4:	9002      	str	r0, [sp, #8]
 80072b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072ba:	4648      	mov	r0, r9
 80072bc:	f000 fc5a 	bl	8007b74 <__mcmp>
 80072c0:	462a      	mov	r2, r5
 80072c2:	9008      	str	r0, [sp, #32]
 80072c4:	4621      	mov	r1, r4
 80072c6:	4658      	mov	r0, fp
 80072c8:	f000 fc70 	bl	8007bac <__mdiff>
 80072cc:	68c2      	ldr	r2, [r0, #12]
 80072ce:	4606      	mov	r6, r0
 80072d0:	bb02      	cbnz	r2, 8007314 <_dtoa_r+0xa1c>
 80072d2:	4601      	mov	r1, r0
 80072d4:	4648      	mov	r0, r9
 80072d6:	f000 fc4d 	bl	8007b74 <__mcmp>
 80072da:	4602      	mov	r2, r0
 80072dc:	4631      	mov	r1, r6
 80072de:	4658      	mov	r0, fp
 80072e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80072e2:	f000 fa0d 	bl	8007700 <_Bfree>
 80072e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072ea:	9e07      	ldr	r6, [sp, #28]
 80072ec:	ea43 0102 	orr.w	r1, r3, r2
 80072f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072f2:	4319      	orrs	r1, r3
 80072f4:	d110      	bne.n	8007318 <_dtoa_r+0xa20>
 80072f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072fa:	d029      	beq.n	8007350 <_dtoa_r+0xa58>
 80072fc:	9b08      	ldr	r3, [sp, #32]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	dd02      	ble.n	8007308 <_dtoa_r+0xa10>
 8007302:	9b02      	ldr	r3, [sp, #8]
 8007304:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007308:	9b00      	ldr	r3, [sp, #0]
 800730a:	f883 8000 	strb.w	r8, [r3]
 800730e:	e63f      	b.n	8006f90 <_dtoa_r+0x698>
 8007310:	4628      	mov	r0, r5
 8007312:	e7bb      	b.n	800728c <_dtoa_r+0x994>
 8007314:	2201      	movs	r2, #1
 8007316:	e7e1      	b.n	80072dc <_dtoa_r+0x9e4>
 8007318:	9b08      	ldr	r3, [sp, #32]
 800731a:	2b00      	cmp	r3, #0
 800731c:	db04      	blt.n	8007328 <_dtoa_r+0xa30>
 800731e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007320:	430b      	orrs	r3, r1
 8007322:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007324:	430b      	orrs	r3, r1
 8007326:	d120      	bne.n	800736a <_dtoa_r+0xa72>
 8007328:	2a00      	cmp	r2, #0
 800732a:	dded      	ble.n	8007308 <_dtoa_r+0xa10>
 800732c:	4649      	mov	r1, r9
 800732e:	2201      	movs	r2, #1
 8007330:	4658      	mov	r0, fp
 8007332:	f000 fbb3 	bl	8007a9c <__lshift>
 8007336:	4621      	mov	r1, r4
 8007338:	4681      	mov	r9, r0
 800733a:	f000 fc1b 	bl	8007b74 <__mcmp>
 800733e:	2800      	cmp	r0, #0
 8007340:	dc03      	bgt.n	800734a <_dtoa_r+0xa52>
 8007342:	d1e1      	bne.n	8007308 <_dtoa_r+0xa10>
 8007344:	f018 0f01 	tst.w	r8, #1
 8007348:	d0de      	beq.n	8007308 <_dtoa_r+0xa10>
 800734a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800734e:	d1d8      	bne.n	8007302 <_dtoa_r+0xa0a>
 8007350:	9a00      	ldr	r2, [sp, #0]
 8007352:	2339      	movs	r3, #57	@ 0x39
 8007354:	7013      	strb	r3, [r2, #0]
 8007356:	4633      	mov	r3, r6
 8007358:	461e      	mov	r6, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007360:	2a39      	cmp	r2, #57	@ 0x39
 8007362:	d052      	beq.n	800740a <_dtoa_r+0xb12>
 8007364:	3201      	adds	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	e612      	b.n	8006f90 <_dtoa_r+0x698>
 800736a:	2a00      	cmp	r2, #0
 800736c:	dd07      	ble.n	800737e <_dtoa_r+0xa86>
 800736e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007372:	d0ed      	beq.n	8007350 <_dtoa_r+0xa58>
 8007374:	9a00      	ldr	r2, [sp, #0]
 8007376:	f108 0301 	add.w	r3, r8, #1
 800737a:	7013      	strb	r3, [r2, #0]
 800737c:	e608      	b.n	8006f90 <_dtoa_r+0x698>
 800737e:	9b07      	ldr	r3, [sp, #28]
 8007380:	9a07      	ldr	r2, [sp, #28]
 8007382:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007388:	4293      	cmp	r3, r2
 800738a:	d028      	beq.n	80073de <_dtoa_r+0xae6>
 800738c:	4649      	mov	r1, r9
 800738e:	2300      	movs	r3, #0
 8007390:	220a      	movs	r2, #10
 8007392:	4658      	mov	r0, fp
 8007394:	f000 f9d6 	bl	8007744 <__multadd>
 8007398:	42af      	cmp	r7, r5
 800739a:	4681      	mov	r9, r0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	f04f 020a 	mov.w	r2, #10
 80073a4:	4639      	mov	r1, r7
 80073a6:	4658      	mov	r0, fp
 80073a8:	d107      	bne.n	80073ba <_dtoa_r+0xac2>
 80073aa:	f000 f9cb 	bl	8007744 <__multadd>
 80073ae:	4607      	mov	r7, r0
 80073b0:	4605      	mov	r5, r0
 80073b2:	9b07      	ldr	r3, [sp, #28]
 80073b4:	3301      	adds	r3, #1
 80073b6:	9307      	str	r3, [sp, #28]
 80073b8:	e774      	b.n	80072a4 <_dtoa_r+0x9ac>
 80073ba:	f000 f9c3 	bl	8007744 <__multadd>
 80073be:	4629      	mov	r1, r5
 80073c0:	4607      	mov	r7, r0
 80073c2:	2300      	movs	r3, #0
 80073c4:	220a      	movs	r2, #10
 80073c6:	4658      	mov	r0, fp
 80073c8:	f000 f9bc 	bl	8007744 <__multadd>
 80073cc:	4605      	mov	r5, r0
 80073ce:	e7f0      	b.n	80073b2 <_dtoa_r+0xaba>
 80073d0:	9b00      	ldr	r3, [sp, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	bfcc      	ite	gt
 80073d6:	461e      	movgt	r6, r3
 80073d8:	2601      	movle	r6, #1
 80073da:	4456      	add	r6, sl
 80073dc:	2700      	movs	r7, #0
 80073de:	4649      	mov	r1, r9
 80073e0:	2201      	movs	r2, #1
 80073e2:	4658      	mov	r0, fp
 80073e4:	f000 fb5a 	bl	8007a9c <__lshift>
 80073e8:	4621      	mov	r1, r4
 80073ea:	4681      	mov	r9, r0
 80073ec:	f000 fbc2 	bl	8007b74 <__mcmp>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	dcb0      	bgt.n	8007356 <_dtoa_r+0xa5e>
 80073f4:	d102      	bne.n	80073fc <_dtoa_r+0xb04>
 80073f6:	f018 0f01 	tst.w	r8, #1
 80073fa:	d1ac      	bne.n	8007356 <_dtoa_r+0xa5e>
 80073fc:	4633      	mov	r3, r6
 80073fe:	461e      	mov	r6, r3
 8007400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007404:	2a30      	cmp	r2, #48	@ 0x30
 8007406:	d0fa      	beq.n	80073fe <_dtoa_r+0xb06>
 8007408:	e5c2      	b.n	8006f90 <_dtoa_r+0x698>
 800740a:	459a      	cmp	sl, r3
 800740c:	d1a4      	bne.n	8007358 <_dtoa_r+0xa60>
 800740e:	9b04      	ldr	r3, [sp, #16]
 8007410:	3301      	adds	r3, #1
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	2331      	movs	r3, #49	@ 0x31
 8007416:	f88a 3000 	strb.w	r3, [sl]
 800741a:	e5b9      	b.n	8006f90 <_dtoa_r+0x698>
 800741c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800741e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800747c <_dtoa_r+0xb84>
 8007422:	b11b      	cbz	r3, 800742c <_dtoa_r+0xb34>
 8007424:	f10a 0308 	add.w	r3, sl, #8
 8007428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	4650      	mov	r0, sl
 800742e:	b019      	add	sp, #100	@ 0x64
 8007430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007436:	2b01      	cmp	r3, #1
 8007438:	f77f ae37 	ble.w	80070aa <_dtoa_r+0x7b2>
 800743c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800743e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007440:	2001      	movs	r0, #1
 8007442:	e655      	b.n	80070f0 <_dtoa_r+0x7f8>
 8007444:	9b00      	ldr	r3, [sp, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f77f aed6 	ble.w	80071f8 <_dtoa_r+0x900>
 800744c:	4656      	mov	r6, sl
 800744e:	4621      	mov	r1, r4
 8007450:	4648      	mov	r0, r9
 8007452:	f7ff f9c8 	bl	80067e6 <quorem>
 8007456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800745a:	f806 8b01 	strb.w	r8, [r6], #1
 800745e:	9b00      	ldr	r3, [sp, #0]
 8007460:	eba6 020a 	sub.w	r2, r6, sl
 8007464:	4293      	cmp	r3, r2
 8007466:	ddb3      	ble.n	80073d0 <_dtoa_r+0xad8>
 8007468:	4649      	mov	r1, r9
 800746a:	2300      	movs	r3, #0
 800746c:	220a      	movs	r2, #10
 800746e:	4658      	mov	r0, fp
 8007470:	f000 f968 	bl	8007744 <__multadd>
 8007474:	4681      	mov	r9, r0
 8007476:	e7ea      	b.n	800744e <_dtoa_r+0xb56>
 8007478:	08009838 	.word	0x08009838
 800747c:	080097bc 	.word	0x080097bc

08007480 <_free_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4605      	mov	r5, r0
 8007484:	2900      	cmp	r1, #0
 8007486:	d041      	beq.n	800750c <_free_r+0x8c>
 8007488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800748c:	1f0c      	subs	r4, r1, #4
 800748e:	2b00      	cmp	r3, #0
 8007490:	bfb8      	it	lt
 8007492:	18e4      	addlt	r4, r4, r3
 8007494:	f000 f8e8 	bl	8007668 <__malloc_lock>
 8007498:	4a1d      	ldr	r2, [pc, #116]	@ (8007510 <_free_r+0x90>)
 800749a:	6813      	ldr	r3, [r2, #0]
 800749c:	b933      	cbnz	r3, 80074ac <_free_r+0x2c>
 800749e:	6063      	str	r3, [r4, #4]
 80074a0:	6014      	str	r4, [r2, #0]
 80074a2:	4628      	mov	r0, r5
 80074a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074a8:	f000 b8e4 	b.w	8007674 <__malloc_unlock>
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	d908      	bls.n	80074c2 <_free_r+0x42>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	1821      	adds	r1, r4, r0
 80074b4:	428b      	cmp	r3, r1
 80074b6:	bf01      	itttt	eq
 80074b8:	6819      	ldreq	r1, [r3, #0]
 80074ba:	685b      	ldreq	r3, [r3, #4]
 80074bc:	1809      	addeq	r1, r1, r0
 80074be:	6021      	streq	r1, [r4, #0]
 80074c0:	e7ed      	b.n	800749e <_free_r+0x1e>
 80074c2:	461a      	mov	r2, r3
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	b10b      	cbz	r3, 80074cc <_free_r+0x4c>
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	d9fa      	bls.n	80074c2 <_free_r+0x42>
 80074cc:	6811      	ldr	r1, [r2, #0]
 80074ce:	1850      	adds	r0, r2, r1
 80074d0:	42a0      	cmp	r0, r4
 80074d2:	d10b      	bne.n	80074ec <_free_r+0x6c>
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	4401      	add	r1, r0
 80074d8:	1850      	adds	r0, r2, r1
 80074da:	4283      	cmp	r3, r0
 80074dc:	6011      	str	r1, [r2, #0]
 80074de:	d1e0      	bne.n	80074a2 <_free_r+0x22>
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	6053      	str	r3, [r2, #4]
 80074e6:	4408      	add	r0, r1
 80074e8:	6010      	str	r0, [r2, #0]
 80074ea:	e7da      	b.n	80074a2 <_free_r+0x22>
 80074ec:	d902      	bls.n	80074f4 <_free_r+0x74>
 80074ee:	230c      	movs	r3, #12
 80074f0:	602b      	str	r3, [r5, #0]
 80074f2:	e7d6      	b.n	80074a2 <_free_r+0x22>
 80074f4:	6820      	ldr	r0, [r4, #0]
 80074f6:	1821      	adds	r1, r4, r0
 80074f8:	428b      	cmp	r3, r1
 80074fa:	bf04      	itt	eq
 80074fc:	6819      	ldreq	r1, [r3, #0]
 80074fe:	685b      	ldreq	r3, [r3, #4]
 8007500:	6063      	str	r3, [r4, #4]
 8007502:	bf04      	itt	eq
 8007504:	1809      	addeq	r1, r1, r0
 8007506:	6021      	streq	r1, [r4, #0]
 8007508:	6054      	str	r4, [r2, #4]
 800750a:	e7ca      	b.n	80074a2 <_free_r+0x22>
 800750c:	bd38      	pop	{r3, r4, r5, pc}
 800750e:	bf00      	nop
 8007510:	20000614 	.word	0x20000614

08007514 <malloc>:
 8007514:	4b02      	ldr	r3, [pc, #8]	@ (8007520 <malloc+0xc>)
 8007516:	4601      	mov	r1, r0
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	f000 b825 	b.w	8007568 <_malloc_r>
 800751e:	bf00      	nop
 8007520:	2000001c 	.word	0x2000001c

08007524 <sbrk_aligned>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	4e0f      	ldr	r6, [pc, #60]	@ (8007564 <sbrk_aligned+0x40>)
 8007528:	460c      	mov	r4, r1
 800752a:	6831      	ldr	r1, [r6, #0]
 800752c:	4605      	mov	r5, r0
 800752e:	b911      	cbnz	r1, 8007536 <sbrk_aligned+0x12>
 8007530:	f000 fe46 	bl	80081c0 <_sbrk_r>
 8007534:	6030      	str	r0, [r6, #0]
 8007536:	4621      	mov	r1, r4
 8007538:	4628      	mov	r0, r5
 800753a:	f000 fe41 	bl	80081c0 <_sbrk_r>
 800753e:	1c43      	adds	r3, r0, #1
 8007540:	d103      	bne.n	800754a <sbrk_aligned+0x26>
 8007542:	f04f 34ff 	mov.w	r4, #4294967295
 8007546:	4620      	mov	r0, r4
 8007548:	bd70      	pop	{r4, r5, r6, pc}
 800754a:	1cc4      	adds	r4, r0, #3
 800754c:	f024 0403 	bic.w	r4, r4, #3
 8007550:	42a0      	cmp	r0, r4
 8007552:	d0f8      	beq.n	8007546 <sbrk_aligned+0x22>
 8007554:	1a21      	subs	r1, r4, r0
 8007556:	4628      	mov	r0, r5
 8007558:	f000 fe32 	bl	80081c0 <_sbrk_r>
 800755c:	3001      	adds	r0, #1
 800755e:	d1f2      	bne.n	8007546 <sbrk_aligned+0x22>
 8007560:	e7ef      	b.n	8007542 <sbrk_aligned+0x1e>
 8007562:	bf00      	nop
 8007564:	20000610 	.word	0x20000610

08007568 <_malloc_r>:
 8007568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800756c:	1ccd      	adds	r5, r1, #3
 800756e:	f025 0503 	bic.w	r5, r5, #3
 8007572:	3508      	adds	r5, #8
 8007574:	2d0c      	cmp	r5, #12
 8007576:	bf38      	it	cc
 8007578:	250c      	movcc	r5, #12
 800757a:	2d00      	cmp	r5, #0
 800757c:	4606      	mov	r6, r0
 800757e:	db01      	blt.n	8007584 <_malloc_r+0x1c>
 8007580:	42a9      	cmp	r1, r5
 8007582:	d904      	bls.n	800758e <_malloc_r+0x26>
 8007584:	230c      	movs	r3, #12
 8007586:	6033      	str	r3, [r6, #0]
 8007588:	2000      	movs	r0, #0
 800758a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800758e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007664 <_malloc_r+0xfc>
 8007592:	f000 f869 	bl	8007668 <__malloc_lock>
 8007596:	f8d8 3000 	ldr.w	r3, [r8]
 800759a:	461c      	mov	r4, r3
 800759c:	bb44      	cbnz	r4, 80075f0 <_malloc_r+0x88>
 800759e:	4629      	mov	r1, r5
 80075a0:	4630      	mov	r0, r6
 80075a2:	f7ff ffbf 	bl	8007524 <sbrk_aligned>
 80075a6:	1c43      	adds	r3, r0, #1
 80075a8:	4604      	mov	r4, r0
 80075aa:	d158      	bne.n	800765e <_malloc_r+0xf6>
 80075ac:	f8d8 4000 	ldr.w	r4, [r8]
 80075b0:	4627      	mov	r7, r4
 80075b2:	2f00      	cmp	r7, #0
 80075b4:	d143      	bne.n	800763e <_malloc_r+0xd6>
 80075b6:	2c00      	cmp	r4, #0
 80075b8:	d04b      	beq.n	8007652 <_malloc_r+0xea>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	4639      	mov	r1, r7
 80075be:	4630      	mov	r0, r6
 80075c0:	eb04 0903 	add.w	r9, r4, r3
 80075c4:	f000 fdfc 	bl	80081c0 <_sbrk_r>
 80075c8:	4581      	cmp	r9, r0
 80075ca:	d142      	bne.n	8007652 <_malloc_r+0xea>
 80075cc:	6821      	ldr	r1, [r4, #0]
 80075ce:	1a6d      	subs	r5, r5, r1
 80075d0:	4629      	mov	r1, r5
 80075d2:	4630      	mov	r0, r6
 80075d4:	f7ff ffa6 	bl	8007524 <sbrk_aligned>
 80075d8:	3001      	adds	r0, #1
 80075da:	d03a      	beq.n	8007652 <_malloc_r+0xea>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	442b      	add	r3, r5
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	f8d8 3000 	ldr.w	r3, [r8]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	bb62      	cbnz	r2, 8007644 <_malloc_r+0xdc>
 80075ea:	f8c8 7000 	str.w	r7, [r8]
 80075ee:	e00f      	b.n	8007610 <_malloc_r+0xa8>
 80075f0:	6822      	ldr	r2, [r4, #0]
 80075f2:	1b52      	subs	r2, r2, r5
 80075f4:	d420      	bmi.n	8007638 <_malloc_r+0xd0>
 80075f6:	2a0b      	cmp	r2, #11
 80075f8:	d917      	bls.n	800762a <_malloc_r+0xc2>
 80075fa:	1961      	adds	r1, r4, r5
 80075fc:	42a3      	cmp	r3, r4
 80075fe:	6025      	str	r5, [r4, #0]
 8007600:	bf18      	it	ne
 8007602:	6059      	strne	r1, [r3, #4]
 8007604:	6863      	ldr	r3, [r4, #4]
 8007606:	bf08      	it	eq
 8007608:	f8c8 1000 	streq.w	r1, [r8]
 800760c:	5162      	str	r2, [r4, r5]
 800760e:	604b      	str	r3, [r1, #4]
 8007610:	4630      	mov	r0, r6
 8007612:	f000 f82f 	bl	8007674 <__malloc_unlock>
 8007616:	f104 000b 	add.w	r0, r4, #11
 800761a:	1d23      	adds	r3, r4, #4
 800761c:	f020 0007 	bic.w	r0, r0, #7
 8007620:	1ac2      	subs	r2, r0, r3
 8007622:	bf1c      	itt	ne
 8007624:	1a1b      	subne	r3, r3, r0
 8007626:	50a3      	strne	r3, [r4, r2]
 8007628:	e7af      	b.n	800758a <_malloc_r+0x22>
 800762a:	6862      	ldr	r2, [r4, #4]
 800762c:	42a3      	cmp	r3, r4
 800762e:	bf0c      	ite	eq
 8007630:	f8c8 2000 	streq.w	r2, [r8]
 8007634:	605a      	strne	r2, [r3, #4]
 8007636:	e7eb      	b.n	8007610 <_malloc_r+0xa8>
 8007638:	4623      	mov	r3, r4
 800763a:	6864      	ldr	r4, [r4, #4]
 800763c:	e7ae      	b.n	800759c <_malloc_r+0x34>
 800763e:	463c      	mov	r4, r7
 8007640:	687f      	ldr	r7, [r7, #4]
 8007642:	e7b6      	b.n	80075b2 <_malloc_r+0x4a>
 8007644:	461a      	mov	r2, r3
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	42a3      	cmp	r3, r4
 800764a:	d1fb      	bne.n	8007644 <_malloc_r+0xdc>
 800764c:	2300      	movs	r3, #0
 800764e:	6053      	str	r3, [r2, #4]
 8007650:	e7de      	b.n	8007610 <_malloc_r+0xa8>
 8007652:	230c      	movs	r3, #12
 8007654:	6033      	str	r3, [r6, #0]
 8007656:	4630      	mov	r0, r6
 8007658:	f000 f80c 	bl	8007674 <__malloc_unlock>
 800765c:	e794      	b.n	8007588 <_malloc_r+0x20>
 800765e:	6005      	str	r5, [r0, #0]
 8007660:	e7d6      	b.n	8007610 <_malloc_r+0xa8>
 8007662:	bf00      	nop
 8007664:	20000614 	.word	0x20000614

08007668 <__malloc_lock>:
 8007668:	4801      	ldr	r0, [pc, #4]	@ (8007670 <__malloc_lock+0x8>)
 800766a:	f7ff b8ba 	b.w	80067e2 <__retarget_lock_acquire_recursive>
 800766e:	bf00      	nop
 8007670:	2000060c 	.word	0x2000060c

08007674 <__malloc_unlock>:
 8007674:	4801      	ldr	r0, [pc, #4]	@ (800767c <__malloc_unlock+0x8>)
 8007676:	f7ff b8b5 	b.w	80067e4 <__retarget_lock_release_recursive>
 800767a:	bf00      	nop
 800767c:	2000060c 	.word	0x2000060c

08007680 <_Balloc>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	69c6      	ldr	r6, [r0, #28]
 8007684:	4604      	mov	r4, r0
 8007686:	460d      	mov	r5, r1
 8007688:	b976      	cbnz	r6, 80076a8 <_Balloc+0x28>
 800768a:	2010      	movs	r0, #16
 800768c:	f7ff ff42 	bl	8007514 <malloc>
 8007690:	4602      	mov	r2, r0
 8007692:	61e0      	str	r0, [r4, #28]
 8007694:	b920      	cbnz	r0, 80076a0 <_Balloc+0x20>
 8007696:	4b18      	ldr	r3, [pc, #96]	@ (80076f8 <_Balloc+0x78>)
 8007698:	4818      	ldr	r0, [pc, #96]	@ (80076fc <_Balloc+0x7c>)
 800769a:	216b      	movs	r1, #107	@ 0x6b
 800769c:	f000 fdae 	bl	80081fc <__assert_func>
 80076a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076a4:	6006      	str	r6, [r0, #0]
 80076a6:	60c6      	str	r6, [r0, #12]
 80076a8:	69e6      	ldr	r6, [r4, #28]
 80076aa:	68f3      	ldr	r3, [r6, #12]
 80076ac:	b183      	cbz	r3, 80076d0 <_Balloc+0x50>
 80076ae:	69e3      	ldr	r3, [r4, #28]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076b6:	b9b8      	cbnz	r0, 80076e8 <_Balloc+0x68>
 80076b8:	2101      	movs	r1, #1
 80076ba:	fa01 f605 	lsl.w	r6, r1, r5
 80076be:	1d72      	adds	r2, r6, #5
 80076c0:	0092      	lsls	r2, r2, #2
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 fdb8 	bl	8008238 <_calloc_r>
 80076c8:	b160      	cbz	r0, 80076e4 <_Balloc+0x64>
 80076ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076ce:	e00e      	b.n	80076ee <_Balloc+0x6e>
 80076d0:	2221      	movs	r2, #33	@ 0x21
 80076d2:	2104      	movs	r1, #4
 80076d4:	4620      	mov	r0, r4
 80076d6:	f000 fdaf 	bl	8008238 <_calloc_r>
 80076da:	69e3      	ldr	r3, [r4, #28]
 80076dc:	60f0      	str	r0, [r6, #12]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e4      	bne.n	80076ae <_Balloc+0x2e>
 80076e4:	2000      	movs	r0, #0
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	6802      	ldr	r2, [r0, #0]
 80076ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076ee:	2300      	movs	r3, #0
 80076f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076f4:	e7f7      	b.n	80076e6 <_Balloc+0x66>
 80076f6:	bf00      	nop
 80076f8:	080097c9 	.word	0x080097c9
 80076fc:	08009849 	.word	0x08009849

08007700 <_Bfree>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	69c6      	ldr	r6, [r0, #28]
 8007704:	4605      	mov	r5, r0
 8007706:	460c      	mov	r4, r1
 8007708:	b976      	cbnz	r6, 8007728 <_Bfree+0x28>
 800770a:	2010      	movs	r0, #16
 800770c:	f7ff ff02 	bl	8007514 <malloc>
 8007710:	4602      	mov	r2, r0
 8007712:	61e8      	str	r0, [r5, #28]
 8007714:	b920      	cbnz	r0, 8007720 <_Bfree+0x20>
 8007716:	4b09      	ldr	r3, [pc, #36]	@ (800773c <_Bfree+0x3c>)
 8007718:	4809      	ldr	r0, [pc, #36]	@ (8007740 <_Bfree+0x40>)
 800771a:	218f      	movs	r1, #143	@ 0x8f
 800771c:	f000 fd6e 	bl	80081fc <__assert_func>
 8007720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007724:	6006      	str	r6, [r0, #0]
 8007726:	60c6      	str	r6, [r0, #12]
 8007728:	b13c      	cbz	r4, 800773a <_Bfree+0x3a>
 800772a:	69eb      	ldr	r3, [r5, #28]
 800772c:	6862      	ldr	r2, [r4, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007734:	6021      	str	r1, [r4, #0]
 8007736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	080097c9 	.word	0x080097c9
 8007740:	08009849 	.word	0x08009849

08007744 <__multadd>:
 8007744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007748:	690d      	ldr	r5, [r1, #16]
 800774a:	4607      	mov	r7, r0
 800774c:	460c      	mov	r4, r1
 800774e:	461e      	mov	r6, r3
 8007750:	f101 0c14 	add.w	ip, r1, #20
 8007754:	2000      	movs	r0, #0
 8007756:	f8dc 3000 	ldr.w	r3, [ip]
 800775a:	b299      	uxth	r1, r3
 800775c:	fb02 6101 	mla	r1, r2, r1, r6
 8007760:	0c1e      	lsrs	r6, r3, #16
 8007762:	0c0b      	lsrs	r3, r1, #16
 8007764:	fb02 3306 	mla	r3, r2, r6, r3
 8007768:	b289      	uxth	r1, r1
 800776a:	3001      	adds	r0, #1
 800776c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007770:	4285      	cmp	r5, r0
 8007772:	f84c 1b04 	str.w	r1, [ip], #4
 8007776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800777a:	dcec      	bgt.n	8007756 <__multadd+0x12>
 800777c:	b30e      	cbz	r6, 80077c2 <__multadd+0x7e>
 800777e:	68a3      	ldr	r3, [r4, #8]
 8007780:	42ab      	cmp	r3, r5
 8007782:	dc19      	bgt.n	80077b8 <__multadd+0x74>
 8007784:	6861      	ldr	r1, [r4, #4]
 8007786:	4638      	mov	r0, r7
 8007788:	3101      	adds	r1, #1
 800778a:	f7ff ff79 	bl	8007680 <_Balloc>
 800778e:	4680      	mov	r8, r0
 8007790:	b928      	cbnz	r0, 800779e <__multadd+0x5a>
 8007792:	4602      	mov	r2, r0
 8007794:	4b0c      	ldr	r3, [pc, #48]	@ (80077c8 <__multadd+0x84>)
 8007796:	480d      	ldr	r0, [pc, #52]	@ (80077cc <__multadd+0x88>)
 8007798:	21ba      	movs	r1, #186	@ 0xba
 800779a:	f000 fd2f 	bl	80081fc <__assert_func>
 800779e:	6922      	ldr	r2, [r4, #16]
 80077a0:	3202      	adds	r2, #2
 80077a2:	f104 010c 	add.w	r1, r4, #12
 80077a6:	0092      	lsls	r2, r2, #2
 80077a8:	300c      	adds	r0, #12
 80077aa:	f000 fd19 	bl	80081e0 <memcpy>
 80077ae:	4621      	mov	r1, r4
 80077b0:	4638      	mov	r0, r7
 80077b2:	f7ff ffa5 	bl	8007700 <_Bfree>
 80077b6:	4644      	mov	r4, r8
 80077b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077bc:	3501      	adds	r5, #1
 80077be:	615e      	str	r6, [r3, #20]
 80077c0:	6125      	str	r5, [r4, #16]
 80077c2:	4620      	mov	r0, r4
 80077c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c8:	08009838 	.word	0x08009838
 80077cc:	08009849 	.word	0x08009849

080077d0 <__hi0bits>:
 80077d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077d4:	4603      	mov	r3, r0
 80077d6:	bf36      	itet	cc
 80077d8:	0403      	lslcc	r3, r0, #16
 80077da:	2000      	movcs	r0, #0
 80077dc:	2010      	movcc	r0, #16
 80077de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077e2:	bf3c      	itt	cc
 80077e4:	021b      	lslcc	r3, r3, #8
 80077e6:	3008      	addcc	r0, #8
 80077e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077ec:	bf3c      	itt	cc
 80077ee:	011b      	lslcc	r3, r3, #4
 80077f0:	3004      	addcc	r0, #4
 80077f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f6:	bf3c      	itt	cc
 80077f8:	009b      	lslcc	r3, r3, #2
 80077fa:	3002      	addcc	r0, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	db05      	blt.n	800780c <__hi0bits+0x3c>
 8007800:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007804:	f100 0001 	add.w	r0, r0, #1
 8007808:	bf08      	it	eq
 800780a:	2020      	moveq	r0, #32
 800780c:	4770      	bx	lr

0800780e <__lo0bits>:
 800780e:	6803      	ldr	r3, [r0, #0]
 8007810:	4602      	mov	r2, r0
 8007812:	f013 0007 	ands.w	r0, r3, #7
 8007816:	d00b      	beq.n	8007830 <__lo0bits+0x22>
 8007818:	07d9      	lsls	r1, r3, #31
 800781a:	d421      	bmi.n	8007860 <__lo0bits+0x52>
 800781c:	0798      	lsls	r0, r3, #30
 800781e:	bf49      	itett	mi
 8007820:	085b      	lsrmi	r3, r3, #1
 8007822:	089b      	lsrpl	r3, r3, #2
 8007824:	2001      	movmi	r0, #1
 8007826:	6013      	strmi	r3, [r2, #0]
 8007828:	bf5c      	itt	pl
 800782a:	6013      	strpl	r3, [r2, #0]
 800782c:	2002      	movpl	r0, #2
 800782e:	4770      	bx	lr
 8007830:	b299      	uxth	r1, r3
 8007832:	b909      	cbnz	r1, 8007838 <__lo0bits+0x2a>
 8007834:	0c1b      	lsrs	r3, r3, #16
 8007836:	2010      	movs	r0, #16
 8007838:	b2d9      	uxtb	r1, r3
 800783a:	b909      	cbnz	r1, 8007840 <__lo0bits+0x32>
 800783c:	3008      	adds	r0, #8
 800783e:	0a1b      	lsrs	r3, r3, #8
 8007840:	0719      	lsls	r1, r3, #28
 8007842:	bf04      	itt	eq
 8007844:	091b      	lsreq	r3, r3, #4
 8007846:	3004      	addeq	r0, #4
 8007848:	0799      	lsls	r1, r3, #30
 800784a:	bf04      	itt	eq
 800784c:	089b      	lsreq	r3, r3, #2
 800784e:	3002      	addeq	r0, #2
 8007850:	07d9      	lsls	r1, r3, #31
 8007852:	d403      	bmi.n	800785c <__lo0bits+0x4e>
 8007854:	085b      	lsrs	r3, r3, #1
 8007856:	f100 0001 	add.w	r0, r0, #1
 800785a:	d003      	beq.n	8007864 <__lo0bits+0x56>
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	4770      	bx	lr
 8007860:	2000      	movs	r0, #0
 8007862:	4770      	bx	lr
 8007864:	2020      	movs	r0, #32
 8007866:	4770      	bx	lr

08007868 <__i2b>:
 8007868:	b510      	push	{r4, lr}
 800786a:	460c      	mov	r4, r1
 800786c:	2101      	movs	r1, #1
 800786e:	f7ff ff07 	bl	8007680 <_Balloc>
 8007872:	4602      	mov	r2, r0
 8007874:	b928      	cbnz	r0, 8007882 <__i2b+0x1a>
 8007876:	4b05      	ldr	r3, [pc, #20]	@ (800788c <__i2b+0x24>)
 8007878:	4805      	ldr	r0, [pc, #20]	@ (8007890 <__i2b+0x28>)
 800787a:	f240 1145 	movw	r1, #325	@ 0x145
 800787e:	f000 fcbd 	bl	80081fc <__assert_func>
 8007882:	2301      	movs	r3, #1
 8007884:	6144      	str	r4, [r0, #20]
 8007886:	6103      	str	r3, [r0, #16]
 8007888:	bd10      	pop	{r4, pc}
 800788a:	bf00      	nop
 800788c:	08009838 	.word	0x08009838
 8007890:	08009849 	.word	0x08009849

08007894 <__multiply>:
 8007894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007898:	4614      	mov	r4, r2
 800789a:	690a      	ldr	r2, [r1, #16]
 800789c:	6923      	ldr	r3, [r4, #16]
 800789e:	429a      	cmp	r2, r3
 80078a0:	bfa8      	it	ge
 80078a2:	4623      	movge	r3, r4
 80078a4:	460f      	mov	r7, r1
 80078a6:	bfa4      	itt	ge
 80078a8:	460c      	movge	r4, r1
 80078aa:	461f      	movge	r7, r3
 80078ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80078b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80078b4:	68a3      	ldr	r3, [r4, #8]
 80078b6:	6861      	ldr	r1, [r4, #4]
 80078b8:	eb0a 0609 	add.w	r6, sl, r9
 80078bc:	42b3      	cmp	r3, r6
 80078be:	b085      	sub	sp, #20
 80078c0:	bfb8      	it	lt
 80078c2:	3101      	addlt	r1, #1
 80078c4:	f7ff fedc 	bl	8007680 <_Balloc>
 80078c8:	b930      	cbnz	r0, 80078d8 <__multiply+0x44>
 80078ca:	4602      	mov	r2, r0
 80078cc:	4b44      	ldr	r3, [pc, #272]	@ (80079e0 <__multiply+0x14c>)
 80078ce:	4845      	ldr	r0, [pc, #276]	@ (80079e4 <__multiply+0x150>)
 80078d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078d4:	f000 fc92 	bl	80081fc <__assert_func>
 80078d8:	f100 0514 	add.w	r5, r0, #20
 80078dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078e0:	462b      	mov	r3, r5
 80078e2:	2200      	movs	r2, #0
 80078e4:	4543      	cmp	r3, r8
 80078e6:	d321      	bcc.n	800792c <__multiply+0x98>
 80078e8:	f107 0114 	add.w	r1, r7, #20
 80078ec:	f104 0214 	add.w	r2, r4, #20
 80078f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80078f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80078f8:	9302      	str	r3, [sp, #8]
 80078fa:	1b13      	subs	r3, r2, r4
 80078fc:	3b15      	subs	r3, #21
 80078fe:	f023 0303 	bic.w	r3, r3, #3
 8007902:	3304      	adds	r3, #4
 8007904:	f104 0715 	add.w	r7, r4, #21
 8007908:	42ba      	cmp	r2, r7
 800790a:	bf38      	it	cc
 800790c:	2304      	movcc	r3, #4
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	9b02      	ldr	r3, [sp, #8]
 8007912:	9103      	str	r1, [sp, #12]
 8007914:	428b      	cmp	r3, r1
 8007916:	d80c      	bhi.n	8007932 <__multiply+0x9e>
 8007918:	2e00      	cmp	r6, #0
 800791a:	dd03      	ble.n	8007924 <__multiply+0x90>
 800791c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007920:	2b00      	cmp	r3, #0
 8007922:	d05b      	beq.n	80079dc <__multiply+0x148>
 8007924:	6106      	str	r6, [r0, #16]
 8007926:	b005      	add	sp, #20
 8007928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792c:	f843 2b04 	str.w	r2, [r3], #4
 8007930:	e7d8      	b.n	80078e4 <__multiply+0x50>
 8007932:	f8b1 a000 	ldrh.w	sl, [r1]
 8007936:	f1ba 0f00 	cmp.w	sl, #0
 800793a:	d024      	beq.n	8007986 <__multiply+0xf2>
 800793c:	f104 0e14 	add.w	lr, r4, #20
 8007940:	46a9      	mov	r9, r5
 8007942:	f04f 0c00 	mov.w	ip, #0
 8007946:	f85e 7b04 	ldr.w	r7, [lr], #4
 800794a:	f8d9 3000 	ldr.w	r3, [r9]
 800794e:	fa1f fb87 	uxth.w	fp, r7
 8007952:	b29b      	uxth	r3, r3
 8007954:	fb0a 330b 	mla	r3, sl, fp, r3
 8007958:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800795c:	f8d9 7000 	ldr.w	r7, [r9]
 8007960:	4463      	add	r3, ip
 8007962:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007966:	fb0a c70b 	mla	r7, sl, fp, ip
 800796a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800796e:	b29b      	uxth	r3, r3
 8007970:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007974:	4572      	cmp	r2, lr
 8007976:	f849 3b04 	str.w	r3, [r9], #4
 800797a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800797e:	d8e2      	bhi.n	8007946 <__multiply+0xb2>
 8007980:	9b01      	ldr	r3, [sp, #4]
 8007982:	f845 c003 	str.w	ip, [r5, r3]
 8007986:	9b03      	ldr	r3, [sp, #12]
 8007988:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800798c:	3104      	adds	r1, #4
 800798e:	f1b9 0f00 	cmp.w	r9, #0
 8007992:	d021      	beq.n	80079d8 <__multiply+0x144>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	f104 0c14 	add.w	ip, r4, #20
 800799a:	46ae      	mov	lr, r5
 800799c:	f04f 0a00 	mov.w	sl, #0
 80079a0:	f8bc b000 	ldrh.w	fp, [ip]
 80079a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80079a8:	fb09 770b 	mla	r7, r9, fp, r7
 80079ac:	4457      	add	r7, sl
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079b4:	f84e 3b04 	str.w	r3, [lr], #4
 80079b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079c0:	f8be 3000 	ldrh.w	r3, [lr]
 80079c4:	fb09 330a 	mla	r3, r9, sl, r3
 80079c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80079cc:	4562      	cmp	r2, ip
 80079ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079d2:	d8e5      	bhi.n	80079a0 <__multiply+0x10c>
 80079d4:	9f01      	ldr	r7, [sp, #4]
 80079d6:	51eb      	str	r3, [r5, r7]
 80079d8:	3504      	adds	r5, #4
 80079da:	e799      	b.n	8007910 <__multiply+0x7c>
 80079dc:	3e01      	subs	r6, #1
 80079de:	e79b      	b.n	8007918 <__multiply+0x84>
 80079e0:	08009838 	.word	0x08009838
 80079e4:	08009849 	.word	0x08009849

080079e8 <__pow5mult>:
 80079e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ec:	4615      	mov	r5, r2
 80079ee:	f012 0203 	ands.w	r2, r2, #3
 80079f2:	4607      	mov	r7, r0
 80079f4:	460e      	mov	r6, r1
 80079f6:	d007      	beq.n	8007a08 <__pow5mult+0x20>
 80079f8:	4c25      	ldr	r4, [pc, #148]	@ (8007a90 <__pow5mult+0xa8>)
 80079fa:	3a01      	subs	r2, #1
 80079fc:	2300      	movs	r3, #0
 80079fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a02:	f7ff fe9f 	bl	8007744 <__multadd>
 8007a06:	4606      	mov	r6, r0
 8007a08:	10ad      	asrs	r5, r5, #2
 8007a0a:	d03d      	beq.n	8007a88 <__pow5mult+0xa0>
 8007a0c:	69fc      	ldr	r4, [r7, #28]
 8007a0e:	b97c      	cbnz	r4, 8007a30 <__pow5mult+0x48>
 8007a10:	2010      	movs	r0, #16
 8007a12:	f7ff fd7f 	bl	8007514 <malloc>
 8007a16:	4602      	mov	r2, r0
 8007a18:	61f8      	str	r0, [r7, #28]
 8007a1a:	b928      	cbnz	r0, 8007a28 <__pow5mult+0x40>
 8007a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a94 <__pow5mult+0xac>)
 8007a1e:	481e      	ldr	r0, [pc, #120]	@ (8007a98 <__pow5mult+0xb0>)
 8007a20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a24:	f000 fbea 	bl	80081fc <__assert_func>
 8007a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a2c:	6004      	str	r4, [r0, #0]
 8007a2e:	60c4      	str	r4, [r0, #12]
 8007a30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a38:	b94c      	cbnz	r4, 8007a4e <__pow5mult+0x66>
 8007a3a:	f240 2171 	movw	r1, #625	@ 0x271
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f7ff ff12 	bl	8007868 <__i2b>
 8007a44:	2300      	movs	r3, #0
 8007a46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	6003      	str	r3, [r0, #0]
 8007a4e:	f04f 0900 	mov.w	r9, #0
 8007a52:	07eb      	lsls	r3, r5, #31
 8007a54:	d50a      	bpl.n	8007a6c <__pow5mult+0x84>
 8007a56:	4631      	mov	r1, r6
 8007a58:	4622      	mov	r2, r4
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f7ff ff1a 	bl	8007894 <__multiply>
 8007a60:	4631      	mov	r1, r6
 8007a62:	4680      	mov	r8, r0
 8007a64:	4638      	mov	r0, r7
 8007a66:	f7ff fe4b 	bl	8007700 <_Bfree>
 8007a6a:	4646      	mov	r6, r8
 8007a6c:	106d      	asrs	r5, r5, #1
 8007a6e:	d00b      	beq.n	8007a88 <__pow5mult+0xa0>
 8007a70:	6820      	ldr	r0, [r4, #0]
 8007a72:	b938      	cbnz	r0, 8007a84 <__pow5mult+0x9c>
 8007a74:	4622      	mov	r2, r4
 8007a76:	4621      	mov	r1, r4
 8007a78:	4638      	mov	r0, r7
 8007a7a:	f7ff ff0b 	bl	8007894 <__multiply>
 8007a7e:	6020      	str	r0, [r4, #0]
 8007a80:	f8c0 9000 	str.w	r9, [r0]
 8007a84:	4604      	mov	r4, r0
 8007a86:	e7e4      	b.n	8007a52 <__pow5mult+0x6a>
 8007a88:	4630      	mov	r0, r6
 8007a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a8e:	bf00      	nop
 8007a90:	080098a4 	.word	0x080098a4
 8007a94:	080097c9 	.word	0x080097c9
 8007a98:	08009849 	.word	0x08009849

08007a9c <__lshift>:
 8007a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	6849      	ldr	r1, [r1, #4]
 8007aa4:	6923      	ldr	r3, [r4, #16]
 8007aa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007aaa:	68a3      	ldr	r3, [r4, #8]
 8007aac:	4607      	mov	r7, r0
 8007aae:	4691      	mov	r9, r2
 8007ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ab4:	f108 0601 	add.w	r6, r8, #1
 8007ab8:	42b3      	cmp	r3, r6
 8007aba:	db0b      	blt.n	8007ad4 <__lshift+0x38>
 8007abc:	4638      	mov	r0, r7
 8007abe:	f7ff fddf 	bl	8007680 <_Balloc>
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	b948      	cbnz	r0, 8007ada <__lshift+0x3e>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	4b28      	ldr	r3, [pc, #160]	@ (8007b6c <__lshift+0xd0>)
 8007aca:	4829      	ldr	r0, [pc, #164]	@ (8007b70 <__lshift+0xd4>)
 8007acc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ad0:	f000 fb94 	bl	80081fc <__assert_func>
 8007ad4:	3101      	adds	r1, #1
 8007ad6:	005b      	lsls	r3, r3, #1
 8007ad8:	e7ee      	b.n	8007ab8 <__lshift+0x1c>
 8007ada:	2300      	movs	r3, #0
 8007adc:	f100 0114 	add.w	r1, r0, #20
 8007ae0:	f100 0210 	add.w	r2, r0, #16
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	4553      	cmp	r3, sl
 8007ae8:	db33      	blt.n	8007b52 <__lshift+0xb6>
 8007aea:	6920      	ldr	r0, [r4, #16]
 8007aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007af0:	f104 0314 	add.w	r3, r4, #20
 8007af4:	f019 091f 	ands.w	r9, r9, #31
 8007af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b00:	d02b      	beq.n	8007b5a <__lshift+0xbe>
 8007b02:	f1c9 0e20 	rsb	lr, r9, #32
 8007b06:	468a      	mov	sl, r1
 8007b08:	2200      	movs	r2, #0
 8007b0a:	6818      	ldr	r0, [r3, #0]
 8007b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8007b10:	4310      	orrs	r0, r2
 8007b12:	f84a 0b04 	str.w	r0, [sl], #4
 8007b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b1a:	459c      	cmp	ip, r3
 8007b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b20:	d8f3      	bhi.n	8007b0a <__lshift+0x6e>
 8007b22:	ebac 0304 	sub.w	r3, ip, r4
 8007b26:	3b15      	subs	r3, #21
 8007b28:	f023 0303 	bic.w	r3, r3, #3
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	f104 0015 	add.w	r0, r4, #21
 8007b32:	4584      	cmp	ip, r0
 8007b34:	bf38      	it	cc
 8007b36:	2304      	movcc	r3, #4
 8007b38:	50ca      	str	r2, [r1, r3]
 8007b3a:	b10a      	cbz	r2, 8007b40 <__lshift+0xa4>
 8007b3c:	f108 0602 	add.w	r6, r8, #2
 8007b40:	3e01      	subs	r6, #1
 8007b42:	4638      	mov	r0, r7
 8007b44:	612e      	str	r6, [r5, #16]
 8007b46:	4621      	mov	r1, r4
 8007b48:	f7ff fdda 	bl	8007700 <_Bfree>
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b56:	3301      	adds	r3, #1
 8007b58:	e7c5      	b.n	8007ae6 <__lshift+0x4a>
 8007b5a:	3904      	subs	r1, #4
 8007b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b60:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b64:	459c      	cmp	ip, r3
 8007b66:	d8f9      	bhi.n	8007b5c <__lshift+0xc0>
 8007b68:	e7ea      	b.n	8007b40 <__lshift+0xa4>
 8007b6a:	bf00      	nop
 8007b6c:	08009838 	.word	0x08009838
 8007b70:	08009849 	.word	0x08009849

08007b74 <__mcmp>:
 8007b74:	690a      	ldr	r2, [r1, #16]
 8007b76:	4603      	mov	r3, r0
 8007b78:	6900      	ldr	r0, [r0, #16]
 8007b7a:	1a80      	subs	r0, r0, r2
 8007b7c:	b530      	push	{r4, r5, lr}
 8007b7e:	d10e      	bne.n	8007b9e <__mcmp+0x2a>
 8007b80:	3314      	adds	r3, #20
 8007b82:	3114      	adds	r1, #20
 8007b84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b94:	4295      	cmp	r5, r2
 8007b96:	d003      	beq.n	8007ba0 <__mcmp+0x2c>
 8007b98:	d205      	bcs.n	8007ba6 <__mcmp+0x32>
 8007b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9e:	bd30      	pop	{r4, r5, pc}
 8007ba0:	42a3      	cmp	r3, r4
 8007ba2:	d3f3      	bcc.n	8007b8c <__mcmp+0x18>
 8007ba4:	e7fb      	b.n	8007b9e <__mcmp+0x2a>
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	e7f9      	b.n	8007b9e <__mcmp+0x2a>
	...

08007bac <__mdiff>:
 8007bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	4689      	mov	r9, r1
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4648      	mov	r0, r9
 8007bb8:	4614      	mov	r4, r2
 8007bba:	f7ff ffdb 	bl	8007b74 <__mcmp>
 8007bbe:	1e05      	subs	r5, r0, #0
 8007bc0:	d112      	bne.n	8007be8 <__mdiff+0x3c>
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f7ff fd5b 	bl	8007680 <_Balloc>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <__mdiff+0x2e>
 8007bce:	4b3f      	ldr	r3, [pc, #252]	@ (8007ccc <__mdiff+0x120>)
 8007bd0:	f240 2137 	movw	r1, #567	@ 0x237
 8007bd4:	483e      	ldr	r0, [pc, #248]	@ (8007cd0 <__mdiff+0x124>)
 8007bd6:	f000 fb11 	bl	80081fc <__assert_func>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007be0:	4610      	mov	r0, r2
 8007be2:	b003      	add	sp, #12
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	bfbc      	itt	lt
 8007bea:	464b      	movlt	r3, r9
 8007bec:	46a1      	movlt	r9, r4
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007bf4:	bfba      	itte	lt
 8007bf6:	461c      	movlt	r4, r3
 8007bf8:	2501      	movlt	r5, #1
 8007bfa:	2500      	movge	r5, #0
 8007bfc:	f7ff fd40 	bl	8007680 <_Balloc>
 8007c00:	4602      	mov	r2, r0
 8007c02:	b918      	cbnz	r0, 8007c0c <__mdiff+0x60>
 8007c04:	4b31      	ldr	r3, [pc, #196]	@ (8007ccc <__mdiff+0x120>)
 8007c06:	f240 2145 	movw	r1, #581	@ 0x245
 8007c0a:	e7e3      	b.n	8007bd4 <__mdiff+0x28>
 8007c0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c10:	6926      	ldr	r6, [r4, #16]
 8007c12:	60c5      	str	r5, [r0, #12]
 8007c14:	f109 0310 	add.w	r3, r9, #16
 8007c18:	f109 0514 	add.w	r5, r9, #20
 8007c1c:	f104 0e14 	add.w	lr, r4, #20
 8007c20:	f100 0b14 	add.w	fp, r0, #20
 8007c24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	46d9      	mov	r9, fp
 8007c30:	f04f 0c00 	mov.w	ip, #0
 8007c34:	9b01      	ldr	r3, [sp, #4]
 8007c36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	fa1f f38a 	uxth.w	r3, sl
 8007c44:	4619      	mov	r1, r3
 8007c46:	b283      	uxth	r3, r0
 8007c48:	1acb      	subs	r3, r1, r3
 8007c4a:	0c00      	lsrs	r0, r0, #16
 8007c4c:	4463      	add	r3, ip
 8007c4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c5c:	4576      	cmp	r6, lr
 8007c5e:	f849 3b04 	str.w	r3, [r9], #4
 8007c62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c66:	d8e5      	bhi.n	8007c34 <__mdiff+0x88>
 8007c68:	1b33      	subs	r3, r6, r4
 8007c6a:	3b15      	subs	r3, #21
 8007c6c:	f023 0303 	bic.w	r3, r3, #3
 8007c70:	3415      	adds	r4, #21
 8007c72:	3304      	adds	r3, #4
 8007c74:	42a6      	cmp	r6, r4
 8007c76:	bf38      	it	cc
 8007c78:	2304      	movcc	r3, #4
 8007c7a:	441d      	add	r5, r3
 8007c7c:	445b      	add	r3, fp
 8007c7e:	461e      	mov	r6, r3
 8007c80:	462c      	mov	r4, r5
 8007c82:	4544      	cmp	r4, r8
 8007c84:	d30e      	bcc.n	8007ca4 <__mdiff+0xf8>
 8007c86:	f108 0103 	add.w	r1, r8, #3
 8007c8a:	1b49      	subs	r1, r1, r5
 8007c8c:	f021 0103 	bic.w	r1, r1, #3
 8007c90:	3d03      	subs	r5, #3
 8007c92:	45a8      	cmp	r8, r5
 8007c94:	bf38      	it	cc
 8007c96:	2100      	movcc	r1, #0
 8007c98:	440b      	add	r3, r1
 8007c9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c9e:	b191      	cbz	r1, 8007cc6 <__mdiff+0x11a>
 8007ca0:	6117      	str	r7, [r2, #16]
 8007ca2:	e79d      	b.n	8007be0 <__mdiff+0x34>
 8007ca4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ca8:	46e6      	mov	lr, ip
 8007caa:	0c08      	lsrs	r0, r1, #16
 8007cac:	fa1c fc81 	uxtah	ip, ip, r1
 8007cb0:	4471      	add	r1, lr
 8007cb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007cb6:	b289      	uxth	r1, r1
 8007cb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007cbc:	f846 1b04 	str.w	r1, [r6], #4
 8007cc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cc4:	e7dd      	b.n	8007c82 <__mdiff+0xd6>
 8007cc6:	3f01      	subs	r7, #1
 8007cc8:	e7e7      	b.n	8007c9a <__mdiff+0xee>
 8007cca:	bf00      	nop
 8007ccc:	08009838 	.word	0x08009838
 8007cd0:	08009849 	.word	0x08009849

08007cd4 <__d2b>:
 8007cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cd8:	460f      	mov	r7, r1
 8007cda:	2101      	movs	r1, #1
 8007cdc:	ec59 8b10 	vmov	r8, r9, d0
 8007ce0:	4616      	mov	r6, r2
 8007ce2:	f7ff fccd 	bl	8007680 <_Balloc>
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	b930      	cbnz	r0, 8007cf8 <__d2b+0x24>
 8007cea:	4602      	mov	r2, r0
 8007cec:	4b23      	ldr	r3, [pc, #140]	@ (8007d7c <__d2b+0xa8>)
 8007cee:	4824      	ldr	r0, [pc, #144]	@ (8007d80 <__d2b+0xac>)
 8007cf0:	f240 310f 	movw	r1, #783	@ 0x30f
 8007cf4:	f000 fa82 	bl	80081fc <__assert_func>
 8007cf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d00:	b10d      	cbz	r5, 8007d06 <__d2b+0x32>
 8007d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	f1b8 0300 	subs.w	r3, r8, #0
 8007d0c:	d023      	beq.n	8007d56 <__d2b+0x82>
 8007d0e:	4668      	mov	r0, sp
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	f7ff fd7c 	bl	800780e <__lo0bits>
 8007d16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d1a:	b1d0      	cbz	r0, 8007d52 <__d2b+0x7e>
 8007d1c:	f1c0 0320 	rsb	r3, r0, #32
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	430b      	orrs	r3, r1
 8007d26:	40c2      	lsrs	r2, r0
 8007d28:	6163      	str	r3, [r4, #20]
 8007d2a:	9201      	str	r2, [sp, #4]
 8007d2c:	9b01      	ldr	r3, [sp, #4]
 8007d2e:	61a3      	str	r3, [r4, #24]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	bf0c      	ite	eq
 8007d34:	2201      	moveq	r2, #1
 8007d36:	2202      	movne	r2, #2
 8007d38:	6122      	str	r2, [r4, #16]
 8007d3a:	b1a5      	cbz	r5, 8007d66 <__d2b+0x92>
 8007d3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d40:	4405      	add	r5, r0
 8007d42:	603d      	str	r5, [r7, #0]
 8007d44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d48:	6030      	str	r0, [r6, #0]
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	b003      	add	sp, #12
 8007d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d52:	6161      	str	r1, [r4, #20]
 8007d54:	e7ea      	b.n	8007d2c <__d2b+0x58>
 8007d56:	a801      	add	r0, sp, #4
 8007d58:	f7ff fd59 	bl	800780e <__lo0bits>
 8007d5c:	9b01      	ldr	r3, [sp, #4]
 8007d5e:	6163      	str	r3, [r4, #20]
 8007d60:	3020      	adds	r0, #32
 8007d62:	2201      	movs	r2, #1
 8007d64:	e7e8      	b.n	8007d38 <__d2b+0x64>
 8007d66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d6e:	6038      	str	r0, [r7, #0]
 8007d70:	6918      	ldr	r0, [r3, #16]
 8007d72:	f7ff fd2d 	bl	80077d0 <__hi0bits>
 8007d76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d7a:	e7e5      	b.n	8007d48 <__d2b+0x74>
 8007d7c:	08009838 	.word	0x08009838
 8007d80:	08009849 	.word	0x08009849

08007d84 <__ssputs_r>:
 8007d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	688e      	ldr	r6, [r1, #8]
 8007d8a:	461f      	mov	r7, r3
 8007d8c:	42be      	cmp	r6, r7
 8007d8e:	680b      	ldr	r3, [r1, #0]
 8007d90:	4682      	mov	sl, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	4690      	mov	r8, r2
 8007d96:	d82d      	bhi.n	8007df4 <__ssputs_r+0x70>
 8007d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007da0:	d026      	beq.n	8007df0 <__ssputs_r+0x6c>
 8007da2:	6965      	ldr	r5, [r4, #20]
 8007da4:	6909      	ldr	r1, [r1, #16]
 8007da6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007daa:	eba3 0901 	sub.w	r9, r3, r1
 8007dae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007db2:	1c7b      	adds	r3, r7, #1
 8007db4:	444b      	add	r3, r9
 8007db6:	106d      	asrs	r5, r5, #1
 8007db8:	429d      	cmp	r5, r3
 8007dba:	bf38      	it	cc
 8007dbc:	461d      	movcc	r5, r3
 8007dbe:	0553      	lsls	r3, r2, #21
 8007dc0:	d527      	bpl.n	8007e12 <__ssputs_r+0x8e>
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	f7ff fbd0 	bl	8007568 <_malloc_r>
 8007dc8:	4606      	mov	r6, r0
 8007dca:	b360      	cbz	r0, 8007e26 <__ssputs_r+0xa2>
 8007dcc:	6921      	ldr	r1, [r4, #16]
 8007dce:	464a      	mov	r2, r9
 8007dd0:	f000 fa06 	bl	80081e0 <memcpy>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	6126      	str	r6, [r4, #16]
 8007de2:	6165      	str	r5, [r4, #20]
 8007de4:	444e      	add	r6, r9
 8007de6:	eba5 0509 	sub.w	r5, r5, r9
 8007dea:	6026      	str	r6, [r4, #0]
 8007dec:	60a5      	str	r5, [r4, #8]
 8007dee:	463e      	mov	r6, r7
 8007df0:	42be      	cmp	r6, r7
 8007df2:	d900      	bls.n	8007df6 <__ssputs_r+0x72>
 8007df4:	463e      	mov	r6, r7
 8007df6:	6820      	ldr	r0, [r4, #0]
 8007df8:	4632      	mov	r2, r6
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	f000 f9c6 	bl	800818c <memmove>
 8007e00:	68a3      	ldr	r3, [r4, #8]
 8007e02:	1b9b      	subs	r3, r3, r6
 8007e04:	60a3      	str	r3, [r4, #8]
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	4433      	add	r3, r6
 8007e0a:	6023      	str	r3, [r4, #0]
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e12:	462a      	mov	r2, r5
 8007e14:	f000 fa36 	bl	8008284 <_realloc_r>
 8007e18:	4606      	mov	r6, r0
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d1e0      	bne.n	8007de0 <__ssputs_r+0x5c>
 8007e1e:	6921      	ldr	r1, [r4, #16]
 8007e20:	4650      	mov	r0, sl
 8007e22:	f7ff fb2d 	bl	8007480 <_free_r>
 8007e26:	230c      	movs	r3, #12
 8007e28:	f8ca 3000 	str.w	r3, [sl]
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	e7e9      	b.n	8007e0e <__ssputs_r+0x8a>
	...

08007e3c <_svfiprintf_r>:
 8007e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	4698      	mov	r8, r3
 8007e42:	898b      	ldrh	r3, [r1, #12]
 8007e44:	061b      	lsls	r3, r3, #24
 8007e46:	b09d      	sub	sp, #116	@ 0x74
 8007e48:	4607      	mov	r7, r0
 8007e4a:	460d      	mov	r5, r1
 8007e4c:	4614      	mov	r4, r2
 8007e4e:	d510      	bpl.n	8007e72 <_svfiprintf_r+0x36>
 8007e50:	690b      	ldr	r3, [r1, #16]
 8007e52:	b973      	cbnz	r3, 8007e72 <_svfiprintf_r+0x36>
 8007e54:	2140      	movs	r1, #64	@ 0x40
 8007e56:	f7ff fb87 	bl	8007568 <_malloc_r>
 8007e5a:	6028      	str	r0, [r5, #0]
 8007e5c:	6128      	str	r0, [r5, #16]
 8007e5e:	b930      	cbnz	r0, 8007e6e <_svfiprintf_r+0x32>
 8007e60:	230c      	movs	r3, #12
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	b01d      	add	sp, #116	@ 0x74
 8007e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6e:	2340      	movs	r3, #64	@ 0x40
 8007e70:	616b      	str	r3, [r5, #20]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e76:	2320      	movs	r3, #32
 8007e78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e80:	2330      	movs	r3, #48	@ 0x30
 8007e82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008020 <_svfiprintf_r+0x1e4>
 8007e86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e8a:	f04f 0901 	mov.w	r9, #1
 8007e8e:	4623      	mov	r3, r4
 8007e90:	469a      	mov	sl, r3
 8007e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e96:	b10a      	cbz	r2, 8007e9c <_svfiprintf_r+0x60>
 8007e98:	2a25      	cmp	r2, #37	@ 0x25
 8007e9a:	d1f9      	bne.n	8007e90 <_svfiprintf_r+0x54>
 8007e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007ea0:	d00b      	beq.n	8007eba <_svfiprintf_r+0x7e>
 8007ea2:	465b      	mov	r3, fp
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f7ff ff6b 	bl	8007d84 <__ssputs_r>
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f000 80a7 	beq.w	8008002 <_svfiprintf_r+0x1c6>
 8007eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eb6:	445a      	add	r2, fp
 8007eb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007eba:	f89a 3000 	ldrb.w	r3, [sl]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 809f 	beq.w	8008002 <_svfiprintf_r+0x1c6>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ece:	f10a 0a01 	add.w	sl, sl, #1
 8007ed2:	9304      	str	r3, [sp, #16]
 8007ed4:	9307      	str	r3, [sp, #28]
 8007ed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007eda:	931a      	str	r3, [sp, #104]	@ 0x68
 8007edc:	4654      	mov	r4, sl
 8007ede:	2205      	movs	r2, #5
 8007ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee4:	484e      	ldr	r0, [pc, #312]	@ (8008020 <_svfiprintf_r+0x1e4>)
 8007ee6:	f7f8 f97b 	bl	80001e0 <memchr>
 8007eea:	9a04      	ldr	r2, [sp, #16]
 8007eec:	b9d8      	cbnz	r0, 8007f26 <_svfiprintf_r+0xea>
 8007eee:	06d0      	lsls	r0, r2, #27
 8007ef0:	bf44      	itt	mi
 8007ef2:	2320      	movmi	r3, #32
 8007ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ef8:	0711      	lsls	r1, r2, #28
 8007efa:	bf44      	itt	mi
 8007efc:	232b      	movmi	r3, #43	@ 0x2b
 8007efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f02:	f89a 3000 	ldrb.w	r3, [sl]
 8007f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f08:	d015      	beq.n	8007f36 <_svfiprintf_r+0xfa>
 8007f0a:	9a07      	ldr	r2, [sp, #28]
 8007f0c:	4654      	mov	r4, sl
 8007f0e:	2000      	movs	r0, #0
 8007f10:	f04f 0c0a 	mov.w	ip, #10
 8007f14:	4621      	mov	r1, r4
 8007f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f1a:	3b30      	subs	r3, #48	@ 0x30
 8007f1c:	2b09      	cmp	r3, #9
 8007f1e:	d94b      	bls.n	8007fb8 <_svfiprintf_r+0x17c>
 8007f20:	b1b0      	cbz	r0, 8007f50 <_svfiprintf_r+0x114>
 8007f22:	9207      	str	r2, [sp, #28]
 8007f24:	e014      	b.n	8007f50 <_svfiprintf_r+0x114>
 8007f26:	eba0 0308 	sub.w	r3, r0, r8
 8007f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	9304      	str	r3, [sp, #16]
 8007f32:	46a2      	mov	sl, r4
 8007f34:	e7d2      	b.n	8007edc <_svfiprintf_r+0xa0>
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	1d19      	adds	r1, r3, #4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	9103      	str	r1, [sp, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bfbb      	ittet	lt
 8007f42:	425b      	neglt	r3, r3
 8007f44:	f042 0202 	orrlt.w	r2, r2, #2
 8007f48:	9307      	strge	r3, [sp, #28]
 8007f4a:	9307      	strlt	r3, [sp, #28]
 8007f4c:	bfb8      	it	lt
 8007f4e:	9204      	strlt	r2, [sp, #16]
 8007f50:	7823      	ldrb	r3, [r4, #0]
 8007f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f54:	d10a      	bne.n	8007f6c <_svfiprintf_r+0x130>
 8007f56:	7863      	ldrb	r3, [r4, #1]
 8007f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f5a:	d132      	bne.n	8007fc2 <_svfiprintf_r+0x186>
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	1d1a      	adds	r2, r3, #4
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	9203      	str	r2, [sp, #12]
 8007f64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f68:	3402      	adds	r4, #2
 8007f6a:	9305      	str	r3, [sp, #20]
 8007f6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008030 <_svfiprintf_r+0x1f4>
 8007f70:	7821      	ldrb	r1, [r4, #0]
 8007f72:	2203      	movs	r2, #3
 8007f74:	4650      	mov	r0, sl
 8007f76:	f7f8 f933 	bl	80001e0 <memchr>
 8007f7a:	b138      	cbz	r0, 8007f8c <_svfiprintf_r+0x150>
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	eba0 000a 	sub.w	r0, r0, sl
 8007f82:	2240      	movs	r2, #64	@ 0x40
 8007f84:	4082      	lsls	r2, r0
 8007f86:	4313      	orrs	r3, r2
 8007f88:	3401      	adds	r4, #1
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f90:	4824      	ldr	r0, [pc, #144]	@ (8008024 <_svfiprintf_r+0x1e8>)
 8007f92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f96:	2206      	movs	r2, #6
 8007f98:	f7f8 f922 	bl	80001e0 <memchr>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d036      	beq.n	800800e <_svfiprintf_r+0x1d2>
 8007fa0:	4b21      	ldr	r3, [pc, #132]	@ (8008028 <_svfiprintf_r+0x1ec>)
 8007fa2:	bb1b      	cbnz	r3, 8007fec <_svfiprintf_r+0x1b0>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	3307      	adds	r3, #7
 8007fa8:	f023 0307 	bic.w	r3, r3, #7
 8007fac:	3308      	adds	r3, #8
 8007fae:	9303      	str	r3, [sp, #12]
 8007fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb2:	4433      	add	r3, r6
 8007fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fb6:	e76a      	b.n	8007e8e <_svfiprintf_r+0x52>
 8007fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	e7a8      	b.n	8007f14 <_svfiprintf_r+0xd8>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	3401      	adds	r4, #1
 8007fc6:	9305      	str	r3, [sp, #20]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	f04f 0c0a 	mov.w	ip, #10
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fd4:	3a30      	subs	r2, #48	@ 0x30
 8007fd6:	2a09      	cmp	r2, #9
 8007fd8:	d903      	bls.n	8007fe2 <_svfiprintf_r+0x1a6>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0c6      	beq.n	8007f6c <_svfiprintf_r+0x130>
 8007fde:	9105      	str	r1, [sp, #20]
 8007fe0:	e7c4      	b.n	8007f6c <_svfiprintf_r+0x130>
 8007fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e7f0      	b.n	8007fce <_svfiprintf_r+0x192>
 8007fec:	ab03      	add	r3, sp, #12
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	462a      	mov	r2, r5
 8007ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800802c <_svfiprintf_r+0x1f0>)
 8007ff4:	a904      	add	r1, sp, #16
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	f7fd fe98 	bl	8005d2c <_printf_float>
 8007ffc:	1c42      	adds	r2, r0, #1
 8007ffe:	4606      	mov	r6, r0
 8008000:	d1d6      	bne.n	8007fb0 <_svfiprintf_r+0x174>
 8008002:	89ab      	ldrh	r3, [r5, #12]
 8008004:	065b      	lsls	r3, r3, #25
 8008006:	f53f af2d 	bmi.w	8007e64 <_svfiprintf_r+0x28>
 800800a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800800c:	e72c      	b.n	8007e68 <_svfiprintf_r+0x2c>
 800800e:	ab03      	add	r3, sp, #12
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	462a      	mov	r2, r5
 8008014:	4b05      	ldr	r3, [pc, #20]	@ (800802c <_svfiprintf_r+0x1f0>)
 8008016:	a904      	add	r1, sp, #16
 8008018:	4638      	mov	r0, r7
 800801a:	f7fe f91f 	bl	800625c <_printf_i>
 800801e:	e7ed      	b.n	8007ffc <_svfiprintf_r+0x1c0>
 8008020:	080099a0 	.word	0x080099a0
 8008024:	080099aa 	.word	0x080099aa
 8008028:	08005d2d 	.word	0x08005d2d
 800802c:	08007d85 	.word	0x08007d85
 8008030:	080099a6 	.word	0x080099a6

08008034 <__sflush_r>:
 8008034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803c:	0716      	lsls	r6, r2, #28
 800803e:	4605      	mov	r5, r0
 8008040:	460c      	mov	r4, r1
 8008042:	d454      	bmi.n	80080ee <__sflush_r+0xba>
 8008044:	684b      	ldr	r3, [r1, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	dc02      	bgt.n	8008050 <__sflush_r+0x1c>
 800804a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	dd48      	ble.n	80080e2 <__sflush_r+0xae>
 8008050:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008052:	2e00      	cmp	r6, #0
 8008054:	d045      	beq.n	80080e2 <__sflush_r+0xae>
 8008056:	2300      	movs	r3, #0
 8008058:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800805c:	682f      	ldr	r7, [r5, #0]
 800805e:	6a21      	ldr	r1, [r4, #32]
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	d030      	beq.n	80080c6 <__sflush_r+0x92>
 8008064:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	0759      	lsls	r1, r3, #29
 800806a:	d505      	bpl.n	8008078 <__sflush_r+0x44>
 800806c:	6863      	ldr	r3, [r4, #4]
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008072:	b10b      	cbz	r3, 8008078 <__sflush_r+0x44>
 8008074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008076:	1ad2      	subs	r2, r2, r3
 8008078:	2300      	movs	r3, #0
 800807a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800807c:	6a21      	ldr	r1, [r4, #32]
 800807e:	4628      	mov	r0, r5
 8008080:	47b0      	blx	r6
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	d106      	bne.n	8008096 <__sflush_r+0x62>
 8008088:	6829      	ldr	r1, [r5, #0]
 800808a:	291d      	cmp	r1, #29
 800808c:	d82b      	bhi.n	80080e6 <__sflush_r+0xb2>
 800808e:	4a2a      	ldr	r2, [pc, #168]	@ (8008138 <__sflush_r+0x104>)
 8008090:	410a      	asrs	r2, r1
 8008092:	07d6      	lsls	r6, r2, #31
 8008094:	d427      	bmi.n	80080e6 <__sflush_r+0xb2>
 8008096:	2200      	movs	r2, #0
 8008098:	6062      	str	r2, [r4, #4]
 800809a:	04d9      	lsls	r1, r3, #19
 800809c:	6922      	ldr	r2, [r4, #16]
 800809e:	6022      	str	r2, [r4, #0]
 80080a0:	d504      	bpl.n	80080ac <__sflush_r+0x78>
 80080a2:	1c42      	adds	r2, r0, #1
 80080a4:	d101      	bne.n	80080aa <__sflush_r+0x76>
 80080a6:	682b      	ldr	r3, [r5, #0]
 80080a8:	b903      	cbnz	r3, 80080ac <__sflush_r+0x78>
 80080aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80080ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080ae:	602f      	str	r7, [r5, #0]
 80080b0:	b1b9      	cbz	r1, 80080e2 <__sflush_r+0xae>
 80080b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080b6:	4299      	cmp	r1, r3
 80080b8:	d002      	beq.n	80080c0 <__sflush_r+0x8c>
 80080ba:	4628      	mov	r0, r5
 80080bc:	f7ff f9e0 	bl	8007480 <_free_r>
 80080c0:	2300      	movs	r3, #0
 80080c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80080c4:	e00d      	b.n	80080e2 <__sflush_r+0xae>
 80080c6:	2301      	movs	r3, #1
 80080c8:	4628      	mov	r0, r5
 80080ca:	47b0      	blx	r6
 80080cc:	4602      	mov	r2, r0
 80080ce:	1c50      	adds	r0, r2, #1
 80080d0:	d1c9      	bne.n	8008066 <__sflush_r+0x32>
 80080d2:	682b      	ldr	r3, [r5, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d0c6      	beq.n	8008066 <__sflush_r+0x32>
 80080d8:	2b1d      	cmp	r3, #29
 80080da:	d001      	beq.n	80080e0 <__sflush_r+0xac>
 80080dc:	2b16      	cmp	r3, #22
 80080de:	d11e      	bne.n	800811e <__sflush_r+0xea>
 80080e0:	602f      	str	r7, [r5, #0]
 80080e2:	2000      	movs	r0, #0
 80080e4:	e022      	b.n	800812c <__sflush_r+0xf8>
 80080e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ea:	b21b      	sxth	r3, r3
 80080ec:	e01b      	b.n	8008126 <__sflush_r+0xf2>
 80080ee:	690f      	ldr	r7, [r1, #16]
 80080f0:	2f00      	cmp	r7, #0
 80080f2:	d0f6      	beq.n	80080e2 <__sflush_r+0xae>
 80080f4:	0793      	lsls	r3, r2, #30
 80080f6:	680e      	ldr	r6, [r1, #0]
 80080f8:	bf08      	it	eq
 80080fa:	694b      	ldreq	r3, [r1, #20]
 80080fc:	600f      	str	r7, [r1, #0]
 80080fe:	bf18      	it	ne
 8008100:	2300      	movne	r3, #0
 8008102:	eba6 0807 	sub.w	r8, r6, r7
 8008106:	608b      	str	r3, [r1, #8]
 8008108:	f1b8 0f00 	cmp.w	r8, #0
 800810c:	dde9      	ble.n	80080e2 <__sflush_r+0xae>
 800810e:	6a21      	ldr	r1, [r4, #32]
 8008110:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008112:	4643      	mov	r3, r8
 8008114:	463a      	mov	r2, r7
 8008116:	4628      	mov	r0, r5
 8008118:	47b0      	blx	r6
 800811a:	2800      	cmp	r0, #0
 800811c:	dc08      	bgt.n	8008130 <__sflush_r+0xfc>
 800811e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	f04f 30ff 	mov.w	r0, #4294967295
 800812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008130:	4407      	add	r7, r0
 8008132:	eba8 0800 	sub.w	r8, r8, r0
 8008136:	e7e7      	b.n	8008108 <__sflush_r+0xd4>
 8008138:	dfbffffe 	.word	0xdfbffffe

0800813c <_fflush_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	690b      	ldr	r3, [r1, #16]
 8008140:	4605      	mov	r5, r0
 8008142:	460c      	mov	r4, r1
 8008144:	b913      	cbnz	r3, 800814c <_fflush_r+0x10>
 8008146:	2500      	movs	r5, #0
 8008148:	4628      	mov	r0, r5
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	b118      	cbz	r0, 8008156 <_fflush_r+0x1a>
 800814e:	6a03      	ldr	r3, [r0, #32]
 8008150:	b90b      	cbnz	r3, 8008156 <_fflush_r+0x1a>
 8008152:	f7fe fa2f 	bl	80065b4 <__sinit>
 8008156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0f3      	beq.n	8008146 <_fflush_r+0xa>
 800815e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008160:	07d0      	lsls	r0, r2, #31
 8008162:	d404      	bmi.n	800816e <_fflush_r+0x32>
 8008164:	0599      	lsls	r1, r3, #22
 8008166:	d402      	bmi.n	800816e <_fflush_r+0x32>
 8008168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800816a:	f7fe fb3a 	bl	80067e2 <__retarget_lock_acquire_recursive>
 800816e:	4628      	mov	r0, r5
 8008170:	4621      	mov	r1, r4
 8008172:	f7ff ff5f 	bl	8008034 <__sflush_r>
 8008176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008178:	07da      	lsls	r2, r3, #31
 800817a:	4605      	mov	r5, r0
 800817c:	d4e4      	bmi.n	8008148 <_fflush_r+0xc>
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	059b      	lsls	r3, r3, #22
 8008182:	d4e1      	bmi.n	8008148 <_fflush_r+0xc>
 8008184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008186:	f7fe fb2d 	bl	80067e4 <__retarget_lock_release_recursive>
 800818a:	e7dd      	b.n	8008148 <_fflush_r+0xc>

0800818c <memmove>:
 800818c:	4288      	cmp	r0, r1
 800818e:	b510      	push	{r4, lr}
 8008190:	eb01 0402 	add.w	r4, r1, r2
 8008194:	d902      	bls.n	800819c <memmove+0x10>
 8008196:	4284      	cmp	r4, r0
 8008198:	4623      	mov	r3, r4
 800819a:	d807      	bhi.n	80081ac <memmove+0x20>
 800819c:	1e43      	subs	r3, r0, #1
 800819e:	42a1      	cmp	r1, r4
 80081a0:	d008      	beq.n	80081b4 <memmove+0x28>
 80081a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081aa:	e7f8      	b.n	800819e <memmove+0x12>
 80081ac:	4402      	add	r2, r0
 80081ae:	4601      	mov	r1, r0
 80081b0:	428a      	cmp	r2, r1
 80081b2:	d100      	bne.n	80081b6 <memmove+0x2a>
 80081b4:	bd10      	pop	{r4, pc}
 80081b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081be:	e7f7      	b.n	80081b0 <memmove+0x24>

080081c0 <_sbrk_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4d06      	ldr	r5, [pc, #24]	@ (80081dc <_sbrk_r+0x1c>)
 80081c4:	2300      	movs	r3, #0
 80081c6:	4604      	mov	r4, r0
 80081c8:	4608      	mov	r0, r1
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	f7fa f95e 	bl	800248c <_sbrk>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_sbrk_r+0x1a>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_sbrk_r+0x1a>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	20000608 	.word	0x20000608

080081e0 <memcpy>:
 80081e0:	440a      	add	r2, r1
 80081e2:	4291      	cmp	r1, r2
 80081e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081e8:	d100      	bne.n	80081ec <memcpy+0xc>
 80081ea:	4770      	bx	lr
 80081ec:	b510      	push	{r4, lr}
 80081ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f6:	4291      	cmp	r1, r2
 80081f8:	d1f9      	bne.n	80081ee <memcpy+0xe>
 80081fa:	bd10      	pop	{r4, pc}

080081fc <__assert_func>:
 80081fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081fe:	4614      	mov	r4, r2
 8008200:	461a      	mov	r2, r3
 8008202:	4b09      	ldr	r3, [pc, #36]	@ (8008228 <__assert_func+0x2c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4605      	mov	r5, r0
 8008208:	68d8      	ldr	r0, [r3, #12]
 800820a:	b954      	cbnz	r4, 8008222 <__assert_func+0x26>
 800820c:	4b07      	ldr	r3, [pc, #28]	@ (800822c <__assert_func+0x30>)
 800820e:	461c      	mov	r4, r3
 8008210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008214:	9100      	str	r1, [sp, #0]
 8008216:	462b      	mov	r3, r5
 8008218:	4905      	ldr	r1, [pc, #20]	@ (8008230 <__assert_func+0x34>)
 800821a:	f000 f86f 	bl	80082fc <fiprintf>
 800821e:	f000 f87f 	bl	8008320 <abort>
 8008222:	4b04      	ldr	r3, [pc, #16]	@ (8008234 <__assert_func+0x38>)
 8008224:	e7f4      	b.n	8008210 <__assert_func+0x14>
 8008226:	bf00      	nop
 8008228:	2000001c 	.word	0x2000001c
 800822c:	080099f6 	.word	0x080099f6
 8008230:	080099c8 	.word	0x080099c8
 8008234:	080099bb 	.word	0x080099bb

08008238 <_calloc_r>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	fba1 5402 	umull	r5, r4, r1, r2
 800823e:	b93c      	cbnz	r4, 8008250 <_calloc_r+0x18>
 8008240:	4629      	mov	r1, r5
 8008242:	f7ff f991 	bl	8007568 <_malloc_r>
 8008246:	4606      	mov	r6, r0
 8008248:	b928      	cbnz	r0, 8008256 <_calloc_r+0x1e>
 800824a:	2600      	movs	r6, #0
 800824c:	4630      	mov	r0, r6
 800824e:	bd70      	pop	{r4, r5, r6, pc}
 8008250:	220c      	movs	r2, #12
 8008252:	6002      	str	r2, [r0, #0]
 8008254:	e7f9      	b.n	800824a <_calloc_r+0x12>
 8008256:	462a      	mov	r2, r5
 8008258:	4621      	mov	r1, r4
 800825a:	f7fe fa44 	bl	80066e6 <memset>
 800825e:	e7f5      	b.n	800824c <_calloc_r+0x14>

08008260 <__ascii_mbtowc>:
 8008260:	b082      	sub	sp, #8
 8008262:	b901      	cbnz	r1, 8008266 <__ascii_mbtowc+0x6>
 8008264:	a901      	add	r1, sp, #4
 8008266:	b142      	cbz	r2, 800827a <__ascii_mbtowc+0x1a>
 8008268:	b14b      	cbz	r3, 800827e <__ascii_mbtowc+0x1e>
 800826a:	7813      	ldrb	r3, [r2, #0]
 800826c:	600b      	str	r3, [r1, #0]
 800826e:	7812      	ldrb	r2, [r2, #0]
 8008270:	1e10      	subs	r0, r2, #0
 8008272:	bf18      	it	ne
 8008274:	2001      	movne	r0, #1
 8008276:	b002      	add	sp, #8
 8008278:	4770      	bx	lr
 800827a:	4610      	mov	r0, r2
 800827c:	e7fb      	b.n	8008276 <__ascii_mbtowc+0x16>
 800827e:	f06f 0001 	mvn.w	r0, #1
 8008282:	e7f8      	b.n	8008276 <__ascii_mbtowc+0x16>

08008284 <_realloc_r>:
 8008284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008288:	4680      	mov	r8, r0
 800828a:	4615      	mov	r5, r2
 800828c:	460c      	mov	r4, r1
 800828e:	b921      	cbnz	r1, 800829a <_realloc_r+0x16>
 8008290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008294:	4611      	mov	r1, r2
 8008296:	f7ff b967 	b.w	8007568 <_malloc_r>
 800829a:	b92a      	cbnz	r2, 80082a8 <_realloc_r+0x24>
 800829c:	f7ff f8f0 	bl	8007480 <_free_r>
 80082a0:	2400      	movs	r4, #0
 80082a2:	4620      	mov	r0, r4
 80082a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a8:	f000 f841 	bl	800832e <_malloc_usable_size_r>
 80082ac:	4285      	cmp	r5, r0
 80082ae:	4606      	mov	r6, r0
 80082b0:	d802      	bhi.n	80082b8 <_realloc_r+0x34>
 80082b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80082b6:	d8f4      	bhi.n	80082a2 <_realloc_r+0x1e>
 80082b8:	4629      	mov	r1, r5
 80082ba:	4640      	mov	r0, r8
 80082bc:	f7ff f954 	bl	8007568 <_malloc_r>
 80082c0:	4607      	mov	r7, r0
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d0ec      	beq.n	80082a0 <_realloc_r+0x1c>
 80082c6:	42b5      	cmp	r5, r6
 80082c8:	462a      	mov	r2, r5
 80082ca:	4621      	mov	r1, r4
 80082cc:	bf28      	it	cs
 80082ce:	4632      	movcs	r2, r6
 80082d0:	f7ff ff86 	bl	80081e0 <memcpy>
 80082d4:	4621      	mov	r1, r4
 80082d6:	4640      	mov	r0, r8
 80082d8:	f7ff f8d2 	bl	8007480 <_free_r>
 80082dc:	463c      	mov	r4, r7
 80082de:	e7e0      	b.n	80082a2 <_realloc_r+0x1e>

080082e0 <__ascii_wctomb>:
 80082e0:	4603      	mov	r3, r0
 80082e2:	4608      	mov	r0, r1
 80082e4:	b141      	cbz	r1, 80082f8 <__ascii_wctomb+0x18>
 80082e6:	2aff      	cmp	r2, #255	@ 0xff
 80082e8:	d904      	bls.n	80082f4 <__ascii_wctomb+0x14>
 80082ea:	228a      	movs	r2, #138	@ 0x8a
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	f04f 30ff 	mov.w	r0, #4294967295
 80082f2:	4770      	bx	lr
 80082f4:	700a      	strb	r2, [r1, #0]
 80082f6:	2001      	movs	r0, #1
 80082f8:	4770      	bx	lr
	...

080082fc <fiprintf>:
 80082fc:	b40e      	push	{r1, r2, r3}
 80082fe:	b503      	push	{r0, r1, lr}
 8008300:	4601      	mov	r1, r0
 8008302:	ab03      	add	r3, sp, #12
 8008304:	4805      	ldr	r0, [pc, #20]	@ (800831c <fiprintf+0x20>)
 8008306:	f853 2b04 	ldr.w	r2, [r3], #4
 800830a:	6800      	ldr	r0, [r0, #0]
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	f000 f83f 	bl	8008390 <_vfiprintf_r>
 8008312:	b002      	add	sp, #8
 8008314:	f85d eb04 	ldr.w	lr, [sp], #4
 8008318:	b003      	add	sp, #12
 800831a:	4770      	bx	lr
 800831c:	2000001c 	.word	0x2000001c

08008320 <abort>:
 8008320:	b508      	push	{r3, lr}
 8008322:	2006      	movs	r0, #6
 8008324:	f000 fa08 	bl	8008738 <raise>
 8008328:	2001      	movs	r0, #1
 800832a:	f7fa f837 	bl	800239c <_exit>

0800832e <_malloc_usable_size_r>:
 800832e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008332:	1f18      	subs	r0, r3, #4
 8008334:	2b00      	cmp	r3, #0
 8008336:	bfbc      	itt	lt
 8008338:	580b      	ldrlt	r3, [r1, r0]
 800833a:	18c0      	addlt	r0, r0, r3
 800833c:	4770      	bx	lr

0800833e <__sfputc_r>:
 800833e:	6893      	ldr	r3, [r2, #8]
 8008340:	3b01      	subs	r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	b410      	push	{r4}
 8008346:	6093      	str	r3, [r2, #8]
 8008348:	da08      	bge.n	800835c <__sfputc_r+0x1e>
 800834a:	6994      	ldr	r4, [r2, #24]
 800834c:	42a3      	cmp	r3, r4
 800834e:	db01      	blt.n	8008354 <__sfputc_r+0x16>
 8008350:	290a      	cmp	r1, #10
 8008352:	d103      	bne.n	800835c <__sfputc_r+0x1e>
 8008354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008358:	f000 b932 	b.w	80085c0 <__swbuf_r>
 800835c:	6813      	ldr	r3, [r2, #0]
 800835e:	1c58      	adds	r0, r3, #1
 8008360:	6010      	str	r0, [r2, #0]
 8008362:	7019      	strb	r1, [r3, #0]
 8008364:	4608      	mov	r0, r1
 8008366:	f85d 4b04 	ldr.w	r4, [sp], #4
 800836a:	4770      	bx	lr

0800836c <__sfputs_r>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	4606      	mov	r6, r0
 8008370:	460f      	mov	r7, r1
 8008372:	4614      	mov	r4, r2
 8008374:	18d5      	adds	r5, r2, r3
 8008376:	42ac      	cmp	r4, r5
 8008378:	d101      	bne.n	800837e <__sfputs_r+0x12>
 800837a:	2000      	movs	r0, #0
 800837c:	e007      	b.n	800838e <__sfputs_r+0x22>
 800837e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008382:	463a      	mov	r2, r7
 8008384:	4630      	mov	r0, r6
 8008386:	f7ff ffda 	bl	800833e <__sfputc_r>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d1f3      	bne.n	8008376 <__sfputs_r+0xa>
 800838e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008390 <_vfiprintf_r>:
 8008390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	460d      	mov	r5, r1
 8008396:	b09d      	sub	sp, #116	@ 0x74
 8008398:	4614      	mov	r4, r2
 800839a:	4698      	mov	r8, r3
 800839c:	4606      	mov	r6, r0
 800839e:	b118      	cbz	r0, 80083a8 <_vfiprintf_r+0x18>
 80083a0:	6a03      	ldr	r3, [r0, #32]
 80083a2:	b90b      	cbnz	r3, 80083a8 <_vfiprintf_r+0x18>
 80083a4:	f7fe f906 	bl	80065b4 <__sinit>
 80083a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083aa:	07d9      	lsls	r1, r3, #31
 80083ac:	d405      	bmi.n	80083ba <_vfiprintf_r+0x2a>
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	059a      	lsls	r2, r3, #22
 80083b2:	d402      	bmi.n	80083ba <_vfiprintf_r+0x2a>
 80083b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083b6:	f7fe fa14 	bl	80067e2 <__retarget_lock_acquire_recursive>
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	071b      	lsls	r3, r3, #28
 80083be:	d501      	bpl.n	80083c4 <_vfiprintf_r+0x34>
 80083c0:	692b      	ldr	r3, [r5, #16]
 80083c2:	b99b      	cbnz	r3, 80083ec <_vfiprintf_r+0x5c>
 80083c4:	4629      	mov	r1, r5
 80083c6:	4630      	mov	r0, r6
 80083c8:	f000 f938 	bl	800863c <__swsetup_r>
 80083cc:	b170      	cbz	r0, 80083ec <_vfiprintf_r+0x5c>
 80083ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083d0:	07dc      	lsls	r4, r3, #31
 80083d2:	d504      	bpl.n	80083de <_vfiprintf_r+0x4e>
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	b01d      	add	sp, #116	@ 0x74
 80083da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083de:	89ab      	ldrh	r3, [r5, #12]
 80083e0:	0598      	lsls	r0, r3, #22
 80083e2:	d4f7      	bmi.n	80083d4 <_vfiprintf_r+0x44>
 80083e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083e6:	f7fe f9fd 	bl	80067e4 <__retarget_lock_release_recursive>
 80083ea:	e7f3      	b.n	80083d4 <_vfiprintf_r+0x44>
 80083ec:	2300      	movs	r3, #0
 80083ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80083f0:	2320      	movs	r3, #32
 80083f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80083fa:	2330      	movs	r3, #48	@ 0x30
 80083fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085ac <_vfiprintf_r+0x21c>
 8008400:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008404:	f04f 0901 	mov.w	r9, #1
 8008408:	4623      	mov	r3, r4
 800840a:	469a      	mov	sl, r3
 800840c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008410:	b10a      	cbz	r2, 8008416 <_vfiprintf_r+0x86>
 8008412:	2a25      	cmp	r2, #37	@ 0x25
 8008414:	d1f9      	bne.n	800840a <_vfiprintf_r+0x7a>
 8008416:	ebba 0b04 	subs.w	fp, sl, r4
 800841a:	d00b      	beq.n	8008434 <_vfiprintf_r+0xa4>
 800841c:	465b      	mov	r3, fp
 800841e:	4622      	mov	r2, r4
 8008420:	4629      	mov	r1, r5
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff ffa2 	bl	800836c <__sfputs_r>
 8008428:	3001      	adds	r0, #1
 800842a:	f000 80a7 	beq.w	800857c <_vfiprintf_r+0x1ec>
 800842e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008430:	445a      	add	r2, fp
 8008432:	9209      	str	r2, [sp, #36]	@ 0x24
 8008434:	f89a 3000 	ldrb.w	r3, [sl]
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 809f 	beq.w	800857c <_vfiprintf_r+0x1ec>
 800843e:	2300      	movs	r3, #0
 8008440:	f04f 32ff 	mov.w	r2, #4294967295
 8008444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008448:	f10a 0a01 	add.w	sl, sl, #1
 800844c:	9304      	str	r3, [sp, #16]
 800844e:	9307      	str	r3, [sp, #28]
 8008450:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008454:	931a      	str	r3, [sp, #104]	@ 0x68
 8008456:	4654      	mov	r4, sl
 8008458:	2205      	movs	r2, #5
 800845a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800845e:	4853      	ldr	r0, [pc, #332]	@ (80085ac <_vfiprintf_r+0x21c>)
 8008460:	f7f7 febe 	bl	80001e0 <memchr>
 8008464:	9a04      	ldr	r2, [sp, #16]
 8008466:	b9d8      	cbnz	r0, 80084a0 <_vfiprintf_r+0x110>
 8008468:	06d1      	lsls	r1, r2, #27
 800846a:	bf44      	itt	mi
 800846c:	2320      	movmi	r3, #32
 800846e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008472:	0713      	lsls	r3, r2, #28
 8008474:	bf44      	itt	mi
 8008476:	232b      	movmi	r3, #43	@ 0x2b
 8008478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800847c:	f89a 3000 	ldrb.w	r3, [sl]
 8008480:	2b2a      	cmp	r3, #42	@ 0x2a
 8008482:	d015      	beq.n	80084b0 <_vfiprintf_r+0x120>
 8008484:	9a07      	ldr	r2, [sp, #28]
 8008486:	4654      	mov	r4, sl
 8008488:	2000      	movs	r0, #0
 800848a:	f04f 0c0a 	mov.w	ip, #10
 800848e:	4621      	mov	r1, r4
 8008490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008494:	3b30      	subs	r3, #48	@ 0x30
 8008496:	2b09      	cmp	r3, #9
 8008498:	d94b      	bls.n	8008532 <_vfiprintf_r+0x1a2>
 800849a:	b1b0      	cbz	r0, 80084ca <_vfiprintf_r+0x13a>
 800849c:	9207      	str	r2, [sp, #28]
 800849e:	e014      	b.n	80084ca <_vfiprintf_r+0x13a>
 80084a0:	eba0 0308 	sub.w	r3, r0, r8
 80084a4:	fa09 f303 	lsl.w	r3, r9, r3
 80084a8:	4313      	orrs	r3, r2
 80084aa:	9304      	str	r3, [sp, #16]
 80084ac:	46a2      	mov	sl, r4
 80084ae:	e7d2      	b.n	8008456 <_vfiprintf_r+0xc6>
 80084b0:	9b03      	ldr	r3, [sp, #12]
 80084b2:	1d19      	adds	r1, r3, #4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	9103      	str	r1, [sp, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	bfbb      	ittet	lt
 80084bc:	425b      	neglt	r3, r3
 80084be:	f042 0202 	orrlt.w	r2, r2, #2
 80084c2:	9307      	strge	r3, [sp, #28]
 80084c4:	9307      	strlt	r3, [sp, #28]
 80084c6:	bfb8      	it	lt
 80084c8:	9204      	strlt	r2, [sp, #16]
 80084ca:	7823      	ldrb	r3, [r4, #0]
 80084cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80084ce:	d10a      	bne.n	80084e6 <_vfiprintf_r+0x156>
 80084d0:	7863      	ldrb	r3, [r4, #1]
 80084d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80084d4:	d132      	bne.n	800853c <_vfiprintf_r+0x1ac>
 80084d6:	9b03      	ldr	r3, [sp, #12]
 80084d8:	1d1a      	adds	r2, r3, #4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	9203      	str	r2, [sp, #12]
 80084de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084e2:	3402      	adds	r4, #2
 80084e4:	9305      	str	r3, [sp, #20]
 80084e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085bc <_vfiprintf_r+0x22c>
 80084ea:	7821      	ldrb	r1, [r4, #0]
 80084ec:	2203      	movs	r2, #3
 80084ee:	4650      	mov	r0, sl
 80084f0:	f7f7 fe76 	bl	80001e0 <memchr>
 80084f4:	b138      	cbz	r0, 8008506 <_vfiprintf_r+0x176>
 80084f6:	9b04      	ldr	r3, [sp, #16]
 80084f8:	eba0 000a 	sub.w	r0, r0, sl
 80084fc:	2240      	movs	r2, #64	@ 0x40
 80084fe:	4082      	lsls	r2, r0
 8008500:	4313      	orrs	r3, r2
 8008502:	3401      	adds	r4, #1
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850a:	4829      	ldr	r0, [pc, #164]	@ (80085b0 <_vfiprintf_r+0x220>)
 800850c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008510:	2206      	movs	r2, #6
 8008512:	f7f7 fe65 	bl	80001e0 <memchr>
 8008516:	2800      	cmp	r0, #0
 8008518:	d03f      	beq.n	800859a <_vfiprintf_r+0x20a>
 800851a:	4b26      	ldr	r3, [pc, #152]	@ (80085b4 <_vfiprintf_r+0x224>)
 800851c:	bb1b      	cbnz	r3, 8008566 <_vfiprintf_r+0x1d6>
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	3307      	adds	r3, #7
 8008522:	f023 0307 	bic.w	r3, r3, #7
 8008526:	3308      	adds	r3, #8
 8008528:	9303      	str	r3, [sp, #12]
 800852a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852c:	443b      	add	r3, r7
 800852e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008530:	e76a      	b.n	8008408 <_vfiprintf_r+0x78>
 8008532:	fb0c 3202 	mla	r2, ip, r2, r3
 8008536:	460c      	mov	r4, r1
 8008538:	2001      	movs	r0, #1
 800853a:	e7a8      	b.n	800848e <_vfiprintf_r+0xfe>
 800853c:	2300      	movs	r3, #0
 800853e:	3401      	adds	r4, #1
 8008540:	9305      	str	r3, [sp, #20]
 8008542:	4619      	mov	r1, r3
 8008544:	f04f 0c0a 	mov.w	ip, #10
 8008548:	4620      	mov	r0, r4
 800854a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800854e:	3a30      	subs	r2, #48	@ 0x30
 8008550:	2a09      	cmp	r2, #9
 8008552:	d903      	bls.n	800855c <_vfiprintf_r+0x1cc>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0c6      	beq.n	80084e6 <_vfiprintf_r+0x156>
 8008558:	9105      	str	r1, [sp, #20]
 800855a:	e7c4      	b.n	80084e6 <_vfiprintf_r+0x156>
 800855c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008560:	4604      	mov	r4, r0
 8008562:	2301      	movs	r3, #1
 8008564:	e7f0      	b.n	8008548 <_vfiprintf_r+0x1b8>
 8008566:	ab03      	add	r3, sp, #12
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	462a      	mov	r2, r5
 800856c:	4b12      	ldr	r3, [pc, #72]	@ (80085b8 <_vfiprintf_r+0x228>)
 800856e:	a904      	add	r1, sp, #16
 8008570:	4630      	mov	r0, r6
 8008572:	f7fd fbdb 	bl	8005d2c <_printf_float>
 8008576:	4607      	mov	r7, r0
 8008578:	1c78      	adds	r0, r7, #1
 800857a:	d1d6      	bne.n	800852a <_vfiprintf_r+0x19a>
 800857c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800857e:	07d9      	lsls	r1, r3, #31
 8008580:	d405      	bmi.n	800858e <_vfiprintf_r+0x1fe>
 8008582:	89ab      	ldrh	r3, [r5, #12]
 8008584:	059a      	lsls	r2, r3, #22
 8008586:	d402      	bmi.n	800858e <_vfiprintf_r+0x1fe>
 8008588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800858a:	f7fe f92b 	bl	80067e4 <__retarget_lock_release_recursive>
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	065b      	lsls	r3, r3, #25
 8008592:	f53f af1f 	bmi.w	80083d4 <_vfiprintf_r+0x44>
 8008596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008598:	e71e      	b.n	80083d8 <_vfiprintf_r+0x48>
 800859a:	ab03      	add	r3, sp, #12
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	462a      	mov	r2, r5
 80085a0:	4b05      	ldr	r3, [pc, #20]	@ (80085b8 <_vfiprintf_r+0x228>)
 80085a2:	a904      	add	r1, sp, #16
 80085a4:	4630      	mov	r0, r6
 80085a6:	f7fd fe59 	bl	800625c <_printf_i>
 80085aa:	e7e4      	b.n	8008576 <_vfiprintf_r+0x1e6>
 80085ac:	080099a0 	.word	0x080099a0
 80085b0:	080099aa 	.word	0x080099aa
 80085b4:	08005d2d 	.word	0x08005d2d
 80085b8:	0800836d 	.word	0x0800836d
 80085bc:	080099a6 	.word	0x080099a6

080085c0 <__swbuf_r>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	460e      	mov	r6, r1
 80085c4:	4614      	mov	r4, r2
 80085c6:	4605      	mov	r5, r0
 80085c8:	b118      	cbz	r0, 80085d2 <__swbuf_r+0x12>
 80085ca:	6a03      	ldr	r3, [r0, #32]
 80085cc:	b90b      	cbnz	r3, 80085d2 <__swbuf_r+0x12>
 80085ce:	f7fd fff1 	bl	80065b4 <__sinit>
 80085d2:	69a3      	ldr	r3, [r4, #24]
 80085d4:	60a3      	str	r3, [r4, #8]
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	071a      	lsls	r2, r3, #28
 80085da:	d501      	bpl.n	80085e0 <__swbuf_r+0x20>
 80085dc:	6923      	ldr	r3, [r4, #16]
 80085de:	b943      	cbnz	r3, 80085f2 <__swbuf_r+0x32>
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f82a 	bl	800863c <__swsetup_r>
 80085e8:	b118      	cbz	r0, 80085f2 <__swbuf_r+0x32>
 80085ea:	f04f 37ff 	mov.w	r7, #4294967295
 80085ee:	4638      	mov	r0, r7
 80085f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	6922      	ldr	r2, [r4, #16]
 80085f6:	1a98      	subs	r0, r3, r2
 80085f8:	6963      	ldr	r3, [r4, #20]
 80085fa:	b2f6      	uxtb	r6, r6
 80085fc:	4283      	cmp	r3, r0
 80085fe:	4637      	mov	r7, r6
 8008600:	dc05      	bgt.n	800860e <__swbuf_r+0x4e>
 8008602:	4621      	mov	r1, r4
 8008604:	4628      	mov	r0, r5
 8008606:	f7ff fd99 	bl	800813c <_fflush_r>
 800860a:	2800      	cmp	r0, #0
 800860c:	d1ed      	bne.n	80085ea <__swbuf_r+0x2a>
 800860e:	68a3      	ldr	r3, [r4, #8]
 8008610:	3b01      	subs	r3, #1
 8008612:	60a3      	str	r3, [r4, #8]
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	6022      	str	r2, [r4, #0]
 800861a:	701e      	strb	r6, [r3, #0]
 800861c:	6962      	ldr	r2, [r4, #20]
 800861e:	1c43      	adds	r3, r0, #1
 8008620:	429a      	cmp	r2, r3
 8008622:	d004      	beq.n	800862e <__swbuf_r+0x6e>
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	07db      	lsls	r3, r3, #31
 8008628:	d5e1      	bpl.n	80085ee <__swbuf_r+0x2e>
 800862a:	2e0a      	cmp	r6, #10
 800862c:	d1df      	bne.n	80085ee <__swbuf_r+0x2e>
 800862e:	4621      	mov	r1, r4
 8008630:	4628      	mov	r0, r5
 8008632:	f7ff fd83 	bl	800813c <_fflush_r>
 8008636:	2800      	cmp	r0, #0
 8008638:	d0d9      	beq.n	80085ee <__swbuf_r+0x2e>
 800863a:	e7d6      	b.n	80085ea <__swbuf_r+0x2a>

0800863c <__swsetup_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4b29      	ldr	r3, [pc, #164]	@ (80086e4 <__swsetup_r+0xa8>)
 8008640:	4605      	mov	r5, r0
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	460c      	mov	r4, r1
 8008646:	b118      	cbz	r0, 8008650 <__swsetup_r+0x14>
 8008648:	6a03      	ldr	r3, [r0, #32]
 800864a:	b90b      	cbnz	r3, 8008650 <__swsetup_r+0x14>
 800864c:	f7fd ffb2 	bl	80065b4 <__sinit>
 8008650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008654:	0719      	lsls	r1, r3, #28
 8008656:	d422      	bmi.n	800869e <__swsetup_r+0x62>
 8008658:	06da      	lsls	r2, r3, #27
 800865a:	d407      	bmi.n	800866c <__swsetup_r+0x30>
 800865c:	2209      	movs	r2, #9
 800865e:	602a      	str	r2, [r5, #0]
 8008660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	e033      	b.n	80086d4 <__swsetup_r+0x98>
 800866c:	0758      	lsls	r0, r3, #29
 800866e:	d512      	bpl.n	8008696 <__swsetup_r+0x5a>
 8008670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008672:	b141      	cbz	r1, 8008686 <__swsetup_r+0x4a>
 8008674:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008678:	4299      	cmp	r1, r3
 800867a:	d002      	beq.n	8008682 <__swsetup_r+0x46>
 800867c:	4628      	mov	r0, r5
 800867e:	f7fe feff 	bl	8007480 <_free_r>
 8008682:	2300      	movs	r3, #0
 8008684:	6363      	str	r3, [r4, #52]	@ 0x34
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800868c:	81a3      	strh	r3, [r4, #12]
 800868e:	2300      	movs	r3, #0
 8008690:	6063      	str	r3, [r4, #4]
 8008692:	6923      	ldr	r3, [r4, #16]
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	f043 0308 	orr.w	r3, r3, #8
 800869c:	81a3      	strh	r3, [r4, #12]
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	b94b      	cbnz	r3, 80086b6 <__swsetup_r+0x7a>
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ac:	d003      	beq.n	80086b6 <__swsetup_r+0x7a>
 80086ae:	4621      	mov	r1, r4
 80086b0:	4628      	mov	r0, r5
 80086b2:	f000 f883 	bl	80087bc <__smakebuf_r>
 80086b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ba:	f013 0201 	ands.w	r2, r3, #1
 80086be:	d00a      	beq.n	80086d6 <__swsetup_r+0x9a>
 80086c0:	2200      	movs	r2, #0
 80086c2:	60a2      	str	r2, [r4, #8]
 80086c4:	6962      	ldr	r2, [r4, #20]
 80086c6:	4252      	negs	r2, r2
 80086c8:	61a2      	str	r2, [r4, #24]
 80086ca:	6922      	ldr	r2, [r4, #16]
 80086cc:	b942      	cbnz	r2, 80086e0 <__swsetup_r+0xa4>
 80086ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086d2:	d1c5      	bne.n	8008660 <__swsetup_r+0x24>
 80086d4:	bd38      	pop	{r3, r4, r5, pc}
 80086d6:	0799      	lsls	r1, r3, #30
 80086d8:	bf58      	it	pl
 80086da:	6962      	ldrpl	r2, [r4, #20]
 80086dc:	60a2      	str	r2, [r4, #8]
 80086de:	e7f4      	b.n	80086ca <__swsetup_r+0x8e>
 80086e0:	2000      	movs	r0, #0
 80086e2:	e7f7      	b.n	80086d4 <__swsetup_r+0x98>
 80086e4:	2000001c 	.word	0x2000001c

080086e8 <_raise_r>:
 80086e8:	291f      	cmp	r1, #31
 80086ea:	b538      	push	{r3, r4, r5, lr}
 80086ec:	4605      	mov	r5, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	d904      	bls.n	80086fc <_raise_r+0x14>
 80086f2:	2316      	movs	r3, #22
 80086f4:	6003      	str	r3, [r0, #0]
 80086f6:	f04f 30ff 	mov.w	r0, #4294967295
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086fe:	b112      	cbz	r2, 8008706 <_raise_r+0x1e>
 8008700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008704:	b94b      	cbnz	r3, 800871a <_raise_r+0x32>
 8008706:	4628      	mov	r0, r5
 8008708:	f000 f830 	bl	800876c <_getpid_r>
 800870c:	4622      	mov	r2, r4
 800870e:	4601      	mov	r1, r0
 8008710:	4628      	mov	r0, r5
 8008712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008716:	f000 b817 	b.w	8008748 <_kill_r>
 800871a:	2b01      	cmp	r3, #1
 800871c:	d00a      	beq.n	8008734 <_raise_r+0x4c>
 800871e:	1c59      	adds	r1, r3, #1
 8008720:	d103      	bne.n	800872a <_raise_r+0x42>
 8008722:	2316      	movs	r3, #22
 8008724:	6003      	str	r3, [r0, #0]
 8008726:	2001      	movs	r0, #1
 8008728:	e7e7      	b.n	80086fa <_raise_r+0x12>
 800872a:	2100      	movs	r1, #0
 800872c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008730:	4620      	mov	r0, r4
 8008732:	4798      	blx	r3
 8008734:	2000      	movs	r0, #0
 8008736:	e7e0      	b.n	80086fa <_raise_r+0x12>

08008738 <raise>:
 8008738:	4b02      	ldr	r3, [pc, #8]	@ (8008744 <raise+0xc>)
 800873a:	4601      	mov	r1, r0
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	f7ff bfd3 	b.w	80086e8 <_raise_r>
 8008742:	bf00      	nop
 8008744:	2000001c 	.word	0x2000001c

08008748 <_kill_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4d07      	ldr	r5, [pc, #28]	@ (8008768 <_kill_r+0x20>)
 800874c:	2300      	movs	r3, #0
 800874e:	4604      	mov	r4, r0
 8008750:	4608      	mov	r0, r1
 8008752:	4611      	mov	r1, r2
 8008754:	602b      	str	r3, [r5, #0]
 8008756:	f7f9 fe11 	bl	800237c <_kill>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	d102      	bne.n	8008764 <_kill_r+0x1c>
 800875e:	682b      	ldr	r3, [r5, #0]
 8008760:	b103      	cbz	r3, 8008764 <_kill_r+0x1c>
 8008762:	6023      	str	r3, [r4, #0]
 8008764:	bd38      	pop	{r3, r4, r5, pc}
 8008766:	bf00      	nop
 8008768:	20000608 	.word	0x20000608

0800876c <_getpid_r>:
 800876c:	f7f9 bdfe 	b.w	800236c <_getpid>

08008770 <__swhatbuf_r>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	460c      	mov	r4, r1
 8008774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008778:	2900      	cmp	r1, #0
 800877a:	b096      	sub	sp, #88	@ 0x58
 800877c:	4615      	mov	r5, r2
 800877e:	461e      	mov	r6, r3
 8008780:	da0d      	bge.n	800879e <__swhatbuf_r+0x2e>
 8008782:	89a3      	ldrh	r3, [r4, #12]
 8008784:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008788:	f04f 0100 	mov.w	r1, #0
 800878c:	bf14      	ite	ne
 800878e:	2340      	movne	r3, #64	@ 0x40
 8008790:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008794:	2000      	movs	r0, #0
 8008796:	6031      	str	r1, [r6, #0]
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	b016      	add	sp, #88	@ 0x58
 800879c:	bd70      	pop	{r4, r5, r6, pc}
 800879e:	466a      	mov	r2, sp
 80087a0:	f000 f848 	bl	8008834 <_fstat_r>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	dbec      	blt.n	8008782 <__swhatbuf_r+0x12>
 80087a8:	9901      	ldr	r1, [sp, #4]
 80087aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087b2:	4259      	negs	r1, r3
 80087b4:	4159      	adcs	r1, r3
 80087b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087ba:	e7eb      	b.n	8008794 <__swhatbuf_r+0x24>

080087bc <__smakebuf_r>:
 80087bc:	898b      	ldrh	r3, [r1, #12]
 80087be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087c0:	079d      	lsls	r5, r3, #30
 80087c2:	4606      	mov	r6, r0
 80087c4:	460c      	mov	r4, r1
 80087c6:	d507      	bpl.n	80087d8 <__smakebuf_r+0x1c>
 80087c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	6123      	str	r3, [r4, #16]
 80087d0:	2301      	movs	r3, #1
 80087d2:	6163      	str	r3, [r4, #20]
 80087d4:	b003      	add	sp, #12
 80087d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d8:	ab01      	add	r3, sp, #4
 80087da:	466a      	mov	r2, sp
 80087dc:	f7ff ffc8 	bl	8008770 <__swhatbuf_r>
 80087e0:	9f00      	ldr	r7, [sp, #0]
 80087e2:	4605      	mov	r5, r0
 80087e4:	4639      	mov	r1, r7
 80087e6:	4630      	mov	r0, r6
 80087e8:	f7fe febe 	bl	8007568 <_malloc_r>
 80087ec:	b948      	cbnz	r0, 8008802 <__smakebuf_r+0x46>
 80087ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f2:	059a      	lsls	r2, r3, #22
 80087f4:	d4ee      	bmi.n	80087d4 <__smakebuf_r+0x18>
 80087f6:	f023 0303 	bic.w	r3, r3, #3
 80087fa:	f043 0302 	orr.w	r3, r3, #2
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	e7e2      	b.n	80087c8 <__smakebuf_r+0xc>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	6020      	str	r0, [r4, #0]
 8008806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	9b01      	ldr	r3, [sp, #4]
 800880e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008812:	b15b      	cbz	r3, 800882c <__smakebuf_r+0x70>
 8008814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008818:	4630      	mov	r0, r6
 800881a:	f000 f81d 	bl	8008858 <_isatty_r>
 800881e:	b128      	cbz	r0, 800882c <__smakebuf_r+0x70>
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	f023 0303 	bic.w	r3, r3, #3
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	81a3      	strh	r3, [r4, #12]
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	431d      	orrs	r5, r3
 8008830:	81a5      	strh	r5, [r4, #12]
 8008832:	e7cf      	b.n	80087d4 <__smakebuf_r+0x18>

08008834 <_fstat_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d07      	ldr	r5, [pc, #28]	@ (8008854 <_fstat_r+0x20>)
 8008838:	2300      	movs	r3, #0
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	4611      	mov	r1, r2
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	f7f9 fdfb 	bl	800243c <_fstat>
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	d102      	bne.n	8008850 <_fstat_r+0x1c>
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	b103      	cbz	r3, 8008850 <_fstat_r+0x1c>
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	bd38      	pop	{r3, r4, r5, pc}
 8008852:	bf00      	nop
 8008854:	20000608 	.word	0x20000608

08008858 <_isatty_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d06      	ldr	r5, [pc, #24]	@ (8008874 <_isatty_r+0x1c>)
 800885c:	2300      	movs	r3, #0
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	602b      	str	r3, [r5, #0]
 8008864:	f7f9 fdfa 	bl	800245c <_isatty>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_isatty_r+0x1a>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_isatty_r+0x1a>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	20000608 	.word	0x20000608

08008878 <pow>:
 8008878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887a:	ed2d 8b02 	vpush	{d8}
 800887e:	eeb0 8a40 	vmov.f32	s16, s0
 8008882:	eef0 8a60 	vmov.f32	s17, s1
 8008886:	ec55 4b11 	vmov	r4, r5, d1
 800888a:	f000 f871 	bl	8008970 <__ieee754_pow>
 800888e:	4622      	mov	r2, r4
 8008890:	462b      	mov	r3, r5
 8008892:	4620      	mov	r0, r4
 8008894:	4629      	mov	r1, r5
 8008896:	ec57 6b10 	vmov	r6, r7, d0
 800889a:	f7f8 f94f 	bl	8000b3c <__aeabi_dcmpun>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d13b      	bne.n	800891a <pow+0xa2>
 80088a2:	ec51 0b18 	vmov	r0, r1, d8
 80088a6:	2200      	movs	r2, #0
 80088a8:	2300      	movs	r3, #0
 80088aa:	f7f8 f915 	bl	8000ad8 <__aeabi_dcmpeq>
 80088ae:	b1b8      	cbz	r0, 80088e0 <pow+0x68>
 80088b0:	2200      	movs	r2, #0
 80088b2:	2300      	movs	r3, #0
 80088b4:	4620      	mov	r0, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	f7f8 f90e 	bl	8000ad8 <__aeabi_dcmpeq>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d146      	bne.n	800894e <pow+0xd6>
 80088c0:	ec45 4b10 	vmov	d0, r4, r5
 80088c4:	f000 f848 	bl	8008958 <finite>
 80088c8:	b338      	cbz	r0, 800891a <pow+0xa2>
 80088ca:	2200      	movs	r2, #0
 80088cc:	2300      	movs	r3, #0
 80088ce:	4620      	mov	r0, r4
 80088d0:	4629      	mov	r1, r5
 80088d2:	f7f8 f90b 	bl	8000aec <__aeabi_dcmplt>
 80088d6:	b300      	cbz	r0, 800891a <pow+0xa2>
 80088d8:	f7fd ff58 	bl	800678c <__errno>
 80088dc:	2322      	movs	r3, #34	@ 0x22
 80088de:	e01b      	b.n	8008918 <pow+0xa0>
 80088e0:	ec47 6b10 	vmov	d0, r6, r7
 80088e4:	f000 f838 	bl	8008958 <finite>
 80088e8:	b9e0      	cbnz	r0, 8008924 <pow+0xac>
 80088ea:	eeb0 0a48 	vmov.f32	s0, s16
 80088ee:	eef0 0a68 	vmov.f32	s1, s17
 80088f2:	f000 f831 	bl	8008958 <finite>
 80088f6:	b1a8      	cbz	r0, 8008924 <pow+0xac>
 80088f8:	ec45 4b10 	vmov	d0, r4, r5
 80088fc:	f000 f82c 	bl	8008958 <finite>
 8008900:	b180      	cbz	r0, 8008924 <pow+0xac>
 8008902:	4632      	mov	r2, r6
 8008904:	463b      	mov	r3, r7
 8008906:	4630      	mov	r0, r6
 8008908:	4639      	mov	r1, r7
 800890a:	f7f8 f917 	bl	8000b3c <__aeabi_dcmpun>
 800890e:	2800      	cmp	r0, #0
 8008910:	d0e2      	beq.n	80088d8 <pow+0x60>
 8008912:	f7fd ff3b 	bl	800678c <__errno>
 8008916:	2321      	movs	r3, #33	@ 0x21
 8008918:	6003      	str	r3, [r0, #0]
 800891a:	ecbd 8b02 	vpop	{d8}
 800891e:	ec47 6b10 	vmov	d0, r6, r7
 8008922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008924:	2200      	movs	r2, #0
 8008926:	2300      	movs	r3, #0
 8008928:	4630      	mov	r0, r6
 800892a:	4639      	mov	r1, r7
 800892c:	f7f8 f8d4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008930:	2800      	cmp	r0, #0
 8008932:	d0f2      	beq.n	800891a <pow+0xa2>
 8008934:	eeb0 0a48 	vmov.f32	s0, s16
 8008938:	eef0 0a68 	vmov.f32	s1, s17
 800893c:	f000 f80c 	bl	8008958 <finite>
 8008940:	2800      	cmp	r0, #0
 8008942:	d0ea      	beq.n	800891a <pow+0xa2>
 8008944:	ec45 4b10 	vmov	d0, r4, r5
 8008948:	f000 f806 	bl	8008958 <finite>
 800894c:	e7c3      	b.n	80088d6 <pow+0x5e>
 800894e:	4f01      	ldr	r7, [pc, #4]	@ (8008954 <pow+0xdc>)
 8008950:	2600      	movs	r6, #0
 8008952:	e7e2      	b.n	800891a <pow+0xa2>
 8008954:	3ff00000 	.word	0x3ff00000

08008958 <finite>:
 8008958:	b082      	sub	sp, #8
 800895a:	ed8d 0b00 	vstr	d0, [sp]
 800895e:	9801      	ldr	r0, [sp, #4]
 8008960:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008964:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008968:	0fc0      	lsrs	r0, r0, #31
 800896a:	b002      	add	sp, #8
 800896c:	4770      	bx	lr
	...

08008970 <__ieee754_pow>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	b091      	sub	sp, #68	@ 0x44
 8008976:	ed8d 1b00 	vstr	d1, [sp]
 800897a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800897e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008982:	ea5a 0001 	orrs.w	r0, sl, r1
 8008986:	ec57 6b10 	vmov	r6, r7, d0
 800898a:	d113      	bne.n	80089b4 <__ieee754_pow+0x44>
 800898c:	19b3      	adds	r3, r6, r6
 800898e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008992:	4152      	adcs	r2, r2
 8008994:	4298      	cmp	r0, r3
 8008996:	4b98      	ldr	r3, [pc, #608]	@ (8008bf8 <__ieee754_pow+0x288>)
 8008998:	4193      	sbcs	r3, r2
 800899a:	f080 84ea 	bcs.w	8009372 <__ieee754_pow+0xa02>
 800899e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089a2:	4630      	mov	r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	f7f7 fc79 	bl	800029c <__adddf3>
 80089aa:	ec41 0b10 	vmov	d0, r0, r1
 80089ae:	b011      	add	sp, #68	@ 0x44
 80089b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b4:	4a91      	ldr	r2, [pc, #580]	@ (8008bfc <__ieee754_pow+0x28c>)
 80089b6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80089ba:	4590      	cmp	r8, r2
 80089bc:	463d      	mov	r5, r7
 80089be:	4633      	mov	r3, r6
 80089c0:	d806      	bhi.n	80089d0 <__ieee754_pow+0x60>
 80089c2:	d101      	bne.n	80089c8 <__ieee754_pow+0x58>
 80089c4:	2e00      	cmp	r6, #0
 80089c6:	d1ea      	bne.n	800899e <__ieee754_pow+0x2e>
 80089c8:	4592      	cmp	sl, r2
 80089ca:	d801      	bhi.n	80089d0 <__ieee754_pow+0x60>
 80089cc:	d10e      	bne.n	80089ec <__ieee754_pow+0x7c>
 80089ce:	b169      	cbz	r1, 80089ec <__ieee754_pow+0x7c>
 80089d0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80089d4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80089d8:	431d      	orrs	r5, r3
 80089da:	d1e0      	bne.n	800899e <__ieee754_pow+0x2e>
 80089dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80089e0:	18db      	adds	r3, r3, r3
 80089e2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80089e6:	4152      	adcs	r2, r2
 80089e8:	429d      	cmp	r5, r3
 80089ea:	e7d4      	b.n	8008996 <__ieee754_pow+0x26>
 80089ec:	2d00      	cmp	r5, #0
 80089ee:	46c3      	mov	fp, r8
 80089f0:	da3a      	bge.n	8008a68 <__ieee754_pow+0xf8>
 80089f2:	4a83      	ldr	r2, [pc, #524]	@ (8008c00 <__ieee754_pow+0x290>)
 80089f4:	4592      	cmp	sl, r2
 80089f6:	d84d      	bhi.n	8008a94 <__ieee754_pow+0x124>
 80089f8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80089fc:	4592      	cmp	sl, r2
 80089fe:	f240 84c7 	bls.w	8009390 <__ieee754_pow+0xa20>
 8008a02:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008a06:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008a0a:	2a14      	cmp	r2, #20
 8008a0c:	dd0f      	ble.n	8008a2e <__ieee754_pow+0xbe>
 8008a0e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008a12:	fa21 f402 	lsr.w	r4, r1, r2
 8008a16:	fa04 f202 	lsl.w	r2, r4, r2
 8008a1a:	428a      	cmp	r2, r1
 8008a1c:	f040 84b8 	bne.w	8009390 <__ieee754_pow+0xa20>
 8008a20:	f004 0401 	and.w	r4, r4, #1
 8008a24:	f1c4 0402 	rsb	r4, r4, #2
 8008a28:	2900      	cmp	r1, #0
 8008a2a:	d158      	bne.n	8008ade <__ieee754_pow+0x16e>
 8008a2c:	e00e      	b.n	8008a4c <__ieee754_pow+0xdc>
 8008a2e:	2900      	cmp	r1, #0
 8008a30:	d154      	bne.n	8008adc <__ieee754_pow+0x16c>
 8008a32:	f1c2 0214 	rsb	r2, r2, #20
 8008a36:	fa4a f402 	asr.w	r4, sl, r2
 8008a3a:	fa04 f202 	lsl.w	r2, r4, r2
 8008a3e:	4552      	cmp	r2, sl
 8008a40:	f040 84a3 	bne.w	800938a <__ieee754_pow+0xa1a>
 8008a44:	f004 0401 	and.w	r4, r4, #1
 8008a48:	f1c4 0402 	rsb	r4, r4, #2
 8008a4c:	4a6d      	ldr	r2, [pc, #436]	@ (8008c04 <__ieee754_pow+0x294>)
 8008a4e:	4592      	cmp	sl, r2
 8008a50:	d12e      	bne.n	8008ab0 <__ieee754_pow+0x140>
 8008a52:	f1b9 0f00 	cmp.w	r9, #0
 8008a56:	f280 8494 	bge.w	8009382 <__ieee754_pow+0xa12>
 8008a5a:	496a      	ldr	r1, [pc, #424]	@ (8008c04 <__ieee754_pow+0x294>)
 8008a5c:	4632      	mov	r2, r6
 8008a5e:	463b      	mov	r3, r7
 8008a60:	2000      	movs	r0, #0
 8008a62:	f7f7 fefb 	bl	800085c <__aeabi_ddiv>
 8008a66:	e7a0      	b.n	80089aa <__ieee754_pow+0x3a>
 8008a68:	2400      	movs	r4, #0
 8008a6a:	bbc1      	cbnz	r1, 8008ade <__ieee754_pow+0x16e>
 8008a6c:	4a63      	ldr	r2, [pc, #396]	@ (8008bfc <__ieee754_pow+0x28c>)
 8008a6e:	4592      	cmp	sl, r2
 8008a70:	d1ec      	bne.n	8008a4c <__ieee754_pow+0xdc>
 8008a72:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008a76:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	f000 8479 	beq.w	8009372 <__ieee754_pow+0xa02>
 8008a80:	4b61      	ldr	r3, [pc, #388]	@ (8008c08 <__ieee754_pow+0x298>)
 8008a82:	4598      	cmp	r8, r3
 8008a84:	d908      	bls.n	8008a98 <__ieee754_pow+0x128>
 8008a86:	f1b9 0f00 	cmp.w	r9, #0
 8008a8a:	f2c0 8476 	blt.w	800937a <__ieee754_pow+0xa0a>
 8008a8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a92:	e78a      	b.n	80089aa <__ieee754_pow+0x3a>
 8008a94:	2402      	movs	r4, #2
 8008a96:	e7e8      	b.n	8008a6a <__ieee754_pow+0xfa>
 8008a98:	f1b9 0f00 	cmp.w	r9, #0
 8008a9c:	f04f 0000 	mov.w	r0, #0
 8008aa0:	f04f 0100 	mov.w	r1, #0
 8008aa4:	da81      	bge.n	80089aa <__ieee754_pow+0x3a>
 8008aa6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008aaa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008aae:	e77c      	b.n	80089aa <__ieee754_pow+0x3a>
 8008ab0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008ab4:	d106      	bne.n	8008ac4 <__ieee754_pow+0x154>
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	463b      	mov	r3, r7
 8008aba:	4630      	mov	r0, r6
 8008abc:	4639      	mov	r1, r7
 8008abe:	f7f7 fda3 	bl	8000608 <__aeabi_dmul>
 8008ac2:	e772      	b.n	80089aa <__ieee754_pow+0x3a>
 8008ac4:	4a51      	ldr	r2, [pc, #324]	@ (8008c0c <__ieee754_pow+0x29c>)
 8008ac6:	4591      	cmp	r9, r2
 8008ac8:	d109      	bne.n	8008ade <__ieee754_pow+0x16e>
 8008aca:	2d00      	cmp	r5, #0
 8008acc:	db07      	blt.n	8008ade <__ieee754_pow+0x16e>
 8008ace:	ec47 6b10 	vmov	d0, r6, r7
 8008ad2:	b011      	add	sp, #68	@ 0x44
 8008ad4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad8:	f000 bd52 	b.w	8009580 <__ieee754_sqrt>
 8008adc:	2400      	movs	r4, #0
 8008ade:	ec47 6b10 	vmov	d0, r6, r7
 8008ae2:	9302      	str	r3, [sp, #8]
 8008ae4:	f000 fc88 	bl	80093f8 <fabs>
 8008ae8:	9b02      	ldr	r3, [sp, #8]
 8008aea:	ec51 0b10 	vmov	r0, r1, d0
 8008aee:	bb53      	cbnz	r3, 8008b46 <__ieee754_pow+0x1d6>
 8008af0:	4b44      	ldr	r3, [pc, #272]	@ (8008c04 <__ieee754_pow+0x294>)
 8008af2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d002      	beq.n	8008b00 <__ieee754_pow+0x190>
 8008afa:	f1b8 0f00 	cmp.w	r8, #0
 8008afe:	d122      	bne.n	8008b46 <__ieee754_pow+0x1d6>
 8008b00:	f1b9 0f00 	cmp.w	r9, #0
 8008b04:	da05      	bge.n	8008b12 <__ieee754_pow+0x1a2>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	493d      	ldr	r1, [pc, #244]	@ (8008c04 <__ieee754_pow+0x294>)
 8008b0e:	f7f7 fea5 	bl	800085c <__aeabi_ddiv>
 8008b12:	2d00      	cmp	r5, #0
 8008b14:	f6bf af49 	bge.w	80089aa <__ieee754_pow+0x3a>
 8008b18:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008b1c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008b20:	ea58 0804 	orrs.w	r8, r8, r4
 8008b24:	d108      	bne.n	8008b38 <__ieee754_pow+0x1c8>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	f7f7 fbb3 	bl	8000298 <__aeabi_dsub>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	e794      	b.n	8008a62 <__ieee754_pow+0xf2>
 8008b38:	2c01      	cmp	r4, #1
 8008b3a:	f47f af36 	bne.w	80089aa <__ieee754_pow+0x3a>
 8008b3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b42:	4619      	mov	r1, r3
 8008b44:	e731      	b.n	80089aa <__ieee754_pow+0x3a>
 8008b46:	0feb      	lsrs	r3, r5, #31
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	ea53 0204 	orrs.w	r2, r3, r4
 8008b4e:	d102      	bne.n	8008b56 <__ieee754_pow+0x1e6>
 8008b50:	4632      	mov	r2, r6
 8008b52:	463b      	mov	r3, r7
 8008b54:	e7e9      	b.n	8008b2a <__ieee754_pow+0x1ba>
 8008b56:	3c01      	subs	r4, #1
 8008b58:	431c      	orrs	r4, r3
 8008b5a:	d016      	beq.n	8008b8a <__ieee754_pow+0x21a>
 8008b5c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008be8 <__ieee754_pow+0x278>
 8008b60:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008b64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b68:	f240 8112 	bls.w	8008d90 <__ieee754_pow+0x420>
 8008b6c:	4b28      	ldr	r3, [pc, #160]	@ (8008c10 <__ieee754_pow+0x2a0>)
 8008b6e:	459a      	cmp	sl, r3
 8008b70:	4b25      	ldr	r3, [pc, #148]	@ (8008c08 <__ieee754_pow+0x298>)
 8008b72:	d916      	bls.n	8008ba2 <__ieee754_pow+0x232>
 8008b74:	4598      	cmp	r8, r3
 8008b76:	d80b      	bhi.n	8008b90 <__ieee754_pow+0x220>
 8008b78:	f1b9 0f00 	cmp.w	r9, #0
 8008b7c:	da0b      	bge.n	8008b96 <__ieee754_pow+0x226>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	b011      	add	sp, #68	@ 0x44
 8008b82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b86:	f000 bcf3 	b.w	8009570 <__math_oflow>
 8008b8a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008bf0 <__ieee754_pow+0x280>
 8008b8e:	e7e7      	b.n	8008b60 <__ieee754_pow+0x1f0>
 8008b90:	f1b9 0f00 	cmp.w	r9, #0
 8008b94:	dcf3      	bgt.n	8008b7e <__ieee754_pow+0x20e>
 8008b96:	2000      	movs	r0, #0
 8008b98:	b011      	add	sp, #68	@ 0x44
 8008b9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9e:	f000 bcdf 	b.w	8009560 <__math_uflow>
 8008ba2:	4598      	cmp	r8, r3
 8008ba4:	d20c      	bcs.n	8008bc0 <__ieee754_pow+0x250>
 8008ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008baa:	2200      	movs	r2, #0
 8008bac:	2300      	movs	r3, #0
 8008bae:	f7f7 ff9d 	bl	8000aec <__aeabi_dcmplt>
 8008bb2:	3800      	subs	r0, #0
 8008bb4:	bf18      	it	ne
 8008bb6:	2001      	movne	r0, #1
 8008bb8:	f1b9 0f00 	cmp.w	r9, #0
 8008bbc:	daec      	bge.n	8008b98 <__ieee754_pow+0x228>
 8008bbe:	e7df      	b.n	8008b80 <__ieee754_pow+0x210>
 8008bc0:	4b10      	ldr	r3, [pc, #64]	@ (8008c04 <__ieee754_pow+0x294>)
 8008bc2:	4598      	cmp	r8, r3
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	d924      	bls.n	8008c14 <__ieee754_pow+0x2a4>
 8008bca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f7f7 ff8c 	bl	8000aec <__aeabi_dcmplt>
 8008bd4:	3800      	subs	r0, #0
 8008bd6:	bf18      	it	ne
 8008bd8:	2001      	movne	r0, #1
 8008bda:	f1b9 0f00 	cmp.w	r9, #0
 8008bde:	dccf      	bgt.n	8008b80 <__ieee754_pow+0x210>
 8008be0:	e7da      	b.n	8008b98 <__ieee754_pow+0x228>
 8008be2:	bf00      	nop
 8008be4:	f3af 8000 	nop.w
 8008be8:	00000000 	.word	0x00000000
 8008bec:	3ff00000 	.word	0x3ff00000
 8008bf0:	00000000 	.word	0x00000000
 8008bf4:	bff00000 	.word	0xbff00000
 8008bf8:	fff00000 	.word	0xfff00000
 8008bfc:	7ff00000 	.word	0x7ff00000
 8008c00:	433fffff 	.word	0x433fffff
 8008c04:	3ff00000 	.word	0x3ff00000
 8008c08:	3fefffff 	.word	0x3fefffff
 8008c0c:	3fe00000 	.word	0x3fe00000
 8008c10:	43f00000 	.word	0x43f00000
 8008c14:	4b5a      	ldr	r3, [pc, #360]	@ (8008d80 <__ieee754_pow+0x410>)
 8008c16:	f7f7 fb3f 	bl	8000298 <__aeabi_dsub>
 8008c1a:	a351      	add	r3, pc, #324	@ (adr r3, 8008d60 <__ieee754_pow+0x3f0>)
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	4604      	mov	r4, r0
 8008c22:	460d      	mov	r5, r1
 8008c24:	f7f7 fcf0 	bl	8000608 <__aeabi_dmul>
 8008c28:	a34f      	add	r3, pc, #316	@ (adr r3, 8008d68 <__ieee754_pow+0x3f8>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460f      	mov	r7, r1
 8008c32:	4620      	mov	r0, r4
 8008c34:	4629      	mov	r1, r5
 8008c36:	f7f7 fce7 	bl	8000608 <__aeabi_dmul>
 8008c3a:	4b52      	ldr	r3, [pc, #328]	@ (8008d84 <__ieee754_pow+0x414>)
 8008c3c:	4682      	mov	sl, r0
 8008c3e:	468b      	mov	fp, r1
 8008c40:	2200      	movs	r2, #0
 8008c42:	4620      	mov	r0, r4
 8008c44:	4629      	mov	r1, r5
 8008c46:	f7f7 fcdf 	bl	8000608 <__aeabi_dmul>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	a148      	add	r1, pc, #288	@ (adr r1, 8008d70 <__ieee754_pow+0x400>)
 8008c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c54:	f7f7 fb20 	bl	8000298 <__aeabi_dsub>
 8008c58:	4622      	mov	r2, r4
 8008c5a:	462b      	mov	r3, r5
 8008c5c:	f7f7 fcd4 	bl	8000608 <__aeabi_dmul>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	2000      	movs	r0, #0
 8008c66:	4948      	ldr	r1, [pc, #288]	@ (8008d88 <__ieee754_pow+0x418>)
 8008c68:	f7f7 fb16 	bl	8000298 <__aeabi_dsub>
 8008c6c:	4622      	mov	r2, r4
 8008c6e:	4680      	mov	r8, r0
 8008c70:	4689      	mov	r9, r1
 8008c72:	462b      	mov	r3, r5
 8008c74:	4620      	mov	r0, r4
 8008c76:	4629      	mov	r1, r5
 8008c78:	f7f7 fcc6 	bl	8000608 <__aeabi_dmul>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4640      	mov	r0, r8
 8008c82:	4649      	mov	r1, r9
 8008c84:	f7f7 fcc0 	bl	8000608 <__aeabi_dmul>
 8008c88:	a33b      	add	r3, pc, #236	@ (adr r3, 8008d78 <__ieee754_pow+0x408>)
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	f7f7 fcbb 	bl	8000608 <__aeabi_dmul>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	4650      	mov	r0, sl
 8008c98:	4659      	mov	r1, fp
 8008c9a:	f7f7 fafd 	bl	8000298 <__aeabi_dsub>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4680      	mov	r8, r0
 8008ca4:	4689      	mov	r9, r1
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	4639      	mov	r1, r7
 8008caa:	f7f7 faf7 	bl	800029c <__adddf3>
 8008cae:	2400      	movs	r4, #0
 8008cb0:	4632      	mov	r2, r6
 8008cb2:	463b      	mov	r3, r7
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	f7f7 faee 	bl	8000298 <__aeabi_dsub>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4640      	mov	r0, r8
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	f7f7 fae8 	bl	8000298 <__aeabi_dsub>
 8008cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ccc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	9304      	str	r3, [sp, #16]
 8008cd4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008cd8:	4606      	mov	r6, r0
 8008cda:	460f      	mov	r7, r1
 8008cdc:	4652      	mov	r2, sl
 8008cde:	465b      	mov	r3, fp
 8008ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ce4:	f7f7 fad8 	bl	8000298 <__aeabi_dsub>
 8008ce8:	4622      	mov	r2, r4
 8008cea:	462b      	mov	r3, r5
 8008cec:	f7f7 fc8c 	bl	8000608 <__aeabi_dmul>
 8008cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cf4:	4680      	mov	r8, r0
 8008cf6:	4689      	mov	r9, r1
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 fc84 	bl	8000608 <__aeabi_dmul>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4640      	mov	r0, r8
 8008d06:	4649      	mov	r1, r9
 8008d08:	f7f7 fac8 	bl	800029c <__adddf3>
 8008d0c:	4652      	mov	r2, sl
 8008d0e:	465b      	mov	r3, fp
 8008d10:	4606      	mov	r6, r0
 8008d12:	460f      	mov	r7, r1
 8008d14:	4620      	mov	r0, r4
 8008d16:	4629      	mov	r1, r5
 8008d18:	f7f7 fc76 	bl	8000608 <__aeabi_dmul>
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4602      	mov	r2, r0
 8008d20:	4680      	mov	r8, r0
 8008d22:	4689      	mov	r9, r1
 8008d24:	4630      	mov	r0, r6
 8008d26:	4639      	mov	r1, r7
 8008d28:	f7f7 fab8 	bl	800029c <__adddf3>
 8008d2c:	4b17      	ldr	r3, [pc, #92]	@ (8008d8c <__ieee754_pow+0x41c>)
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	4604      	mov	r4, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	468a      	mov	sl, r1
 8008d36:	468b      	mov	fp, r1
 8008d38:	f340 82ef 	ble.w	800931a <__ieee754_pow+0x9aa>
 8008d3c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008d40:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008d44:	4303      	orrs	r3, r0
 8008d46:	f000 81e8 	beq.w	800911a <__ieee754_pow+0x7aa>
 8008d4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	2300      	movs	r3, #0
 8008d52:	f7f7 fecb 	bl	8000aec <__aeabi_dcmplt>
 8008d56:	3800      	subs	r0, #0
 8008d58:	bf18      	it	ne
 8008d5a:	2001      	movne	r0, #1
 8008d5c:	e710      	b.n	8008b80 <__ieee754_pow+0x210>
 8008d5e:	bf00      	nop
 8008d60:	60000000 	.word	0x60000000
 8008d64:	3ff71547 	.word	0x3ff71547
 8008d68:	f85ddf44 	.word	0xf85ddf44
 8008d6c:	3e54ae0b 	.word	0x3e54ae0b
 8008d70:	55555555 	.word	0x55555555
 8008d74:	3fd55555 	.word	0x3fd55555
 8008d78:	652b82fe 	.word	0x652b82fe
 8008d7c:	3ff71547 	.word	0x3ff71547
 8008d80:	3ff00000 	.word	0x3ff00000
 8008d84:	3fd00000 	.word	0x3fd00000
 8008d88:	3fe00000 	.word	0x3fe00000
 8008d8c:	408fffff 	.word	0x408fffff
 8008d90:	4bd5      	ldr	r3, [pc, #852]	@ (80090e8 <__ieee754_pow+0x778>)
 8008d92:	402b      	ands	r3, r5
 8008d94:	2200      	movs	r2, #0
 8008d96:	b92b      	cbnz	r3, 8008da4 <__ieee754_pow+0x434>
 8008d98:	4bd4      	ldr	r3, [pc, #848]	@ (80090ec <__ieee754_pow+0x77c>)
 8008d9a:	f7f7 fc35 	bl	8000608 <__aeabi_dmul>
 8008d9e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008da2:	468b      	mov	fp, r1
 8008da4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008da8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008dac:	4413      	add	r3, r2
 8008dae:	930a      	str	r3, [sp, #40]	@ 0x28
 8008db0:	4bcf      	ldr	r3, [pc, #828]	@ (80090f0 <__ieee754_pow+0x780>)
 8008db2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008db6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008dba:	459b      	cmp	fp, r3
 8008dbc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008dc0:	dd08      	ble.n	8008dd4 <__ieee754_pow+0x464>
 8008dc2:	4bcc      	ldr	r3, [pc, #816]	@ (80090f4 <__ieee754_pow+0x784>)
 8008dc4:	459b      	cmp	fp, r3
 8008dc6:	f340 81a5 	ble.w	8009114 <__ieee754_pow+0x7a4>
 8008dca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dcc:	3301      	adds	r3, #1
 8008dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dd0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008dd4:	f04f 0a00 	mov.w	sl, #0
 8008dd8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008ddc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dde:	4bc6      	ldr	r3, [pc, #792]	@ (80090f8 <__ieee754_pow+0x788>)
 8008de0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008de4:	ed93 7b00 	vldr	d7, [r3]
 8008de8:	4629      	mov	r1, r5
 8008dea:	ec53 2b17 	vmov	r2, r3, d7
 8008dee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008df2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008df6:	f7f7 fa4f 	bl	8000298 <__aeabi_dsub>
 8008dfa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460f      	mov	r7, r1
 8008e02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e06:	f7f7 fa49 	bl	800029c <__adddf3>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	2000      	movs	r0, #0
 8008e10:	49ba      	ldr	r1, [pc, #744]	@ (80090fc <__ieee754_pow+0x78c>)
 8008e12:	f7f7 fd23 	bl	800085c <__aeabi_ddiv>
 8008e16:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4630      	mov	r0, r6
 8008e20:	4639      	mov	r1, r7
 8008e22:	f7f7 fbf1 	bl	8000608 <__aeabi_dmul>
 8008e26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e2a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008e2e:	106d      	asrs	r5, r5, #1
 8008e30:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008e34:	f04f 0b00 	mov.w	fp, #0
 8008e38:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008e3c:	4661      	mov	r1, ip
 8008e3e:	2200      	movs	r2, #0
 8008e40:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008e44:	4658      	mov	r0, fp
 8008e46:	46e1      	mov	r9, ip
 8008e48:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008e4c:	4614      	mov	r4, r2
 8008e4e:	461d      	mov	r5, r3
 8008e50:	f7f7 fbda 	bl	8000608 <__aeabi_dmul>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4630      	mov	r0, r6
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	f7f7 fa1c 	bl	8000298 <__aeabi_dsub>
 8008e60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e64:	4606      	mov	r6, r0
 8008e66:	460f      	mov	r7, r1
 8008e68:	4620      	mov	r0, r4
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	f7f7 fa14 	bl	8000298 <__aeabi_dsub>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e78:	f7f7 fa0e 	bl	8000298 <__aeabi_dsub>
 8008e7c:	465a      	mov	r2, fp
 8008e7e:	464b      	mov	r3, r9
 8008e80:	f7f7 fbc2 	bl	8000608 <__aeabi_dmul>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4630      	mov	r0, r6
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	f7f7 fa04 	bl	8000298 <__aeabi_dsub>
 8008e90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008e94:	f7f7 fbb8 	bl	8000608 <__aeabi_dmul>
 8008e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	f7f7 fbb0 	bl	8000608 <__aeabi_dmul>
 8008ea8:	a37d      	add	r3, pc, #500	@ (adr r3, 80090a0 <__ieee754_pow+0x730>)
 8008eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eae:	4604      	mov	r4, r0
 8008eb0:	460d      	mov	r5, r1
 8008eb2:	f7f7 fba9 	bl	8000608 <__aeabi_dmul>
 8008eb6:	a37c      	add	r3, pc, #496	@ (adr r3, 80090a8 <__ieee754_pow+0x738>)
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	f7f7 f9ee 	bl	800029c <__adddf3>
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	462b      	mov	r3, r5
 8008ec4:	f7f7 fba0 	bl	8000608 <__aeabi_dmul>
 8008ec8:	a379      	add	r3, pc, #484	@ (adr r3, 80090b0 <__ieee754_pow+0x740>)
 8008eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ece:	f7f7 f9e5 	bl	800029c <__adddf3>
 8008ed2:	4622      	mov	r2, r4
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	f7f7 fb97 	bl	8000608 <__aeabi_dmul>
 8008eda:	a377      	add	r3, pc, #476	@ (adr r3, 80090b8 <__ieee754_pow+0x748>)
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee0:	f7f7 f9dc 	bl	800029c <__adddf3>
 8008ee4:	4622      	mov	r2, r4
 8008ee6:	462b      	mov	r3, r5
 8008ee8:	f7f7 fb8e 	bl	8000608 <__aeabi_dmul>
 8008eec:	a374      	add	r3, pc, #464	@ (adr r3, 80090c0 <__ieee754_pow+0x750>)
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f7f7 f9d3 	bl	800029c <__adddf3>
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	462b      	mov	r3, r5
 8008efa:	f7f7 fb85 	bl	8000608 <__aeabi_dmul>
 8008efe:	a372      	add	r3, pc, #456	@ (adr r3, 80090c8 <__ieee754_pow+0x758>)
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	f7f7 f9ca 	bl	800029c <__adddf3>
 8008f08:	4622      	mov	r2, r4
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	460f      	mov	r7, r1
 8008f0e:	462b      	mov	r3, r5
 8008f10:	4620      	mov	r0, r4
 8008f12:	4629      	mov	r1, r5
 8008f14:	f7f7 fb78 	bl	8000608 <__aeabi_dmul>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4639      	mov	r1, r7
 8008f20:	f7f7 fb72 	bl	8000608 <__aeabi_dmul>
 8008f24:	465a      	mov	r2, fp
 8008f26:	4604      	mov	r4, r0
 8008f28:	460d      	mov	r5, r1
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f30:	f7f7 f9b4 	bl	800029c <__adddf3>
 8008f34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f38:	f7f7 fb66 	bl	8000608 <__aeabi_dmul>
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	462b      	mov	r3, r5
 8008f40:	f7f7 f9ac 	bl	800029c <__adddf3>
 8008f44:	465a      	mov	r2, fp
 8008f46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	4658      	mov	r0, fp
 8008f4e:	4649      	mov	r1, r9
 8008f50:	f7f7 fb5a 	bl	8000608 <__aeabi_dmul>
 8008f54:	4b6a      	ldr	r3, [pc, #424]	@ (8009100 <__ieee754_pow+0x790>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	4606      	mov	r6, r0
 8008f5a:	460f      	mov	r7, r1
 8008f5c:	f7f7 f99e 	bl	800029c <__adddf3>
 8008f60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f64:	f7f7 f99a 	bl	800029c <__adddf3>
 8008f68:	46d8      	mov	r8, fp
 8008f6a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008f6e:	460d      	mov	r5, r1
 8008f70:	465a      	mov	r2, fp
 8008f72:	460b      	mov	r3, r1
 8008f74:	4640      	mov	r0, r8
 8008f76:	4649      	mov	r1, r9
 8008f78:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008f7c:	f7f7 fb44 	bl	8000608 <__aeabi_dmul>
 8008f80:	465c      	mov	r4, fp
 8008f82:	4680      	mov	r8, r0
 8008f84:	4689      	mov	r9, r1
 8008f86:	4b5e      	ldr	r3, [pc, #376]	@ (8009100 <__ieee754_pow+0x790>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	f7f7 f983 	bl	8000298 <__aeabi_dsub>
 8008f92:	4632      	mov	r2, r6
 8008f94:	463b      	mov	r3, r7
 8008f96:	f7f7 f97f 	bl	8000298 <__aeabi_dsub>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fa2:	f7f7 f979 	bl	8000298 <__aeabi_dsub>
 8008fa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008faa:	f7f7 fb2d 	bl	8000608 <__aeabi_dmul>
 8008fae:	4622      	mov	r2, r4
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	460f      	mov	r7, r1
 8008fb4:	462b      	mov	r3, r5
 8008fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fba:	f7f7 fb25 	bl	8000608 <__aeabi_dmul>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	f7f7 f969 	bl	800029c <__adddf3>
 8008fca:	4606      	mov	r6, r0
 8008fcc:	460f      	mov	r7, r1
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 f961 	bl	800029c <__adddf3>
 8008fda:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008fde:	a33c      	add	r3, pc, #240	@ (adr r3, 80090d0 <__ieee754_pow+0x760>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	4658      	mov	r0, fp
 8008fe6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008fea:	460d      	mov	r5, r1
 8008fec:	f7f7 fb0c 	bl	8000608 <__aeabi_dmul>
 8008ff0:	465c      	mov	r4, fp
 8008ff2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ff6:	4642      	mov	r2, r8
 8008ff8:	464b      	mov	r3, r9
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	f7f7 f94b 	bl	8000298 <__aeabi_dsub>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4630      	mov	r0, r6
 8009008:	4639      	mov	r1, r7
 800900a:	f7f7 f945 	bl	8000298 <__aeabi_dsub>
 800900e:	a332      	add	r3, pc, #200	@ (adr r3, 80090d8 <__ieee754_pow+0x768>)
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	f7f7 faf8 	bl	8000608 <__aeabi_dmul>
 8009018:	a331      	add	r3, pc, #196	@ (adr r3, 80090e0 <__ieee754_pow+0x770>)
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	4620      	mov	r0, r4
 8009024:	4629      	mov	r1, r5
 8009026:	f7f7 faef 	bl	8000608 <__aeabi_dmul>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4630      	mov	r0, r6
 8009030:	4639      	mov	r1, r7
 8009032:	f7f7 f933 	bl	800029c <__adddf3>
 8009036:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009038:	4b32      	ldr	r3, [pc, #200]	@ (8009104 <__ieee754_pow+0x794>)
 800903a:	4413      	add	r3, r2
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f7f7 f92c 	bl	800029c <__adddf3>
 8009044:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009048:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800904a:	f7f7 fa73 	bl	8000534 <__aeabi_i2d>
 800904e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009050:	4b2d      	ldr	r3, [pc, #180]	@ (8009108 <__ieee754_pow+0x798>)
 8009052:	4413      	add	r3, r2
 8009054:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009058:	4606      	mov	r6, r0
 800905a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800905e:	460f      	mov	r7, r1
 8009060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009064:	f7f7 f91a 	bl	800029c <__adddf3>
 8009068:	4642      	mov	r2, r8
 800906a:	464b      	mov	r3, r9
 800906c:	f7f7 f916 	bl	800029c <__adddf3>
 8009070:	4632      	mov	r2, r6
 8009072:	463b      	mov	r3, r7
 8009074:	f7f7 f912 	bl	800029c <__adddf3>
 8009078:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800907c:	4632      	mov	r2, r6
 800907e:	463b      	mov	r3, r7
 8009080:	4658      	mov	r0, fp
 8009082:	460d      	mov	r5, r1
 8009084:	f7f7 f908 	bl	8000298 <__aeabi_dsub>
 8009088:	4642      	mov	r2, r8
 800908a:	464b      	mov	r3, r9
 800908c:	f7f7 f904 	bl	8000298 <__aeabi_dsub>
 8009090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009094:	f7f7 f900 	bl	8000298 <__aeabi_dsub>
 8009098:	465c      	mov	r4, fp
 800909a:	4602      	mov	r2, r0
 800909c:	e036      	b.n	800910c <__ieee754_pow+0x79c>
 800909e:	bf00      	nop
 80090a0:	4a454eef 	.word	0x4a454eef
 80090a4:	3fca7e28 	.word	0x3fca7e28
 80090a8:	93c9db65 	.word	0x93c9db65
 80090ac:	3fcd864a 	.word	0x3fcd864a
 80090b0:	a91d4101 	.word	0xa91d4101
 80090b4:	3fd17460 	.word	0x3fd17460
 80090b8:	518f264d 	.word	0x518f264d
 80090bc:	3fd55555 	.word	0x3fd55555
 80090c0:	db6fabff 	.word	0xdb6fabff
 80090c4:	3fdb6db6 	.word	0x3fdb6db6
 80090c8:	33333303 	.word	0x33333303
 80090cc:	3fe33333 	.word	0x3fe33333
 80090d0:	e0000000 	.word	0xe0000000
 80090d4:	3feec709 	.word	0x3feec709
 80090d8:	dc3a03fd 	.word	0xdc3a03fd
 80090dc:	3feec709 	.word	0x3feec709
 80090e0:	145b01f5 	.word	0x145b01f5
 80090e4:	be3e2fe0 	.word	0xbe3e2fe0
 80090e8:	7ff00000 	.word	0x7ff00000
 80090ec:	43400000 	.word	0x43400000
 80090f0:	0003988e 	.word	0x0003988e
 80090f4:	000bb679 	.word	0x000bb679
 80090f8:	08009b18 	.word	0x08009b18
 80090fc:	3ff00000 	.word	0x3ff00000
 8009100:	40080000 	.word	0x40080000
 8009104:	08009af8 	.word	0x08009af8
 8009108:	08009b08 	.word	0x08009b08
 800910c:	460b      	mov	r3, r1
 800910e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009112:	e5d7      	b.n	8008cc4 <__ieee754_pow+0x354>
 8009114:	f04f 0a01 	mov.w	sl, #1
 8009118:	e65e      	b.n	8008dd8 <__ieee754_pow+0x468>
 800911a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80093ec <__ieee754_pow+0xa7c>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	4630      	mov	r0, r6
 8009122:	4639      	mov	r1, r7
 8009124:	f7f7 f8ba 	bl	800029c <__adddf3>
 8009128:	4642      	mov	r2, r8
 800912a:	e9cd 0100 	strd	r0, r1, [sp]
 800912e:	464b      	mov	r3, r9
 8009130:	4620      	mov	r0, r4
 8009132:	4629      	mov	r1, r5
 8009134:	f7f7 f8b0 	bl	8000298 <__aeabi_dsub>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009140:	f7f7 fcf2 	bl	8000b28 <__aeabi_dcmpgt>
 8009144:	2800      	cmp	r0, #0
 8009146:	f47f ae00 	bne.w	8008d4a <__ieee754_pow+0x3da>
 800914a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800914e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009152:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009156:	fa43 fa0a 	asr.w	sl, r3, sl
 800915a:	44da      	add	sl, fp
 800915c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009160:	489d      	ldr	r0, [pc, #628]	@ (80093d8 <__ieee754_pow+0xa68>)
 8009162:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009166:	4108      	asrs	r0, r1
 8009168:	ea00 030a 	and.w	r3, r0, sl
 800916c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009170:	f1c1 0114 	rsb	r1, r1, #20
 8009174:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009178:	fa4a fa01 	asr.w	sl, sl, r1
 800917c:	f1bb 0f00 	cmp.w	fp, #0
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f04f 0200 	mov.w	r2, #0
 8009188:	bfb8      	it	lt
 800918a:	f1ca 0a00 	rsblt	sl, sl, #0
 800918e:	f7f7 f883 	bl	8000298 <__aeabi_dsub>
 8009192:	4680      	mov	r8, r0
 8009194:	4689      	mov	r9, r1
 8009196:	4632      	mov	r2, r6
 8009198:	463b      	mov	r3, r7
 800919a:	4640      	mov	r0, r8
 800919c:	4649      	mov	r1, r9
 800919e:	f7f7 f87d 	bl	800029c <__adddf3>
 80091a2:	2400      	movs	r4, #0
 80091a4:	a37c      	add	r3, pc, #496	@ (adr r3, 8009398 <__ieee754_pow+0xa28>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	4620      	mov	r0, r4
 80091ac:	460d      	mov	r5, r1
 80091ae:	f7f7 fa2b 	bl	8000608 <__aeabi_dmul>
 80091b2:	4642      	mov	r2, r8
 80091b4:	e9cd 0100 	strd	r0, r1, [sp]
 80091b8:	464b      	mov	r3, r9
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	f7f7 f86b 	bl	8000298 <__aeabi_dsub>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4630      	mov	r0, r6
 80091c8:	4639      	mov	r1, r7
 80091ca:	f7f7 f865 	bl	8000298 <__aeabi_dsub>
 80091ce:	a374      	add	r3, pc, #464	@ (adr r3, 80093a0 <__ieee754_pow+0xa30>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	f7f7 fa18 	bl	8000608 <__aeabi_dmul>
 80091d8:	a373      	add	r3, pc, #460	@ (adr r3, 80093a8 <__ieee754_pow+0xa38>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	4680      	mov	r8, r0
 80091e0:	4689      	mov	r9, r1
 80091e2:	4620      	mov	r0, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	f7f7 fa0f 	bl	8000608 <__aeabi_dmul>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	4640      	mov	r0, r8
 80091f0:	4649      	mov	r1, r9
 80091f2:	f7f7 f853 	bl	800029c <__adddf3>
 80091f6:	4604      	mov	r4, r0
 80091f8:	460d      	mov	r5, r1
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009202:	f7f7 f84b 	bl	800029c <__adddf3>
 8009206:	e9dd 2300 	ldrd	r2, r3, [sp]
 800920a:	4680      	mov	r8, r0
 800920c:	4689      	mov	r9, r1
 800920e:	f7f7 f843 	bl	8000298 <__aeabi_dsub>
 8009212:	4602      	mov	r2, r0
 8009214:	460b      	mov	r3, r1
 8009216:	4620      	mov	r0, r4
 8009218:	4629      	mov	r1, r5
 800921a:	f7f7 f83d 	bl	8000298 <__aeabi_dsub>
 800921e:	4642      	mov	r2, r8
 8009220:	4606      	mov	r6, r0
 8009222:	460f      	mov	r7, r1
 8009224:	464b      	mov	r3, r9
 8009226:	4640      	mov	r0, r8
 8009228:	4649      	mov	r1, r9
 800922a:	f7f7 f9ed 	bl	8000608 <__aeabi_dmul>
 800922e:	a360      	add	r3, pc, #384	@ (adr r3, 80093b0 <__ieee754_pow+0xa40>)
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	4604      	mov	r4, r0
 8009236:	460d      	mov	r5, r1
 8009238:	f7f7 f9e6 	bl	8000608 <__aeabi_dmul>
 800923c:	a35e      	add	r3, pc, #376	@ (adr r3, 80093b8 <__ieee754_pow+0xa48>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f7f7 f829 	bl	8000298 <__aeabi_dsub>
 8009246:	4622      	mov	r2, r4
 8009248:	462b      	mov	r3, r5
 800924a:	f7f7 f9dd 	bl	8000608 <__aeabi_dmul>
 800924e:	a35c      	add	r3, pc, #368	@ (adr r3, 80093c0 <__ieee754_pow+0xa50>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f7 f822 	bl	800029c <__adddf3>
 8009258:	4622      	mov	r2, r4
 800925a:	462b      	mov	r3, r5
 800925c:	f7f7 f9d4 	bl	8000608 <__aeabi_dmul>
 8009260:	a359      	add	r3, pc, #356	@ (adr r3, 80093c8 <__ieee754_pow+0xa58>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f7 f817 	bl	8000298 <__aeabi_dsub>
 800926a:	4622      	mov	r2, r4
 800926c:	462b      	mov	r3, r5
 800926e:	f7f7 f9cb 	bl	8000608 <__aeabi_dmul>
 8009272:	a357      	add	r3, pc, #348	@ (adr r3, 80093d0 <__ieee754_pow+0xa60>)
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f7f7 f810 	bl	800029c <__adddf3>
 800927c:	4622      	mov	r2, r4
 800927e:	462b      	mov	r3, r5
 8009280:	f7f7 f9c2 	bl	8000608 <__aeabi_dmul>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4640      	mov	r0, r8
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 f804 	bl	8000298 <__aeabi_dsub>
 8009290:	4604      	mov	r4, r0
 8009292:	460d      	mov	r5, r1
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4640      	mov	r0, r8
 800929a:	4649      	mov	r1, r9
 800929c:	f7f7 f9b4 	bl	8000608 <__aeabi_dmul>
 80092a0:	2200      	movs	r2, #0
 80092a2:	e9cd 0100 	strd	r0, r1, [sp]
 80092a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092aa:	4620      	mov	r0, r4
 80092ac:	4629      	mov	r1, r5
 80092ae:	f7f6 fff3 	bl	8000298 <__aeabi_dsub>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092ba:	f7f7 facf 	bl	800085c <__aeabi_ddiv>
 80092be:	4632      	mov	r2, r6
 80092c0:	4604      	mov	r4, r0
 80092c2:	460d      	mov	r5, r1
 80092c4:	463b      	mov	r3, r7
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f7f7 f99d 	bl	8000608 <__aeabi_dmul>
 80092ce:	4632      	mov	r2, r6
 80092d0:	463b      	mov	r3, r7
 80092d2:	f7f6 ffe3 	bl	800029c <__adddf3>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	4620      	mov	r0, r4
 80092dc:	4629      	mov	r1, r5
 80092de:	f7f6 ffdb 	bl	8000298 <__aeabi_dsub>
 80092e2:	4642      	mov	r2, r8
 80092e4:	464b      	mov	r3, r9
 80092e6:	f7f6 ffd7 	bl	8000298 <__aeabi_dsub>
 80092ea:	460b      	mov	r3, r1
 80092ec:	4602      	mov	r2, r0
 80092ee:	493b      	ldr	r1, [pc, #236]	@ (80093dc <__ieee754_pow+0xa6c>)
 80092f0:	2000      	movs	r0, #0
 80092f2:	f7f6 ffd1 	bl	8000298 <__aeabi_dsub>
 80092f6:	ec41 0b10 	vmov	d0, r0, r1
 80092fa:	ee10 3a90 	vmov	r3, s1
 80092fe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009306:	da30      	bge.n	800936a <__ieee754_pow+0x9fa>
 8009308:	4650      	mov	r0, sl
 800930a:	f000 f87d 	bl	8009408 <scalbn>
 800930e:	ec51 0b10 	vmov	r0, r1, d0
 8009312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009316:	f7ff bbd2 	b.w	8008abe <__ieee754_pow+0x14e>
 800931a:	4c31      	ldr	r4, [pc, #196]	@ (80093e0 <__ieee754_pow+0xa70>)
 800931c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009320:	42a3      	cmp	r3, r4
 8009322:	d91a      	bls.n	800935a <__ieee754_pow+0x9ea>
 8009324:	4b2f      	ldr	r3, [pc, #188]	@ (80093e4 <__ieee754_pow+0xa74>)
 8009326:	440b      	add	r3, r1
 8009328:	4303      	orrs	r3, r0
 800932a:	d009      	beq.n	8009340 <__ieee754_pow+0x9d0>
 800932c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009330:	2200      	movs	r2, #0
 8009332:	2300      	movs	r3, #0
 8009334:	f7f7 fbda 	bl	8000aec <__aeabi_dcmplt>
 8009338:	3800      	subs	r0, #0
 800933a:	bf18      	it	ne
 800933c:	2001      	movne	r0, #1
 800933e:	e42b      	b.n	8008b98 <__ieee754_pow+0x228>
 8009340:	4642      	mov	r2, r8
 8009342:	464b      	mov	r3, r9
 8009344:	f7f6 ffa8 	bl	8000298 <__aeabi_dsub>
 8009348:	4632      	mov	r2, r6
 800934a:	463b      	mov	r3, r7
 800934c:	f7f7 fbe2 	bl	8000b14 <__aeabi_dcmpge>
 8009350:	2800      	cmp	r0, #0
 8009352:	d1eb      	bne.n	800932c <__ieee754_pow+0x9bc>
 8009354:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80093f4 <__ieee754_pow+0xa84>
 8009358:	e6f7      	b.n	800914a <__ieee754_pow+0x7da>
 800935a:	469a      	mov	sl, r3
 800935c:	4b22      	ldr	r3, [pc, #136]	@ (80093e8 <__ieee754_pow+0xa78>)
 800935e:	459a      	cmp	sl, r3
 8009360:	f63f aef3 	bhi.w	800914a <__ieee754_pow+0x7da>
 8009364:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009368:	e715      	b.n	8009196 <__ieee754_pow+0x826>
 800936a:	ec51 0b10 	vmov	r0, r1, d0
 800936e:	4619      	mov	r1, r3
 8009370:	e7cf      	b.n	8009312 <__ieee754_pow+0x9a2>
 8009372:	491a      	ldr	r1, [pc, #104]	@ (80093dc <__ieee754_pow+0xa6c>)
 8009374:	2000      	movs	r0, #0
 8009376:	f7ff bb18 	b.w	80089aa <__ieee754_pow+0x3a>
 800937a:	2000      	movs	r0, #0
 800937c:	2100      	movs	r1, #0
 800937e:	f7ff bb14 	b.w	80089aa <__ieee754_pow+0x3a>
 8009382:	4630      	mov	r0, r6
 8009384:	4639      	mov	r1, r7
 8009386:	f7ff bb10 	b.w	80089aa <__ieee754_pow+0x3a>
 800938a:	460c      	mov	r4, r1
 800938c:	f7ff bb5e 	b.w	8008a4c <__ieee754_pow+0xdc>
 8009390:	2400      	movs	r4, #0
 8009392:	f7ff bb49 	b.w	8008a28 <__ieee754_pow+0xb8>
 8009396:	bf00      	nop
 8009398:	00000000 	.word	0x00000000
 800939c:	3fe62e43 	.word	0x3fe62e43
 80093a0:	fefa39ef 	.word	0xfefa39ef
 80093a4:	3fe62e42 	.word	0x3fe62e42
 80093a8:	0ca86c39 	.word	0x0ca86c39
 80093ac:	be205c61 	.word	0xbe205c61
 80093b0:	72bea4d0 	.word	0x72bea4d0
 80093b4:	3e663769 	.word	0x3e663769
 80093b8:	c5d26bf1 	.word	0xc5d26bf1
 80093bc:	3ebbbd41 	.word	0x3ebbbd41
 80093c0:	af25de2c 	.word	0xaf25de2c
 80093c4:	3f11566a 	.word	0x3f11566a
 80093c8:	16bebd93 	.word	0x16bebd93
 80093cc:	3f66c16c 	.word	0x3f66c16c
 80093d0:	5555553e 	.word	0x5555553e
 80093d4:	3fc55555 	.word	0x3fc55555
 80093d8:	fff00000 	.word	0xfff00000
 80093dc:	3ff00000 	.word	0x3ff00000
 80093e0:	4090cbff 	.word	0x4090cbff
 80093e4:	3f6f3400 	.word	0x3f6f3400
 80093e8:	3fe00000 	.word	0x3fe00000
 80093ec:	652b82fe 	.word	0x652b82fe
 80093f0:	3c971547 	.word	0x3c971547
 80093f4:	4090cc00 	.word	0x4090cc00

080093f8 <fabs>:
 80093f8:	ec51 0b10 	vmov	r0, r1, d0
 80093fc:	4602      	mov	r2, r0
 80093fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009402:	ec43 2b10 	vmov	d0, r2, r3
 8009406:	4770      	bx	lr

08009408 <scalbn>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	ec55 4b10 	vmov	r4, r5, d0
 800940e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009412:	4606      	mov	r6, r0
 8009414:	462b      	mov	r3, r5
 8009416:	b991      	cbnz	r1, 800943e <scalbn+0x36>
 8009418:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800941c:	4323      	orrs	r3, r4
 800941e:	d03d      	beq.n	800949c <scalbn+0x94>
 8009420:	4b35      	ldr	r3, [pc, #212]	@ (80094f8 <scalbn+0xf0>)
 8009422:	4620      	mov	r0, r4
 8009424:	4629      	mov	r1, r5
 8009426:	2200      	movs	r2, #0
 8009428:	f7f7 f8ee 	bl	8000608 <__aeabi_dmul>
 800942c:	4b33      	ldr	r3, [pc, #204]	@ (80094fc <scalbn+0xf4>)
 800942e:	429e      	cmp	r6, r3
 8009430:	4604      	mov	r4, r0
 8009432:	460d      	mov	r5, r1
 8009434:	da0f      	bge.n	8009456 <scalbn+0x4e>
 8009436:	a328      	add	r3, pc, #160	@ (adr r3, 80094d8 <scalbn+0xd0>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	e01e      	b.n	800947c <scalbn+0x74>
 800943e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009442:	4291      	cmp	r1, r2
 8009444:	d10b      	bne.n	800945e <scalbn+0x56>
 8009446:	4622      	mov	r2, r4
 8009448:	4620      	mov	r0, r4
 800944a:	4629      	mov	r1, r5
 800944c:	f7f6 ff26 	bl	800029c <__adddf3>
 8009450:	4604      	mov	r4, r0
 8009452:	460d      	mov	r5, r1
 8009454:	e022      	b.n	800949c <scalbn+0x94>
 8009456:	460b      	mov	r3, r1
 8009458:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800945c:	3936      	subs	r1, #54	@ 0x36
 800945e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009462:	4296      	cmp	r6, r2
 8009464:	dd0d      	ble.n	8009482 <scalbn+0x7a>
 8009466:	2d00      	cmp	r5, #0
 8009468:	a11d      	add	r1, pc, #116	@ (adr r1, 80094e0 <scalbn+0xd8>)
 800946a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800946e:	da02      	bge.n	8009476 <scalbn+0x6e>
 8009470:	a11d      	add	r1, pc, #116	@ (adr r1, 80094e8 <scalbn+0xe0>)
 8009472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009476:	a31a      	add	r3, pc, #104	@ (adr r3, 80094e0 <scalbn+0xd8>)
 8009478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947c:	f7f7 f8c4 	bl	8000608 <__aeabi_dmul>
 8009480:	e7e6      	b.n	8009450 <scalbn+0x48>
 8009482:	1872      	adds	r2, r6, r1
 8009484:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009488:	428a      	cmp	r2, r1
 800948a:	dcec      	bgt.n	8009466 <scalbn+0x5e>
 800948c:	2a00      	cmp	r2, #0
 800948e:	dd08      	ble.n	80094a2 <scalbn+0x9a>
 8009490:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009494:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009498:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800949c:	ec45 4b10 	vmov	d0, r4, r5
 80094a0:	bd70      	pop	{r4, r5, r6, pc}
 80094a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80094a6:	da08      	bge.n	80094ba <scalbn+0xb2>
 80094a8:	2d00      	cmp	r5, #0
 80094aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80094d8 <scalbn+0xd0>)
 80094ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094b0:	dac1      	bge.n	8009436 <scalbn+0x2e>
 80094b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80094f0 <scalbn+0xe8>)
 80094b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094b8:	e7bd      	b.n	8009436 <scalbn+0x2e>
 80094ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80094be:	3236      	adds	r2, #54	@ 0x36
 80094c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80094c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80094c8:	4620      	mov	r0, r4
 80094ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009500 <scalbn+0xf8>)
 80094cc:	4629      	mov	r1, r5
 80094ce:	2200      	movs	r2, #0
 80094d0:	e7d4      	b.n	800947c <scalbn+0x74>
 80094d2:	bf00      	nop
 80094d4:	f3af 8000 	nop.w
 80094d8:	c2f8f359 	.word	0xc2f8f359
 80094dc:	01a56e1f 	.word	0x01a56e1f
 80094e0:	8800759c 	.word	0x8800759c
 80094e4:	7e37e43c 	.word	0x7e37e43c
 80094e8:	8800759c 	.word	0x8800759c
 80094ec:	fe37e43c 	.word	0xfe37e43c
 80094f0:	c2f8f359 	.word	0xc2f8f359
 80094f4:	81a56e1f 	.word	0x81a56e1f
 80094f8:	43500000 	.word	0x43500000
 80094fc:	ffff3cb0 	.word	0xffff3cb0
 8009500:	3c900000 	.word	0x3c900000

08009504 <with_errno>:
 8009504:	b510      	push	{r4, lr}
 8009506:	ed2d 8b02 	vpush	{d8}
 800950a:	eeb0 8a40 	vmov.f32	s16, s0
 800950e:	eef0 8a60 	vmov.f32	s17, s1
 8009512:	4604      	mov	r4, r0
 8009514:	f7fd f93a 	bl	800678c <__errno>
 8009518:	eeb0 0a48 	vmov.f32	s0, s16
 800951c:	eef0 0a68 	vmov.f32	s1, s17
 8009520:	ecbd 8b02 	vpop	{d8}
 8009524:	6004      	str	r4, [r0, #0]
 8009526:	bd10      	pop	{r4, pc}

08009528 <xflow>:
 8009528:	4603      	mov	r3, r0
 800952a:	b507      	push	{r0, r1, r2, lr}
 800952c:	ec51 0b10 	vmov	r0, r1, d0
 8009530:	b183      	cbz	r3, 8009554 <xflow+0x2c>
 8009532:	4602      	mov	r2, r0
 8009534:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009538:	e9cd 2300 	strd	r2, r3, [sp]
 800953c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009540:	f7f7 f862 	bl	8000608 <__aeabi_dmul>
 8009544:	ec41 0b10 	vmov	d0, r0, r1
 8009548:	2022      	movs	r0, #34	@ 0x22
 800954a:	b003      	add	sp, #12
 800954c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009550:	f7ff bfd8 	b.w	8009504 <with_errno>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	e7ee      	b.n	8009538 <xflow+0x10>
 800955a:	0000      	movs	r0, r0
 800955c:	0000      	movs	r0, r0
	...

08009560 <__math_uflow>:
 8009560:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009568 <__math_uflow+0x8>
 8009564:	f7ff bfe0 	b.w	8009528 <xflow>
 8009568:	00000000 	.word	0x00000000
 800956c:	10000000 	.word	0x10000000

08009570 <__math_oflow>:
 8009570:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009578 <__math_oflow+0x8>
 8009574:	f7ff bfd8 	b.w	8009528 <xflow>
 8009578:	00000000 	.word	0x00000000
 800957c:	70000000 	.word	0x70000000

08009580 <__ieee754_sqrt>:
 8009580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	4a68      	ldr	r2, [pc, #416]	@ (8009728 <__ieee754_sqrt+0x1a8>)
 8009586:	ec55 4b10 	vmov	r4, r5, d0
 800958a:	43aa      	bics	r2, r5
 800958c:	462b      	mov	r3, r5
 800958e:	4621      	mov	r1, r4
 8009590:	d110      	bne.n	80095b4 <__ieee754_sqrt+0x34>
 8009592:	4622      	mov	r2, r4
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f7 f836 	bl	8000608 <__aeabi_dmul>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4620      	mov	r0, r4
 80095a2:	4629      	mov	r1, r5
 80095a4:	f7f6 fe7a 	bl	800029c <__adddf3>
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	ec45 4b10 	vmov	d0, r4, r5
 80095b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	dc0e      	bgt.n	80095d6 <__ieee754_sqrt+0x56>
 80095b8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80095bc:	4322      	orrs	r2, r4
 80095be:	d0f5      	beq.n	80095ac <__ieee754_sqrt+0x2c>
 80095c0:	b19d      	cbz	r5, 80095ea <__ieee754_sqrt+0x6a>
 80095c2:	4622      	mov	r2, r4
 80095c4:	4620      	mov	r0, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f6 fe66 	bl	8000298 <__aeabi_dsub>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	f7f7 f944 	bl	800085c <__aeabi_ddiv>
 80095d4:	e7e8      	b.n	80095a8 <__ieee754_sqrt+0x28>
 80095d6:	152a      	asrs	r2, r5, #20
 80095d8:	d115      	bne.n	8009606 <__ieee754_sqrt+0x86>
 80095da:	2000      	movs	r0, #0
 80095dc:	e009      	b.n	80095f2 <__ieee754_sqrt+0x72>
 80095de:	0acb      	lsrs	r3, r1, #11
 80095e0:	3a15      	subs	r2, #21
 80095e2:	0549      	lsls	r1, r1, #21
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0fa      	beq.n	80095de <__ieee754_sqrt+0x5e>
 80095e8:	e7f7      	b.n	80095da <__ieee754_sqrt+0x5a>
 80095ea:	462a      	mov	r2, r5
 80095ec:	e7fa      	b.n	80095e4 <__ieee754_sqrt+0x64>
 80095ee:	005b      	lsls	r3, r3, #1
 80095f0:	3001      	adds	r0, #1
 80095f2:	02dc      	lsls	r4, r3, #11
 80095f4:	d5fb      	bpl.n	80095ee <__ieee754_sqrt+0x6e>
 80095f6:	1e44      	subs	r4, r0, #1
 80095f8:	1b12      	subs	r2, r2, r4
 80095fa:	f1c0 0420 	rsb	r4, r0, #32
 80095fe:	fa21 f404 	lsr.w	r4, r1, r4
 8009602:	4323      	orrs	r3, r4
 8009604:	4081      	lsls	r1, r0
 8009606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800960a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800960e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009612:	07d2      	lsls	r2, r2, #31
 8009614:	bf5c      	itt	pl
 8009616:	005b      	lslpl	r3, r3, #1
 8009618:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800961c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009620:	bf58      	it	pl
 8009622:	0049      	lslpl	r1, r1, #1
 8009624:	2600      	movs	r6, #0
 8009626:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800962a:	106d      	asrs	r5, r5, #1
 800962c:	0049      	lsls	r1, r1, #1
 800962e:	2016      	movs	r0, #22
 8009630:	4632      	mov	r2, r6
 8009632:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009636:	1917      	adds	r7, r2, r4
 8009638:	429f      	cmp	r7, r3
 800963a:	bfde      	ittt	le
 800963c:	193a      	addle	r2, r7, r4
 800963e:	1bdb      	suble	r3, r3, r7
 8009640:	1936      	addle	r6, r6, r4
 8009642:	0fcf      	lsrs	r7, r1, #31
 8009644:	3801      	subs	r0, #1
 8009646:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800964a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800964e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009652:	d1f0      	bne.n	8009636 <__ieee754_sqrt+0xb6>
 8009654:	4604      	mov	r4, r0
 8009656:	2720      	movs	r7, #32
 8009658:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800965c:	429a      	cmp	r2, r3
 800965e:	eb00 0e0c 	add.w	lr, r0, ip
 8009662:	db02      	blt.n	800966a <__ieee754_sqrt+0xea>
 8009664:	d113      	bne.n	800968e <__ieee754_sqrt+0x10e>
 8009666:	458e      	cmp	lr, r1
 8009668:	d811      	bhi.n	800968e <__ieee754_sqrt+0x10e>
 800966a:	f1be 0f00 	cmp.w	lr, #0
 800966e:	eb0e 000c 	add.w	r0, lr, ip
 8009672:	da42      	bge.n	80096fa <__ieee754_sqrt+0x17a>
 8009674:	2800      	cmp	r0, #0
 8009676:	db40      	blt.n	80096fa <__ieee754_sqrt+0x17a>
 8009678:	f102 0801 	add.w	r8, r2, #1
 800967c:	1a9b      	subs	r3, r3, r2
 800967e:	458e      	cmp	lr, r1
 8009680:	bf88      	it	hi
 8009682:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009686:	eba1 010e 	sub.w	r1, r1, lr
 800968a:	4464      	add	r4, ip
 800968c:	4642      	mov	r2, r8
 800968e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009692:	3f01      	subs	r7, #1
 8009694:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009698:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800969c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80096a0:	d1dc      	bne.n	800965c <__ieee754_sqrt+0xdc>
 80096a2:	4319      	orrs	r1, r3
 80096a4:	d01b      	beq.n	80096de <__ieee754_sqrt+0x15e>
 80096a6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800972c <__ieee754_sqrt+0x1ac>
 80096aa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009730 <__ieee754_sqrt+0x1b0>
 80096ae:	e9da 0100 	ldrd	r0, r1, [sl]
 80096b2:	e9db 2300 	ldrd	r2, r3, [fp]
 80096b6:	f7f6 fdef 	bl	8000298 <__aeabi_dsub>
 80096ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	4640      	mov	r0, r8
 80096c4:	4649      	mov	r1, r9
 80096c6:	f7f7 fa1b 	bl	8000b00 <__aeabi_dcmple>
 80096ca:	b140      	cbz	r0, 80096de <__ieee754_sqrt+0x15e>
 80096cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80096d0:	e9da 0100 	ldrd	r0, r1, [sl]
 80096d4:	e9db 2300 	ldrd	r2, r3, [fp]
 80096d8:	d111      	bne.n	80096fe <__ieee754_sqrt+0x17e>
 80096da:	3601      	adds	r6, #1
 80096dc:	463c      	mov	r4, r7
 80096de:	1072      	asrs	r2, r6, #1
 80096e0:	0863      	lsrs	r3, r4, #1
 80096e2:	07f1      	lsls	r1, r6, #31
 80096e4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80096e8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80096ec:	bf48      	it	mi
 80096ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80096f2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80096f6:	4618      	mov	r0, r3
 80096f8:	e756      	b.n	80095a8 <__ieee754_sqrt+0x28>
 80096fa:	4690      	mov	r8, r2
 80096fc:	e7be      	b.n	800967c <__ieee754_sqrt+0xfc>
 80096fe:	f7f6 fdcd 	bl	800029c <__adddf3>
 8009702:	e9da 8900 	ldrd	r8, r9, [sl]
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	4640      	mov	r0, r8
 800970c:	4649      	mov	r1, r9
 800970e:	f7f7 f9ed 	bl	8000aec <__aeabi_dcmplt>
 8009712:	b120      	cbz	r0, 800971e <__ieee754_sqrt+0x19e>
 8009714:	1ca0      	adds	r0, r4, #2
 8009716:	bf08      	it	eq
 8009718:	3601      	addeq	r6, #1
 800971a:	3402      	adds	r4, #2
 800971c:	e7df      	b.n	80096de <__ieee754_sqrt+0x15e>
 800971e:	1c63      	adds	r3, r4, #1
 8009720:	f023 0401 	bic.w	r4, r3, #1
 8009724:	e7db      	b.n	80096de <__ieee754_sqrt+0x15e>
 8009726:	bf00      	nop
 8009728:	7ff00000 	.word	0x7ff00000
 800972c:	200001e0 	.word	0x200001e0
 8009730:	200001d8 	.word	0x200001d8

08009734 <_init>:
 8009734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009736:	bf00      	nop
 8009738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973a:	bc08      	pop	{r3}
 800973c:	469e      	mov	lr, r3
 800973e:	4770      	bx	lr

08009740 <_fini>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	bf00      	nop
 8009744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009746:	bc08      	pop	{r3}
 8009748:	469e      	mov	lr, r3
 800974a:	4770      	bx	lr
